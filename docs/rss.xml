<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Randy&#39;s Blog</title>
  <subtitle>Randy is blogging about life, tech and music.</subtitle>
  <link href="https://lutaonan.com/rss.xml" rel="self"/>
  <link href="https://lutaonan.com/"/>
  <updated>2023-05-13T00:00:00Z</updated>
  <id>https://lutaonan.com/</id>
  <author>
    <name>Randy</name>
  </author>
  
  <entry>
    <title>我的笔记管理法</title>
    <link href="https://lutaonan.com/blog/how-do-i-take-note/"/>
    <updated>2023-05-13T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/how-do-i-take-note/</id>
    <content type="html">&lt;p&gt;本文视频版：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/kgmdIFNu0Qk&quot;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1Zz4y1877J&quot;&gt;Bilibili&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;作为一个程序员，我每天都会消化大量的信息。我以前总是会担心我花了这么多时间读各种各样感兴趣的内容但最后都派不上用场，或者不知道怎么找到想要的东西。所以我喜欢学习一些关于知识管理的方法论，然后结合自己的情况慢慢摸索出一套比较适合自己的笔记方法。在这个影片我就要给大家分享一下我从浏览信息到记录笔记再到输出的整个过程是怎么样的，我是怎么在我的笔记工具里整理我的笔记的。&lt;/p&gt;
&lt;p&gt;其实与其说是在「记笔记」，我觉得更贴切的说法是我们在构建我们自己的「第二大脑」。我们本身的大脑的长处不是记东西，而是思考和创造。所以我们需要借助计算机创造一个我们的「第二大脑」，把我们见过的有价值的东西一直记住，等我们需要的时候再从里面找出来用。&lt;/p&gt;
&lt;p&gt;当新的一天开始，信息就会不断地进入我们的大脑。如果我们想把我们接收的信息和知识好好地进行管理，我们必须先想清楚我们的信息来源到底有哪些。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BF%A1%E6%81%AF%E8%BE%93%E5%85%A5&quot; tabindex=&quot;-1&quot;&gt;信息输入&lt;/h2&gt;
&lt;p&gt;以我为例，信息来源主要来自：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;脑子里突然出现的想法、灵感。&lt;/li&gt;
&lt;li&gt;我关注的社交媒体的信息流。&lt;/li&gt;
&lt;li&gt;读书、听播客。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E6%83%B3%E6%B3%95%E3%80%81%E7%81%B5%E6%84%9F&quot; tabindex=&quot;-1&quot;&gt;想法、灵感&lt;/h3&gt;
&lt;p&gt;对于脑子里突然出现的想法和灵感，如果我在用电脑，我会写在 Logseq 的 Journal 里；如果我在外面，我会立刻用手机写下来。我自己用的是 Drafts 这个 App, 因为我觉得它的 tag 比 Apple Notes 的要好用。但是你可以用任何自己喜欢的 App, 可以是自带的 Apple Notes, 可以是 flomo 等等。&lt;strong&gt;无论是什么 App, 最重要的是找一个你能点开就开始写的 App&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;至于记下来之后要怎么处理它，在后面我会在讲组织笔记的方法时详细说明。现阶段你要知道的就是，你必须找一个点开就能写的工具帮助你抓住那一刹那的灵感。&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%B3%E6%B3%A8%E7%9A%84%E4%BF%A1%E6%81%AF%E6%B5%81&quot; tabindex=&quot;-1&quot;&gt;关注的信息流&lt;/h3&gt;
&lt;p&gt;我每天起床洗漱完开始打开电脑后，都会开始进入我的「快速浏览」模式，这个过程的主要目的是从我固定的一些信息获取渠道快速地了解有什么事情正在发生。&lt;/p&gt;
&lt;p&gt;比如我每天会固定浏览这几个信息来源：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;HackerNews&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我在 Twitter 上主要是关注了很多国内外的程序员、设计师、产品经理、独立开发者，还有像 Paul Graham, Naval 这样的神级人物。我每天可以从里面看到我关注的这些我很欣赏的人他们在关注什么事情，有什么最新的技术，有什么最新的观点，他们在读什么书等等。&lt;/p&gt;
&lt;p&gt;另外一个是 HackerNews, 应该算得上是世界上最大的程序员社区了，在上面可以让我发现技术圈目前最被关注的事件是什么，当然还会有很多技术之外的好文章。&lt;/p&gt;
&lt;p&gt;还有就是 YouTube, 我在 YouTube 除了关注一些娱乐的内容之外，还会关注一些关于生产效率、技术等等的一些偏严肃的内容。我只会在晚上睡前刷 YouTube, 早上一般来说不会主动打开 YouTube.&lt;/p&gt;
&lt;p&gt;「快速浏览」的关键在于要把重点放在「发现」而不是「吸收」上面。因为前者花的时间很短，而后者会很长，最有效率的做法是，看到你感兴趣的，就把他扔在一个统一的地方，然后忘掉，去看发现下一个。等刷完你的时间线后，再开始「吸收」刚刚扔进来的一堆信息。这有点像你在 shopping, 把你想要的都放在购物车上，然后回家再把这一车的东西吸收整理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/XU0vJl.jpg?x-oss-process=style/80&quot; alt=&quot;快速浏览的流程&quot; /&gt;&lt;/p&gt;
&lt;p&gt;应该统一放在什么地方呢？我个人在不同的情况下会用不同的工具。我感兴趣的内容一般会有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;新的语言、框架、库&lt;/li&gt;
&lt;li&gt;我感兴趣的文章、视频&lt;/li&gt;
&lt;li&gt;新的产品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于我感兴趣的文章和视频，我会首先打开它们快速地略读，如果确定我有兴趣深入地读，我就会把他保存到 Readwise Reader 这个稍后读工具里。无论是文章还是视频，我在浏览器只要点一下就可以收藏。&lt;/p&gt;
&lt;p&gt;这里要注意的是，很多人用稍后读工具，就是点一下保存之后就把页面关掉。而我会做得更多一些，我会根据这篇文章的内容打一些 tag,  这样等到将来我需要写关于某个主题的文章时，可以在 Readwise Reader 里通过标签直接找到关于这个主题的文章。&lt;/p&gt;
&lt;p&gt;我还会在这篇文章加上注释 —— &lt;strong&gt;为什么我想读这篇文章？我想从这篇文章里得到什么？我会强迫自己添加一篇稍后读的文章的时候思考这个问题，并且用十几个字简单地描述。这样当我在之后读这篇文章的时候，我可以带着我的问题去阅读，这样会更有效率。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果看到的是新的产品，新的技术，新的开源库之类的，我会点进去快速地了解一下这个东西，如果我觉得可能在日后我会用到它，我就会把它保存到 Raindrop 这个书签管理服务。首先是给这个东西打上合适的 tag. 然后如果我觉得我需要更深入地学习这个技术，我会把它存到一个叫作 Inbox 的文件夹，我会在「消化」内容的阶段检查我的 Inbox 文件夹。&lt;/p&gt;
&lt;p&gt;总的来说，&lt;strong&gt;第一个阶段就是快速地把我感兴趣的内容捕捉下来，根据不同的内容类型分别存到 Readwise Reader 和 Raindrop 里面。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/EsnoLB.png?x-oss-process=style/80&quot; alt=&quot;Raindrop&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0&quot; tabindex=&quot;-1&quot;&gt;读书笔记&lt;/h3&gt;
&lt;p&gt;我近一年最主要的读书渠道就是微信读书，我会在书里面直接划线和写想法。可惜微信读书没办法同步到 Readwise, 所以我写了个叫 &lt;a href=&quot;https://notepal.randysoft.org/&quot;&gt;NotePal&lt;/a&gt; 的工具帮我把微信读书的笔记转换到 Readwise 的格式，然后我会在读完一本书之后手动地同步到 Readwise.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/3f7DKG.png?x-oss-process=style/80&quot; alt=&quot;NotePal 界面&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%86%85%E5%AE%B9%E6%B6%88%E5%8C%96&quot; tabindex=&quot;-1&quot;&gt;内容消化&lt;/h2&gt;
&lt;p&gt;我一般会在晚上下班后的闲暇时间开始我的「内容消化」阶段。这个阶段主要的任务是把我在「快速浏览」时捕捉到的东西认真地消化。所谓的「消化」，其实指的是我试图从这些内容里面：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学到新的东西&lt;/li&gt;
&lt;li&gt;得到新的灵感、想法&lt;/li&gt;
&lt;li&gt;得知新的工具，将来解决某些问题的时候可以搜到。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在 Readwise Reader 里，我会在读到让我有所收获的句子下面划线，然后打 tag, 有时候还会写下我的想法。我比较喜欢用 Readwise Reader 是因为他还包含了 RSS 订阅，我可以直接把它当作 RSS 阅读器读到我订阅的博客，然后直接在上面做笔记。而且如果保存了一个 YouTube 视频，它会把字幕显示出来，可以直接在字幕上划线做笔记。这些笔记会自动同步到我的 Logseq 里面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/ScLlSu.png?x-oss-process=style/80&quot; alt=&quot;Readwise Reader 界面&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/lXgEWL.png?x-oss-process=style/80&quot; alt=&quot;Readwise Reader 阅读视频&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/PnKc3O.png?x-oss-process=style/80&quot; alt=&quot;Readwise 自动同步到 Logseq&quot; /&gt;&lt;/p&gt;
&lt;p&gt;稍后读的内容过完了之后，我就会检查 Raindrop 的 Inbox, 如果我被某个产品或者技术启发出来了新的想法，我会直接记在 Logseq 里。&lt;/p&gt;
&lt;h2 id=&quot;%E7%AC%94%E8%AE%B0%E7%BB%84%E7%BB%87&quot; tabindex=&quot;-1&quot;&gt;笔记组织&lt;/h2&gt;
&lt;p&gt;把东西记在笔记软件里只是第一步，更重要的一步是怎么去组织这些笔记。组织笔记的目的不是为了满足强迫症，而是尽可能地让我记下来的笔记更容易在我需要的时候被我发现。我一般是在把笔记写进 Logseq 的同时做好组织的，因为在 Logseq 组织笔记的形式无非在关键词里加上双向链接，或者打上合适的 tag.&lt;/p&gt;
&lt;p&gt;但我后来发现如何打好 tag 是一个学问。在 Building a Second Brain 这本书里，Tiago Frante 对如何组织笔记提出了一个框架，叫 P.A.R.A. 也就是 Projects, Areas, Resources, Archives. 这个框架主张把笔记分这四种不同的类型存放。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/kv6cLY.jpg?x-oss-process=style/80&quot; alt=&quot;PARA&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Projects 指的是正在做的项目，比如正在学习的某一门课，正在开发的某个产品。&lt;/li&gt;
&lt;li&gt;Areas 指的是你感兴趣的领域，比如理财、编程、职业规划、商业等等。&lt;/li&gt;
&lt;li&gt;Resources 指的是在未来可能会有用途的东西，我的理解是那些你可能会用到的，将来可以立刻作为参考的东西。比如最近我会看到很多关于 Prompt Engineering 的东西，虽然这不是我的领域，但我觉得将来会有用，所以我的 Logseq 里会有 &lt;code&gt;Resources/Prompt Engineering&lt;/code&gt; 这个页面，跟 prompt 相关的笔记都会带上这个 tag.&lt;/li&gt;
&lt;li&gt;Archives 指的是你已经完成的项目。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我觉得 P.A.R.A 这个框架给了我很大的启发，我在 Logseq 里实践了这个框架，并且根据我自己的情况，我对这个框架进行了一些适用于我的改造。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;我基本不需要 Projects 这个分类，因为我有用其它任务追踪工具。&lt;/li&gt;
&lt;li&gt;同样地，我不需要 Archives.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;因此我只保留 P.A.R.A 里面的 Areas 和 Resources 两个分类。&lt;/p&gt;
&lt;p&gt;另外，在 Building a Second Brain 这本书里有提到关于物理学家费曼的一个故事。很多人问费曼是如何做到在这么多领域都能获得成就的，费曼分享了他的一个技巧：他说他会在心中记住十几个他很感兴趣的问题，即使这些问题他不会主动拿出来钻研，但当他每次看到一些新的发现，新的研究成果的时候，都会把这些研究发现去匹配他心中的那些问题，看这些新的发现能不能解决那些问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You have to keep a dozen of your favorite problems constantly present in your mind, although by and large they will lay in a dormant state. Every time you hear or read a new trick or a new result, test it against each of your twelve problems to see whether it helps. Every once in a while there will be a hit, and people will say, “How did he do it? He must be a genius!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;读到这个故事的时候我非常受启发，我觉得的确是要把做的笔记也归纳到自己在思考的问题那里。这样日积月累，我的问题下面的笔记就会越来越多，多个笔记串起来会对我的问题更有帮助。&lt;/p&gt;
&lt;p&gt;所以除了 Areas 和 Resources 这两个分类，我还建立了 Questions 这个分类，我把一直在困扰我的一些问题都建起了相应的页面，当我在记笔记时，如果觉得这个笔记和我的某个问题有关，就会链接过去。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/aPGacT.png?x-oss-process=style/80&quot; alt=&quot;Question, 如何做决策&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/ULr69f.png?x-oss-process=style/80&quot; alt=&quot;Area&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/yHCcRJ.png?x-oss-process=style/80&quot; alt=&quot;Resources, Prompt Engineering&quot; /&gt;&lt;/p&gt;
&lt;p&gt;无论是哪种组织框架，我觉得最重要的是让记下的笔记尽量容易被找到。当我对自己关注的 Areas 和 Resources 有一个大概的梳理后，我对之后记的笔记最后应该流向哪里也有了更清晰的认知。&lt;/p&gt;
&lt;h2 id=&quot;%E6%A3%80%E7%B4%A2%E8%BE%93%E5%87%BA&quot; tabindex=&quot;-1&quot;&gt;检索输出&lt;/h2&gt;
&lt;p&gt;当我开始想要就某主题开始写作的时候，我就会打开 Typora 和 Logseq, 在 Typora 大概列出提纲，然后针对这个主题在 Logseq, Raindrop, Readwise Reader 里面检索相关的资料。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/w3Egm5.png?x-oss-process=style/80&quot; alt=&quot;Typora&quot; /&gt;&lt;/p&gt;
&lt;p&gt;得益于双向链接，我在 Logseq 检索自己想要的东西的时候还算方便，因为只要你的双向链接和 tag 打得够好，在后期检索的时候你能看到很多不同的笔记互相关联。至于怎么在 Logseq 里面灵活地跳转，不属于这次要讲的范围。之后可能会单独做影片再讲讲。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/hVYPmM.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这就是我最近自己摸索出来的管理我的笔记的方法。你不一定和我用一样的工具，我觉得我想传达的最核心的观点的：&lt;strong&gt;列出你自己每天接收信息的来源。找出一个你认为最方便的方法把你从这些信息源读到的有价值的内容保存下来，然后想清楚它最终应该流向什么地方&lt;/strong&gt;，可能是某个 tag, 可能是 P.A.R.A 里面其中的一个类型，或者是你自己的组织方法。当你有了自己的一套熟悉的方法论，你就会更清楚日后应该怎么找到你想要的东西。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>28 岁，我还想生猛下去</title>
    <link href="https://lutaonan.com/blog/say-in-28/"/>
    <updated>2023-03-25T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/say-in-28/</id>
    <content type="html">&lt;h2 id=&quot;%E4%B8%80&quot; tabindex=&quot;-1&quot;&gt;一&lt;/h2&gt;
&lt;p&gt;今天是我的 28 岁生日。&lt;/p&gt;
&lt;p&gt;在 2016 年的生日，我在博客写下了一篇&lt;a href=&quot;https://lutaonan.com/blog/say-in-21&quot;&gt;《21 岁我想说的》&lt;/a&gt;，那年我进入了「大厂」，获得了世俗意义的「成功」，于是写下了这篇充满雄心壮志的文章。我觉得我离自己想要的「成功」越来越接近，我终于要用技术让别人刮目相看，用技术做点有意义的事情，帮助公司的业务 move fast. 我 13 岁就梦想的事情，在那一年成真了。&lt;/p&gt;
&lt;p&gt;很感谢当年的自己写下了那篇文章，记录下来我的年少轻狂。就像王小波在《黄金时代》里所说的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;那一天我二十一岁，在我一生的黄金时代。我有好多奢望。我想爱，想吃，还想在一瞬间变成天上半明半暗的云。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是直到今天我 28 岁，我才深刻地理解这段话的下半段：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;后来我才知道，生活就是个缓慢受锤的过程，人一天天老下去，奢望也一天天消失，最后变得像挨了锤的牛一样。可是我过二十一岁生日时没有预见到这一点。我觉得自己会永远生猛下去，什么也锤不了我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E4%BA%8C&quot; tabindex=&quot;-1&quot;&gt;二&lt;/h2&gt;
&lt;p&gt;回想我的 18 岁，2013 年，高二。我很迷茫，课桌边上的《JavaScript 高级程序设计》已经被我翻了不知道多少次。后来某次技术大会，我有幸和译者曹力一起吃了个饭，我说我是看你翻译的书长大的。我们一笑而过。但他应该不明白这本书对我的意义有多大。&lt;/p&gt;
&lt;p&gt;周末不能回家，我就去网吧写代码，写开源库，妄想可以在社区做出一点什么。那时我觉得没人懂我的抱负，身边的同学不知道 JavaScript 是什么，他们只知道我成绩不好，不爱学习。这真是冤枉，我比大多数人都爱学习。&lt;/p&gt;
&lt;p&gt;我迷茫是因为我不知道我的路应该怎么走。我因为学编程耽误了课业，但我真的有机会靠编程吃饭吗？是我太幼稚、太理想主义了吗？我会不会到最后，课业和编程都做不好？&lt;/p&gt;
&lt;p&gt;在那些迷茫的时光，读书和写作拯救了我。我一有空就去学校图书馆看书，读了很多现代作品（钱钟书，胡适，王小波，阿城，等等）。还读到了毛姆，那本《刀锋》改变了我很多。&lt;/p&gt;
&lt;p&gt;每次语文考试我都很开心，因为可以写作文。我喜欢借题发挥，格子都不够用。我根本不在意因为离题被打低分，我想表达，我想在文字中创造美。那时的语文老师很懂我，是当时为数不多让我感受到被理解的人，我很感谢他。&lt;/p&gt;
&lt;p&gt;但我还是迷茫，有时我宁愿可以像那些「好学生」一样，心无旁骛，家长开心，老师安心。但我做不到。&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%89&quot; tabindex=&quot;-1&quot;&gt;三&lt;/h2&gt;
&lt;p&gt;19 岁那年，2014，我高考。学校照例开「成人礼」，在大堂给大家打鸡血，奋战高考。我觉得可笑，但又觉得没资格，我只是一个连高中课程都应付不来的自以为是的可怜虫。&lt;/p&gt;
&lt;p&gt;高三一整年我恶补了我落下了课业，我像自学编程一样自学高一高二的课本，我把整个课本一字不落地读，因为我发现很多考点都出在书本里一些很隐秘的角落。我像在做一个试验，用最有效率的方法尽量提升我的成绩。于是我买了历年高考真题，认真研究每一年的规律，哪些东西一定会考，题的难度是什么样的变化，基于这些规律去定制我的备考策略。&lt;/p&gt;
&lt;p&gt;高考完以后，我感受到了一股自由的气息。窗外在木棉树上叫的鸟，对于还在上学的人来说，多美都和她毫无关系，而对于高考完的我来说，我就是那只鸟，我想叫就叫，我想飞就飞。&lt;/p&gt;
&lt;p&gt;很幸运，我的备考策略算是成功了。大家都觉得我考不上本科，但我最终还是考上了一所不怎么样的本科。&lt;/p&gt;
&lt;h2 id=&quot;%E5%9B%9B&quot; tabindex=&quot;-1&quot;&gt;四&lt;/h2&gt;
&lt;p&gt;我不想再回顾我的大学，我在博客说得已经够多了。但有一件事很有趣，我在博客也提到过：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/lett.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是一封 2014 年我写给未来的自己的信。当时在上大一，是上职业规划课时老师布置给我们的一个作业，写完我们就交给老师保存，他会在我们大学毕业后返还。&lt;/p&gt;
&lt;p&gt;老师通过微信联系我说有封信在他那里，并拍了这张照片。我早已忘掉我曾写过这封信，看完后我就全记起来了。&lt;/p&gt;
&lt;p&gt;记起来刚上大学时对未知的憧憬，记起来在教室听无聊的网页设计课，记起来退学那天给宿舍阿姨还了钥匙后坐上中巴回广州市区的时候听的那首《一路向北》。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BA%94&quot; tabindex=&quot;-1&quot;&gt;五&lt;/h2&gt;
&lt;p&gt;退学后我正式加入了一家创业公司，严格来说是从退学前的 part time 最后决定了退学做 full time. 没有人给我意见，应该说没有人能给我意见。选择是困难的，因为没有人知道选择的结果一定是什么。&lt;strong&gt;我在那一刻意识到我是一个成年人了，不像考试时的题，人生给你出的题是没有固定答案的。选择的意义，是在选择后你做的事赋予的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那是一段艰难又快乐的日子。&lt;/p&gt;
&lt;p&gt;快乐是因为我觉得整个世界的大门为我敞开了，写代码从此不是我「不务正业」的事，我终于来到了我的主场。&lt;/p&gt;
&lt;p&gt;艰难是因为我没有钱。我在珠江新城上班，在地铁沿线的番禺大石租了一个 600 块一个月的城中村房子。房子在二楼，没有光线，窗外是墙壁。自来水是有异味的，我只能买桶装水洗漱。出门上班要戴口罩，因为外面路过的都是货车，沙尘滚滚。&lt;/p&gt;
&lt;p&gt;只要 600 块的房子，因为要押二付一，刚从学校出来，我付不起。我向老板提前出了下个月的薪水才租下。&lt;/p&gt;
&lt;p&gt;那时我开始听《IT 公论》，播客的声音让我觉得，即使我在这昏天黑地的小房子里，我和他们一样，都在这互联网的浪潮里参与其中，我已经不是被困在学校里的人了，我要在其中大展拳脚。&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%AD&quot; tabindex=&quot;-1&quot;&gt;六&lt;/h2&gt;
&lt;p&gt;拿到阿里的 offer 完全出于我的意料之外，即使我很喜欢当时的创业公司，以及两位创始人，但在这样的机会面前，我还是选择了「大厂」。&lt;/p&gt;
&lt;p&gt;我记得当天面试了几轮，最后跟 HR 见面聊了一下期望，我说了一个数。回家的路上，觉得自己是不是开得有点高了，会不会因为开高了让我错失了这个机会？在我刚坐到家附近的地铁站，竟然通知我有 offer 了。&lt;/p&gt;
&lt;p&gt;在之后，我开始面对别人附加给我的光环 —— 年轻、辍学、年少有为。我一点也不以此为荣，我只感到害怕。我不是年少有为，我只是笨鸟先飞了，我在别人还在读大二的时候，我就提前进入了社会。我总是想，我的同学都很聪明，等他们毕业了，也许只要一年，就能学到我提前学到的东西了。&lt;/p&gt;
&lt;p&gt;我很享受这样的工作，因为编程就是我的生活，我享受她。当年的我甚至很奇怪，为什么竟然有人不想上班？上班写代码是我最开心的事，她给我带来了成就感，我在用我的能力创造价值。&lt;/p&gt;
&lt;p&gt;这鼓热血，真是充满魅力。&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%83&quot; tabindex=&quot;-1&quot;&gt;七&lt;/h2&gt;
&lt;p&gt;时过境迁，那鼓热血已经花光在最该花的年纪了。热血退去，我才明白，编程是我真正想要追求的东西里最表面的一层。我在意的是，我用代码实现了什么，给用户带来了什么价值。我想用我的品味和价值观，创造一些美好的东西解决实际问题，并且做成一种可持续的商业模式，又或者创造一种商业模式。&lt;/p&gt;
&lt;p&gt;商业是一种艺术，赚钱的方式也有千万种。我想用体面和美在这个世界上生存以及留下一点什么。&lt;/p&gt;
&lt;p&gt;希望我自己会永远生猛下去，什么也锤不了我。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你看，迦摩罗，如果你将一粒石子投入水中，石子会沿着最短的路径沉入水底。恰如悉达多有了目标并下定决心。悉达多什么都不做，他等待、思考、斋戒。他穿行于尘世万物间正如石子飞入水底—— 不必费力，无需挣扎；他自会被指引，他任凭自己沉落。目标会指引他，因为他禁止任何干扰目标的事情进入他的灵魂。这是悉达多做沙门时学到的。愚人们称其为魔法。愚人以为此乃魔鬼所为。其实，魔鬼无所作为，魔鬼并不存在。每个人都能施展法术。每个人都能实现目标，如果他会思考、等待、斋戒。&lt;/p&gt;
&lt;p&gt;—— 赫尔曼·黑塞《悉达多》&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>2022 年终总结</title>
    <link href="https://lutaonan.com/blog/2022-summary/"/>
    <updated>2023-01-09T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2022-summary/</id>
    <content type="html">&lt;p&gt;今年的年终总结写得有点晚，2021 年觉得自己一事无成，迟迟没有动笔。如今 2022 年也已经过去了，虽然同样觉得自己在今年一事无成，但转念又想自己应该给自己一个回顾的机会，终于还是动笔了。&lt;/p&gt;
&lt;h2 id=&quot;%E7%90%90%E7%A2%8E%E7%9A%84%E7%94%9F%E6%B4%BB%E5%8F%98%E5%8C%96&quot; tabindex=&quot;-1&quot;&gt;琐碎的生活变化&lt;/h2&gt;
&lt;p&gt;2022 年因为工作的变化，主要都生活在苏州。苏州是一个很「慢」的城市，我算不上特别喜欢，但我很喜欢苏州的湖。我在 &lt;a href=&quot;https://bytetalk.fm/posts/episode-4/&quot;&gt;ByteTalk 的这期播客节目&lt;/a&gt; 里提到过一些我对苏州的看法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/csxbJO.jpg?x-oss-process=style/80&quot; alt=&quot;东方之门&quot; /&gt;&lt;/p&gt;
&lt;p&gt;苏州的一些区域可以骑摩托车上路，我喜欢摩托，所以买了一辆摩托通勤，周末偶尔也会到不同的湖边溜溜车，还认识了一些摩友。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/gwPep7.jpg?x-oss-process=style/80&quot; alt=&quot;我的摩托车&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%84%8F%E5%A4%96%E7%9A%84%E6%8F%92%E6%9B%B2&quot; tabindex=&quot;-1&quot;&gt;意外的插曲&lt;/h2&gt;
&lt;p&gt;我从多年前开始受情绪问题的困扰，在 2021 年开始变得更严重，到了 2022 年，它变得更加凶猛。&lt;/p&gt;
&lt;p&gt;那根一直在紧绷的弦，最终还是断了。我在年中因为焦虑导致了&lt;a href=&quot;https://www.mayoclinic.org/zh-hans/diseases-conditions/panic-attacks/symptoms-causes/syc-20376021&quot;&gt;惊恐发作&lt;/a&gt;, 这是一种焦虑的躯体化症状。由于没有相关经验，发作时我误以为心脏出现了问题，于是拨打了 120. 这也是我第一次坐上救护车。那一周我住进了医院，做了身体检查，排除了器官问题。&lt;/p&gt;
&lt;p&gt;我的情绪问题导致了我在 2021 和 2022 都没有写什么工作以外的代码，我的内心一直在希望自己放松和希望自己多做点事情两者之间不断摇摆。我曾经认为自己是一个很清楚自己想要什么，也很有目标的人，但最近两年，我越来越不知道自己在做什么，要做什么。&lt;/p&gt;
&lt;h2 id=&quot;%E9%9B%B6%E7%A2%8E%E7%9A%84%E4%BA%A7%E5%87%BA&quot; tabindex=&quot;-1&quot;&gt;零碎的产出&lt;/h2&gt;
&lt;h3 id=&quot;logseq-%E5%88%86%E4%BA%AB&quot; tabindex=&quot;-1&quot;&gt;Logseq 分享&lt;/h3&gt;
&lt;p&gt;我在一个晚上非常即兴地录了一个&lt;a href=&quot;https://www.bilibili.com/video/BV1X44y1K7X1&quot;&gt;关于我如何使用 Logseq&lt;/a&gt; 的视频，没想到会有这么多的播放量，在 &lt;a href=&quot;https://www.youtube.com/watch?v=DxoGJBb1mWQ&quot;&gt;YouTube&lt;/a&gt; 上也收到了不少的感谢和鼓励。&lt;/p&gt;
&lt;h3 id=&quot;codespeedy&quot; tabindex=&quot;-1&quot;&gt;CodeSpeedy&lt;/h3&gt;
&lt;p&gt;发布了一个我自己个人在用的 Code snippet 管理工具 &lt;a href=&quot;https://codespeedy.randyloop.com/&quot;&gt;CodeSpeedy&lt;/a&gt;. 是我第一个发布的用 Tauri 写的程序。&lt;/p&gt;
&lt;h3 id=&quot;amazingtalk&quot; tabindex=&quot;-1&quot;&gt;AMAzingTalk&lt;/h3&gt;
&lt;p&gt;因为看到 Twitter 上有不少人提供付费咨询服务，所以做了一个页面收录了一些不错的提供咨询的人。目前只是一个简单的静态网页，但我有计划把它做成一个产品。&lt;/p&gt;
&lt;h3 id=&quot;%E3%80%8A%E5%85%B0%E8%BF%AA%E5%92%8C%E4%BB%96%E7%9A%84%E6%9C%8B%E5%8F%8B%E4%BB%AC%E3%80%8B&quot; tabindex=&quot;-1&quot;&gt;《兰迪和他的朋友们》&lt;/h3&gt;
&lt;p&gt;我身边有不少不同领域的有意思的朋友，很想通过访谈和交流的形式把他们各自领域的哲学分享给更多人。于是我开了一个不定期更新的 podcast &lt;a href=&quot;https://www.xiaoyuzhoufm.com/podcast/62dc4ab2fa15142e17251f03&quot;&gt;《兰迪和他的朋友们》&lt;/a&gt;。目前只出了两期，分别是和我的健身教练聊了健身，还有和我的同事兼攀岩岩友聊了攀岩。&lt;/p&gt;
&lt;p&gt;新的一年我还计划做一个和香港流行音乐相关的节目，感兴趣的朋友欢迎 Email 和我交流。&lt;/p&gt;
&lt;h2 id=&quot;%E6%94%80%E5%B2%A9&quot; tabindex=&quot;-1&quot;&gt;攀岩&lt;/h2&gt;
&lt;p&gt;今年在我的同事 &lt;a href=&quot;https://www.xiaoyuzhoufm.com/episode/637b7cd6882ce82fb6458b61&quot;&gt;sixian&lt;/a&gt; 的带领下接触了攀岩，我也意外地爱上了这个运动。喜欢和岩友一起交流线路的不同爬法和技巧，喜欢用出优雅的脚法的感觉，喜欢到不同的城市拜访当地的岩馆 —— 例如我和 sixian 到 &lt;a href=&quot;https://www.bilibili.com/video/BV1dg411i7XU&quot;&gt;上海攀岩工厂探店 (Bilibili)&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/0DfpeL.jpg?x-oss-process=style/80&quot; alt=&quot;攀岩&quot; /&gt;&lt;/p&gt;
&lt;p&gt;攀岩是一个力量和技巧结合的运动，我因为有力量训练的基础，让我入门这个运动非常快。但我喜欢学习和应用技巧的部分，我对攀岩的兴趣很大程度上来自于观看了 &lt;a href=&quot;https://www.bilibili.com/video/BV13s411j7fe&quot;&gt;Jain Kim 的优雅脚法&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;%E6%84%9F%E6%9F%93-omicron&quot; tabindex=&quot;-1&quot;&gt;感染 Omicron&lt;/h2&gt;
&lt;p&gt;在 2022 年的尾声感染了 Omicron, 反复发烧 2 天多，咳嗽了近一周。我在开放了一周后才打了第一针科兴。我的症状比较轻，没有失去味觉和嗅觉，也没有所谓的「刀片噪」，只有轻微的扁桃体发炎类似的感觉。&lt;/p&gt;
&lt;h2 id=&quot;%E6%9C%80%E5%90%8E&quot; tabindex=&quot;-1&quot;&gt;最后&lt;/h2&gt;
&lt;p&gt;2023 年我就 28 岁了，有时候填表格看到年龄的一项写着 27, 会让我有些感觉陌生。我总是觉得自己距离踏出学校的那天还不是很远，在写&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/&quot;&gt;做了 6 年程序员，我学到的 10 条经验
&lt;/a&gt; 时我才发现自己已经工作了 6 年多了。我也偶尔看回 &lt;a href=&quot;https://lutaonan.com/blog/say-in-21/&quot;&gt;我 21 生日时写的博客&lt;/a&gt;, 很多问题在我内心缠绕：我还能做些什么？我想要的到底是什么？我的价值是什么？我接受了自己只是个普通人吗？&lt;/p&gt;
&lt;p&gt;我没有答案。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>做了 6 年程序员，我学到的 10 条经验</title>
    <link href="https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/"/>
    <updated>2022-09-20T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/</id>
    <content type="html">&lt;p&gt;索引&lt;/p&gt;
&lt;nav class=&quot;table-of-contents&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E4%BF%9D%E6%8C%81%E4%B8%80%E9%A2%97%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E5%BF%83&quot;&gt;保持一颗解决问题的心&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E4%BA%86%E8%A7%A3%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7&quot;&gt;了解你的用户&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E4%B8%8D%E8%A6%81%E6%8B%BF%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B0%BA%E5%AD%90%E5%8E%BB%E5%BA%A6%E9%87%8F%E5%88%AB%E4%BA%BA&quot;&gt;不要拿自己的尺子去度量别人&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E4%BF%9D%E6%8C%81%E5%AD%A6%E4%B9%A0%E3%80%81be-open-mind&quot;&gt;保持学习、be open-mind&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E6%83%B3%E6%B8%85%E6%A5%9A%EF%BC%8C%E5%86%8D%E4%B8%8B%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81&quot;&gt;想清楚，再下手写代码&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E6%95%AC%E7%95%8F%E7%94%A8%E6%88%B7&quot;&gt;敬畏用户&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E8%B7%A8%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C%E6%98%AF%E5%88%A9%E7%9B%8A%E4%BA%A4%E6%8D%A2&quot;&gt;跨团队合作是利益交换&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E7%94%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%BA%A4%E6%B5%81%EF%BC%8C%E4%BC%9A%E6%9C%89%E6%84%8F%E6%83%B3%E4%B8%8D%E5%88%B0%E7%9A%84%E6%94%B6%E8%8E%B7&quot;&gt;用别人的语言交流，会有意想不到的收获&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E7%90%86%E8%A7%A3%E5%89%8D%E4%BA%BA%E5%86%99%E7%9A%84%E3%80%8C%E7%83%82%E4%BB%A3%E7%A0%81%E3%80%8D&quot;&gt;理解前人写的「烂代码」&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/things-i-learnt-after-6-years-as-software-engineer/#%E5%9C%A8%E6%8A%80%E6%9C%AF%E5%92%8C%E5%B7%A5%E4%BD%9C%E4%B9%8B%E9%97%B4%E6%89%BE%E5%88%B0%E5%B9%B3%E8%A1%A1%E7%82%B9&quot;&gt;在技术和工作之间找到平衡点&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/nav&gt;&lt;h2 id=&quot;%E4%BF%9D%E6%8C%81%E4%B8%80%E9%A2%97%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98%E7%9A%84%E5%BF%83&quot; tabindex=&quot;-1&quot;&gt;保持一颗解决问题的心&lt;/h2&gt;
&lt;p&gt;按照我的观察，那些在工作中用技术取胜的人们共同点都在于他们能保持一颗解决问题的心。他们可以率先想到一种更优的手段解决存在的问题(一般是效率问题)。他们不是嗅觉特别灵敏或者技术特别强，而是当他们遇到了问题，不是把它作为抱怨的话题，而是开始思考这个问题为什么没人解决、应该怎么解决，然后把它实现出来。这种心态在职场上特别稀缺。&lt;/p&gt;
&lt;p&gt;我在创业公司的时候做一个图文排版的 App, 设计师会设计一些模板，然后交给我来实现。当时我们有很多模板，为了测试这些模板实现在不同的手机屏幕大小会有什么问题，我们要花特别多的精力。可以想象测试的数量 = 模板数量 * 屏幕尺寸的数量。后来我用 puppeteer 写了个自动生成不同屏幕和模板的截图，直接交给设计师一个一个地看。节省了大量的时间。这个事情没什么技术含量，但它解决了很重要的问题。&lt;/p&gt;
&lt;p&gt;工作中需要解决的问题不仅仅在代码上，也有可能出现在非技术问题上。工作中我特别喜欢和非技术同事聊天，了解他们的工作。因为我常常觉得影响项目前进的原因不一定出在我们用了不适合的技术或者不够「先进」的技术。了解非技术同事的工作流程让我大有收获，我会发现他们有一些工作是可以通过写一段程序把原本的工作量做到指数级的下降，而通常非技术同事是很难察觉到的。&lt;/p&gt;
&lt;p&gt;这样的例子特别多。有次我和一个运营同事聊天，我们当时在开发一个新闻内容的管理后台，他们常常用这个后台捞一些内容做分析。聊天的时候了解到他们有一部份的工作就是在上面按条件查询一些内容，再一条条地粘贴到 excel 里面，他说这常常要花一下午。后来我帮她做了一个一键导出成 excel 的功能。&lt;/p&gt;
&lt;p&gt;她觉得这很不可思议，但这在技术的角度来说太简单了。我也因此了解到，对于不是做技术的人来说，他们很难察觉到哪一些事情是可以用技术解决的，所以我们不能希望他们主动地提出一个需求，只能我们作为掌握技术的人主动地去了解他们。&lt;/p&gt;
&lt;p&gt;又一次我和我们的测试吃饭，聊到他们怎么做测试。我发现他们会用 mindmap 先梳理出来一些测试流程，然后一个个地做。但是痛点在于他们常常要手动维护一个文档列出这些 case 的测试结果，这些结果包括截屏，以及证明测试通过的请求返回信息等等。不但麻烦，还很难追踪。&lt;/p&gt;
&lt;p&gt;于是我做了一个小 demo Web App，他们可以直接上传他们做好的 Mindmap, 通过他们的 mindmap 直接生成出来 case item，在项目的开发环境页面代码里面，只要注入这个 case id，就可以在测试之前开始记录请求日志，结束之后会上传到这个平台，这样在这个平台就能直接看到每一个 case 操作的时候的整个过程的记录。这个小 demo 后来被用于花呗的大部份前端项目，当然听说现在已经做得和我当时做的小 demo 完全不同了。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BA%86%E8%A7%A3%E4%BD%A0%E7%9A%84%E7%94%A8%E6%88%B7&quot; tabindex=&quot;-1&quot;&gt;了解你的用户&lt;/h2&gt;
&lt;p&gt;我自认为自己还算是一个有那么一些产品思维的程序员，因为经常也会写一些自己的小产品。但在刚出来工作的时候，我在工作中太沉迷于技术本身。把心思都放在了诸如怎么重构，怎么改进构建速度之类的问题。我在阿里 P5 升 P6 的答辩中，我被问了一个我至今印象深刻的问题：你有了解你的用户是怎么用你在做的这个东西吗？&lt;/p&gt;
&lt;p&gt;这个问题是我从来没有想过的，我哑口无言。可能它只是一个晋升答辩问题模板中的一个问题，但对我来说这个问题让我清醒了许多。当时我们做的是内部用的新闻内容管理后台，这个后台的用户是一些小编。我们和这些小编有一个群，但基本是用来报 bug 的。我离这些用户这么近，却从来没有了解过他们的使用感受。我想，如果我当时找他们聊一聊，可能也会有意想不到的收获。或许他们会报怨这个后台的加载速度很慢，我们就可以着手解决加载速度的问题，而不是和同事纠结在用哪种前端状态管理库这种无聊事情上。用户并不关心我们用的是 MobX 还是 Redux.&lt;/p&gt;
&lt;h2 id=&quot;%E4%B8%8D%E8%A6%81%E6%8B%BF%E8%87%AA%E5%B7%B1%E7%9A%84%E5%B0%BA%E5%AD%90%E5%8E%BB%E5%BA%A6%E9%87%8F%E5%88%AB%E4%BA%BA&quot; tabindex=&quot;-1&quot;&gt;不要拿自己的尺子去度量别人&lt;/h2&gt;
&lt;p&gt;我刚出来工作犯的最大的错误之一就是拿自己的尺子去度量别人。我因为从小对编程痴迷，写程序对我来说是人生中最大的兴趣，我把几乎所有的时间都花在了技术上。当时我天真地认为所有程序员都应该像我这样，对待技术也应该有一种理想主义，我在互联网上结交的技术朋友都是这样的。所以我当时对我的同事特别苛刻，甚至对那些把写程序只当成工作的人嗤之以鼻。后来回想起来，这是非常错误的想法。每个人有每个人的追求，技术也只是多个兴趣爱好的其中一种。在当时别人的眼里我可能是个「怪人」，甚至有点「装逼」。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BF%9D%E6%8C%81%E5%AD%A6%E4%B9%A0%E3%80%81be-open-mind&quot; tabindex=&quot;-1&quot;&gt;保持学习、be open-mind&lt;/h2&gt;
&lt;p&gt;我每天都会在 Twitter 和 Hackernews 发现很多最新的技术和技术思考，我关注了很多开源库的作者，我可以第一时间了解到他们最近在思考什么，在接触什么。这种主动接收会扩大你的眼界，让你在解决问题的时候有更广的思路。&lt;/p&gt;
&lt;p&gt;不要只关注自己的领域。我还关注了很多写 Rust, 写 Go, 写 iOS/Android 的人。学习主要是学习技术背后解决问题的方式，这些解决问题的方式说不准也能应用到你自己的领域。&lt;/p&gt;
&lt;p&gt;保持学习一直是和同行拉开差距最重要的一点。&lt;/p&gt;
&lt;h2 id=&quot;%E6%83%B3%E6%B8%85%E6%A5%9A%EF%BC%8C%E5%86%8D%E4%B8%8B%E6%89%8B%E5%86%99%E4%BB%A3%E7%A0%81&quot; tabindex=&quot;-1&quot;&gt;想清楚，再下手写代码&lt;/h2&gt;
&lt;p&gt;我写代码的速度非常快，因为我已经花了超过十年的时间在写代码了。很多东西想实现，对我来说基本是纯粹的堆代码。导致我非常容易不经过多的思考就开始动手写。我为此吃了不少亏，常常写到一半发现一些没有想到过的问题，导致需要重新设计，重新改写。我的一位前老板很了解我，他也是个多年经验的程序员了。有一次我们在讨论一个新东西，他对我说，「不要着急，想清楚了再写」。这句话我一直记在心里。后来每次动手写代码之前，我都会把整个流程的设计先思考清楚，避免了很多不必要的重写。&lt;/p&gt;
&lt;h2 id=&quot;%E6%95%AC%E7%95%8F%E7%94%A8%E6%88%B7&quot; tabindex=&quot;-1&quot;&gt;敬畏用户&lt;/h2&gt;
&lt;p&gt;在写自己的一些没什么人用的开源库或者公司内部用的平台的时候，通常不需要过多思考就能把代码发布出去。到了做花呗这种用户基数庞大的产品，才意识到代码发布和以前所体验到的完全不同。&lt;/p&gt;
&lt;p&gt;蚂蚁金服有代码发布的「三板斧」，这是从入职培训到实际工作中就会被反复提及的 must-follow rule. 「三板斧」指的是「可灰度」、「可监控」、「可回滚」。在代码发布之前，要先想想自己的代码是不是符合这三个条件。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你的代码发布之后，如果出了问题，是不是可以被监控到的？&lt;/li&gt;
&lt;li&gt;你的代码是不是可以灰度发布的，而不是一下子全量被推到线上的？&lt;/li&gt;
&lt;li&gt;代码发布以后，出了问题，是不是可以回滚的？如何回滚？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在经历了用户基数如此庞大的产品开发之后，我对代码发布变得尤为审慎。我记得有次只是单纯改了某段 HTML, 但我还是盯着这个 PR diff 看了几分钟，在想这个修改会不会导致什么问题。&lt;/p&gt;
&lt;p&gt;虽然蚂蚁的基础建设可以让这三板斧很容易实现(有成熟的发布平台进行灰度和回滚，有成熟的监控库)；虽然即使遵守了三板斧，还是会有 bug. 但是这种代码发布的思维模式是好的，即使我到了别的公司，我在代码发布前还是会问自己这三个问题。&lt;/p&gt;
&lt;h2 id=&quot;%E8%B7%A8%E5%9B%A2%E9%98%9F%E5%90%88%E4%BD%9C%E6%98%AF%E5%88%A9%E7%9B%8A%E4%BA%A4%E6%8D%A2&quot; tabindex=&quot;-1&quot;&gt;跨团队合作是利益交换&lt;/h2&gt;
&lt;p&gt;在大公司里，有时在做一个事情的时候，需要别的团队一起合作，或许是用到别的团队的接口、或许是需要别的团队开发新的接口，但这通常很难。我以前天真地以为，只要我们做的事情是有利于业务的，别的团队自然就应该一起合作。但实际上，大家更看中的是这个事情对自己的团队有什么好处。&lt;/p&gt;
&lt;p&gt;换位思考一下，我们和别的团队合作，对于他们来说，增加了工作量，增加了风险(带来更高的 qps, 写更多的代码会导致更多的维护成本)。决定是否合作，首先取决于这是否是自上而下的要求，其次就是合作对他们的 KPI 有没有好处。&lt;/p&gt;
&lt;p&gt;所以我学会了在游说别的团队合作的时候，首先应该想明白合作能给别人带来什么好处，而不是对事情本身夸夸其谈。这样更容易促成合作。&lt;/p&gt;
&lt;h2 id=&quot;%E7%94%A8%E5%88%AB%E4%BA%BA%E7%9A%84%E8%AF%AD%E8%A8%80%E4%BA%A4%E6%B5%81%EF%BC%8C%E4%BC%9A%E6%9C%89%E6%84%8F%E6%83%B3%E4%B8%8D%E5%88%B0%E7%9A%84%E6%94%B6%E8%8E%B7&quot; tabindex=&quot;-1&quot;&gt;用别人的语言交流，会有意想不到的收获&lt;/h2&gt;
&lt;p&gt;有研究发现如果你用别人的母语和他交流，他会更容易接受你的观点，对你也会更友好。我发现这个心理同样适用在技术交流中。作为一个前端程序员，在和后端程序员商量技术方案的时候，如果可以更多地使用后端的术语，从后端的角度反推前端的想法，他会更容易接受。&lt;/p&gt;
&lt;p&gt;我自己业余是个 full stack 程序员，所以很容易切换到别人的语境，也能从别人的角度去理解他的想法。因此沟通会更加顺畅。&lt;/p&gt;
&lt;h2 id=&quot;%E7%90%86%E8%A7%A3%E5%89%8D%E4%BA%BA%E5%86%99%E7%9A%84%E3%80%8C%E7%83%82%E4%BB%A3%E7%A0%81%E3%80%8D&quot; tabindex=&quot;-1&quot;&gt;理解前人写的「烂代码」&lt;/h2&gt;
&lt;p&gt;这里的「理解」不是指理解烂代码的逻辑，而是理解为什么会写成烂代码。我经常会听到同事报怨他看到的旧代码写得如何烂，但是实际上很多烂代码产生的原因不是因为技术不行，而是受限于技术的发展和业务的复杂性。随着自己写的代码越来越多，就越能理解这些「烂代码」的存在。看出来了烂代码，也不要着急去重构，这些代码很有可能藏着一些你不知道的特殊业务需求。如果你不需要碰这些代码，那就尽量别碰。&lt;/p&gt;
&lt;h2 id=&quot;%E5%9C%A8%E6%8A%80%E6%9C%AF%E5%92%8C%E5%B7%A5%E4%BD%9C%E4%B9%8B%E9%97%B4%E6%89%BE%E5%88%B0%E5%B9%B3%E8%A1%A1%E7%82%B9&quot; tabindex=&quot;-1&quot;&gt;在技术和工作之间找到平衡点&lt;/h2&gt;
&lt;p&gt;在刚出来工作的前几年，我特别陶醉在把自己学到的新东西试图用在工作中。我的想法是，只有我把这个技术用到实际的工作中，我才算学习了这个技术。&lt;/p&gt;
&lt;p&gt;其实这个想法是不对的，学习技术并不一定要求你把他用到工作中。工作就是工作，学习就是学习。工作的内容是为了业务服务的。我在创业公司工作的时候，曾经因为把一个我刚学习到的库用在业务中，因为一些我不知道的坑导致业务进度出了点问题。老板生气地说：业务不是你的试验田。&lt;/p&gt;
&lt;p&gt;我后来遇到很多「后辈」(我竟然也开始有后辈了) 请教我说觉得自己在工作中不能运用到自己平时学习的技术，因此觉得自己技术没什么长进。我认为这种想法不太正确。&lt;/p&gt;
&lt;p&gt;能把学习到的技术运用到自己的工作中当然是最好的，但这是可遇不可求的事。但是这不代表没有用在工作中，就等于没有真正学习到这个技术。我认为很多人对技术学习有错误的理解，对我来说，学习技术的精髓在于理解这个技术的 Why, What, How. 和能不能用到工作中没有太大的关系。&lt;/p&gt;
&lt;p&gt;举个例子，我在刚接触到 Redux 的时候，我去学习它，除了了解它怎么用以外，我特别关心的是，Redux 的哲学是什么？是什么启发了 Redux 的作者创造了 Redux? 他和别的库有什么不同？顺着这些问题，我就会了解更多的东西，比如我发现 Redux 是受了 Elm 的启发，我就会去了解 Elm -&amp;gt; 了解 Functional Programming -&amp;gt; 了解 Immutable, 然后关注 Dan (Redux 的作者) 的 Twitter, 看他日常会分享什么，看他对自己做的这个东西的理解是什么。即使我没有把 Redux 用在工作中(事实上我从来没有用过 Redux)，但我在学习这个库的时候，我学习到的不仅仅是 Redux 本身，还有它背后的更多东西。我可能很快就会忘掉 Redux 的 API, 但那又如何，那些它背后的知识才是最有价值的，是不会被忘掉的。&lt;/p&gt;
&lt;p&gt;而工作则相当于是一个真实的场景，是在你学习新的技术的时候，帮助你进行实际思考的场景。你需要有意识地去想，这个技术如果用到我的工作中，它是否适合？它能解决什么问题？它为什么适合？它为什么不适合。当你在学习新技术的时候，结合这个技术，多思考这些问题，这才是真正的学习。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>每个人都能用点正则表达式</title>
    <link href="https://lutaonan.com/blog/everyone-can-use-regexp/"/>
    <updated>2022-09-19T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/everyone-can-use-regexp/</id>
    <content type="html">&lt;p&gt;有一个关于正则表达式的笑话是这么说的：我们遇到了一个问题，用正则表达式解决了，现在变成了两个问题。&lt;/p&gt;
&lt;p&gt;这个笑话说明了正则表达式的复杂，有时还难以维护。如果我们刚接触一个现有的项目，里面出现了正则表达式，我们的第一反应肯定是头疼。因为正则表达式不易读，通常要读好几遍才能稍微弄懂他的意图。&lt;/p&gt;
&lt;p&gt;包括我也一样，在很长一段时间里，我对正则表达式的态度是能不用就不用。直到几年前我读完了《精通正则表达式》这本书，我对正则表达式的态度发生了巨大的变化。&lt;/p&gt;
&lt;p&gt;这本书的第一章的第一节名字是「解决实际问题」，我在这第一节就领略到了正则表达式的魅力。也让我意识到，&lt;strong&gt;你不一定需要正则表达式，但你必需掌握正则表达式的基础，克服对它的恐惧，把它转化成你的工具之一。&lt;/strong&gt; 在以后，当你又遇到一个问题，你就会意识到正则表达式是其中的一种优雅的解法。当你把正则表达式作为自己的一种工具后，你会发现一些以前你认为需要写一段程序去解决的问题，其实只需要一行正则表达式就能解决。&lt;/p&gt;
&lt;p&gt;例如，我通常想要把一个 JSON 文件转换成一个 JavaScript 对象，我想要把 JSON 里的 key 的双引号去掉。以前我可能会先 Google 一下 &amp;quot;JSON to JavaScript object&amp;quot; 看看有没有现成的工具，而现在我首先就会想到，这个问题用正则表达式配合编辑器自带的替换功能就能解决。&lt;/p&gt;
&lt;p&gt;假设这是我们想要转换的 JSON:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Randy&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;children&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Sandy&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Mandy&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我的思路会是：首先我要匹配出所有的 key, 而 key 的特征是以双引号开头，以双引号结尾，后面一定会带上一个冒号，所以我可以用这样一句正则把所有的 key 找出来：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;.+&amp;quot;:
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这里的 &lt;code&gt;.&lt;/code&gt; 表示任意字符，&lt;code&gt;+&lt;/code&gt; 则表示匹配一个或多个。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正则表达式其中一个强大的特性是可以把某一个匹配用括号包起来，让它变成一个 group, 这些 group 会以数字编号，从 1 开始。这样我们可以在匹配后，用 &lt;code&gt;$1&lt;/code&gt; 这样的形式把匹配到的 group 的值拿出来再处理。在这个例子中，我们用 VS Code 的替换功能，把 key 匹配出来，然后把它放在一个 group 里，在替换的时候，再用 &lt;code&gt;$1&lt;/code&gt; 得到 key 的值，用作替换：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;(.+)&amp;quot;:
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/K5GycU.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;还有很多例子，读者可以举一反三。这篇文章的目的不是教大家正则表达式的用法，而是让大家能意识到，正则表达式是一个很实用的工具，不一定要在项目中用到，在日常的一些文本处理任务中，它能发挥出你意想不到的作用。而正则表达式的基本用法不难记，多用几次就会烂熟于心。当然更高级的用法，也是需要多翻手册的。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>读《九宫格写作法》</title>
    <link href="https://lutaonan.com/blog/read-grid-writing-method/"/>
    <updated>2022-08-20T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/read-grid-writing-method/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/wlbeqS.jpg?x-oss-process=style/80&quot; alt=&quot;九宫格写作法封面&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/nishuang&quot;&gt;倪爽&lt;/a&gt; 在 &lt;a href=&quot;https://twitter.com/nishuang/status/1559764173449400321&quot;&gt;Twitter&lt;/a&gt; 推荐了这本书，对于喜欢写作的我来说很吸引，花了很短时间就把这本书读完了。在这里推荐给大家。这本书主要给认为写不出来文章的人提供一些指南，书的前半部分是方法论，后半部分是写作套路(或者说写作框架)。&lt;/p&gt;
&lt;p&gt;九宫格指的是在写作之前，从文章的中心，可以扩散出 8 个方格，填写和这个中心有关的信息，型成一个写作九宫格。九宫格的作用是在写作前迫使你先对文章中心进行思考、提出问题，然后进行填充。是一种帮助你在写作前收集信息的辅助手段。&lt;/p&gt;
&lt;p&gt;所以通俗地讲，九宫格写作法的核心在于训练你在写作前的信息收集习惯。书中有一个比较确切的例子：如果你准备一场旅行，打算旅行过后写一篇游记。你就应该在旅行之前就画好一个九宫格，填上这篇游记你想要写所有的要点：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/kDgjor.jpg?x-oss-process=style/80&quot; alt=&quot;写作九宫格&quot; /&gt;&lt;/p&gt;
&lt;p&gt;然后在你旅行的时候，才有目标进行相关信息的采集，然后填充到九宫格里面，这样当旅行结束，你已经收集到了足够的信息，把它们整理成为一篇完整的游记。而不是到了当地漫无目的地游玩，然后回来只能追溯一下往事，已经忘了可以写一些什么，最终写出来的只不过是一些浅显的感受。&lt;/p&gt;
&lt;p&gt;九宫格写作法实际上并不要求你只能有九个格子，你可以任意地扩张。所以这个写作方法，中心的思想就是：在写作之前，列出你对于这个写作主题的所有想要讨论的问题，然后再动笔。在列出九宫格的同时，整个文章的结构就自然而然地形成了。&lt;/p&gt;
&lt;p&gt;九宫格写作法突出了写作前信息收集对于轻松写出一篇有价值的长文的重要性，这也是为什么作为一个有意向写作的人来说，平时做笔记那么重要。只有平时在信息输入的时候有意识地把价值输入作为笔记存到你的第二大脑（笔记工具）里，将来才可以基于平时的笔记轻松地写出一篇文章。这个过程也叫作「信息内化」。九宫格写作法辅助了你的「信息内化」能力。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这就是创作过程的核心: 在你选择你要写的东西之前，你必须下功夫研究并积累。理想情况下，你应该在创作开始之前就开始研究，这样一旦你决定了一个话题，你就有数周、数月甚至数年的丰富资料可以利用。这就是为什么你要把信息放在「第二大脑」如此重要的原因。&lt;/p&gt;
&lt;p&gt;—— &lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzkyNjM1ODA2MA==&amp;amp;mid=2247484377&amp;amp;idx=1&amp;amp;sn=9a8a98ff7a3a14ae161ad022b23c85a4&amp;amp;source=41#wechat_redirect&quot;&gt;真正的思考技术&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我以前也常常觉得很难下笔，就是因为平时即使输入了很多信息，但没有把他们内化成自己的信息。陷入了「写作就是从一张白纸开始」的迷思。几年前机缘巧合下开始使用 Roam Research 并且读了 How to take smart note, 开始把平时摄取的有价值的输入记在了我的笔记工具里，通过双向链接，使我很容易在构思一篇文章的时候得到足够的素材。所以在读这本书的时候我很有共鸣，也对我的写作模式提供了一个更系统的方法论支持。&lt;/p&gt;
&lt;p&gt;书的后半部分基本是一些写作的套路(框架)，对我来说这部分意义不大。因为我从小就通过在学校的写作和平时写博客中得到了很多实践积累，对于写作的内容(例如哪些应该是文章重点、在文章中如何表达有价值的主观感受等等)我自己已经有了较多的体会。所以这部分我只进行了略读。对于缺少实践的读者来说，这部分也可以细读。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>遗憾最小化框架 —— 如何做决定</title>
    <link href="https://lutaonan.com/blog/regret-minimization-framework/"/>
    <updated>2022-05-01T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/regret-minimization-framework/</id>
    <content type="html">&lt;p&gt;对于我来说，我一直认为自己缺少做决策的能力。成年人的生活不像学生时代，所有的题目都有固定答案。所有的选择都不存在绝对的对和错，它只是在人的一生 checkout 了一个新的 branch. 我总是不知道应该如何做决定。&lt;/p&gt;
&lt;p&gt;刚好看到了 Jeff Bezos 曾经&lt;a href=&quot;https://www.youtube.com/watch?v=jwG_qR6XmDQ&quot;&gt;谈到了自己是如何做决定的&lt;/a&gt;，他称之为 Regret Minimization Framwork (遗憾最小化框架) —— 他会想象自己到了 80 岁的时候，是否会认为不做这件事情会让自己遗憾。尽量让人生的遗憾数量最小化。即使当时的选择后来看来是错误的，但也不会后悔尝试过。&lt;/p&gt;
&lt;p&gt;我很受启发。想起在 4 年前，我曾经问 Cycle.js 的作者 staltz 一个 &lt;a href=&quot;https://github.com/staltz/ama/issues/35&quot;&gt;问题&lt;/a&gt;, 我问他是否也会因为自己做的库没有像 React / Vue 那样火起来而感到气馁。他说他偶尔也会感到气馁，但他一直以来做事遵循一个 guideline:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Ask yourself: in 10 years from now, will you be proud of having done this? ... Do things that your future self will be proud, is my motto for the time being.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;记得在一年前决定是否接收微软的 offer 的时候我非常犹豫，因为微软给出的 offer 比其它国内「大厂」给的少非常多。但是我回想起初中的时候，读了很多关于比尔盖茨的传记、微软的创业故事，十分向往。那时候的我没有预料到我将来有一天竟然有机会加入这家公司。也不会想到作为一个大学没有毕业的人竟然也得到了这样的机会。我也咨询了很多朋友我是否应该接受这个机会，他们有的会说其实在微软写的代码甚至没有在国内的公司那么 fancy. 但是我想，在加入了微软之后即使在后来可能发现这未必能得到我想象中的东西，但如果在很多年后回想起来我曾经放弃了这个机会，我一定会后悔没有尝试体验一下在这家公司工作。所以最后我决定接受了这个 offer.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>再谈辍学</title>
    <link href="https://lutaonan.com/blog/talking-about-dropout-again/"/>
    <updated>2021-10-20T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/talking-about-dropout-again/</id>
    <content type="html">&lt;p&gt;我在退学的那一年写了一篇&lt;a href=&quot;https://lutaonan.com/blog/you-dont-need-to-drop-out/&quot;&gt;《你根本用不着退学》&lt;/a&gt;来告诫想退学的人慎重选择退学这种方式。今年是写完这篇博客的第五年，我想结合五年来作为一个辍学生遇到的经历，再谈谈退学。&lt;/p&gt;
&lt;p&gt;我第一次感受到辍学给我带来的副作用是刚辍学不久的时候，曾经给一些「大厂」投过简历，在 HR 筛选简历的一轮就被筛选掉了。我当时对进「大厂」的心理预期本来就很低，所以这对我来说根本影响不了我的心情，被筛选掉反而是正常结果。我很幸运，阿里的其中一个部门鬼使神差地给我了一个机会，我最终顺利通过了面试。&lt;/p&gt;
&lt;p&gt;我辍学后在别人眼里过得一帆风顺，是因为我受到了运气的眷顾。我很幸运，我出生在一个小康家庭，可以让我从小就能&lt;a href=&quot;https://lutaonan.com/blog/my-coding-road/&quot;&gt;接触&lt;/a&gt;到我往后一生都热爱的计算机和互联网；我很幸运，在辍学前遇到了李秉骏先生（他们现在在做&lt;a href=&quot;https://meshkit.cn/&quot;&gt;无人机空间数据应用平台&lt;/a&gt;），让我即使辍学了，还可以在一家创业公司尽情发挥自己的技术；我很幸运，阿里的 HR 对我的简历手下留情，也许只不过是当时的团队刚好非常缺人，我刚好投了简历，所以我通过了。但如果我说这只是单纯的幸运，那未免有点虚伪。我很清楚，即使我得到了这样的运气，我也需要有足够的实力和其它同样有运气的人比较胜出。所以这是运气和实力结合的结果，但没有运气，这一切都不会发生。&lt;/p&gt;
&lt;p&gt;打过德州扑克的都知道，没有人可以靠运气一直取胜。&lt;/p&gt;
&lt;p&gt;在这五年，我就是别人口中「幸存者偏差」的那个「幸存者」。但我从来没有因为我的辍学光环感到一点骄傲。相反，我在退学一年后遇到了严重的抑郁和焦虑症状而不得不求医。除了求医，我还天真地坚信只要我保持旺盛的精力去 &amp;quot;make something&amp;quot;, 去不断写代码，去不断地学习，我就能战胜我的情绪病。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/OX8DpQ.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;但很遗憾，情绪问题是个复杂的问题。我不能说辍学是我情绪病的来源，但它在其中参与了很大的比重。而且这种比重是随着时间的流逝线性增长的。在最严重的时候，我甚至完全无法沉下心做我这辈子最热爱的事 —— 写代码。说出来有点好笑，我甚至会因为在面试的时候分不清 JavaScript 里 class A extends class B 中，A.prototype 和 B.prototype 的关系而陷入严重的自我怀疑。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/W8ydFt.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是辍学给我带来最大的副作用。它让人把一切成功归因于运气，然后让人从不甘平庸变成不能平庸。&lt;/p&gt;
&lt;p&gt;辍学在「幸存者」身上是没用的光环，在不幸的人身上就是噩梦。我能在 V2EX 找到很多这样的例子：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.v2ex.com/t/808601&quot;&gt;https://www.v2ex.com/t/808601&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;18 年大学差 5 学分没修完，结业了。 做了两家创业公司，现在 2021 年 10 月份了，想跳槽。&lt;/p&gt;
&lt;p&gt;面试了华为、绿盟、建信金科，面试全部通过，全部因为学历拒发 offer 。 中间尝试联系 Boss 上专科要求的岗位，也拒绝了我。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.v2ex.com/t/700608&quot;&gt;https://www.v2ex.com/t/700608&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是技术在当前领域有一定优势。最近开始面试。卡在学历了&lt;/p&gt;
&lt;p&gt;在 BOSS/拉钩 /找内推 /猎头 基本上都过不了 HR，基本看到我简历上教育背景后，确认没有双证后直接表示可能不太行。&lt;/p&gt;
&lt;p&gt;更惨点的是面试都过了，两级直属领导当面明确表示希望我入职，然后被 HR 用规章制度否了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.v2ex.com/t/708542&quot;&gt;https://www.v2ex.com/t/708542&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据招聘网站透漏的信息，HR 筛选候选人的最常用选项的顺序是，学历、年龄、性别、工作年限 哦，忘了说，内推我也试过了，找朋友内推也被挂学历了，一种是他们有硬性要求，二个是能力也没有到无视学历的地步&lt;/p&gt;
&lt;p&gt;心里的无助真的很难受，加上心里不断的胡思乱想，真的是有偷偷哭过，甚至一度有人生从来的想法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在这之后的求职经历里，我有因为辍学遭遇到不公吗？我只能说，一个正常的面试官或者 HR, 是一定不会在面试的时候明显地表现出对我学历的顾虑的。但从交流之中就可以感受到，那些对我的学历和辍学经历的「好奇」，其中一定是掺杂着担忧的，至少这它一定不是一个加分项。&lt;/p&gt;
&lt;p&gt;程序员是少有可以靠技术发声的群体，也许靠所谓的实力可以在职场混得还不错，但人的一生除了工作，还有太多的事情不是靠技术就能解决那么单纯的。也许是政策上的，也许是流程上的，也许只是别人的偏见。这些都是需要有预期去承受的。你准备好了吗？&lt;/p&gt;
&lt;p&gt;就像我五年前写的一样，退学只是一种选择，没有人知道它是好的还是坏的。但它必定附带了很多随之而来的巨大的副作用。不是每一个人都有运气和实力和这些副作用抗衡。这个社会在一定程度上有少数派生存的空间，但社会的很多规则是设计给多数人的。抗衡需要勇气和付出比多数人多得多得多的心血。你准备好了吗？&lt;/p&gt;
&lt;p&gt;每个人在漫长的人生中都会面临很多不同选择是否成为那个少数派。可能是辍学，可能是性少数，可能是不婚，可能是丁克。衷心希望在作出了这样的选择之后的人，一定要努力成为那个别人口中的「幸存者」。之所以这么说，是因为这五年来，我见过身边太多有运气但不努力的人，也见过太多既很努力又有运气的人。这让我能感受到，「事在人为」和「何不食肉糜」之间并不能划上等号。用自己的力量去给偏见打一个沉重的巴掌吧。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>开着特斯拉从广州到苏州的小记</title>
    <link href="https://lutaonan.com/blog/trip-from-guangzhou-to-suzhou/"/>
    <updated>2021-07-20T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/trip-from-guangzhou-to-suzhou/</id>
    <content type="html">&lt;p&gt;由于工作变动的关系，我需要从广州搬到苏州。于是趁着这个机会体验了一下开纯电动车长途，是不是大家说的如此不堪。这次的旅途预料之外地非常顺利，在这里简单地记录一下过程和感受。&lt;/p&gt;
&lt;h2 id=&quot;%E8%A1%8C%E7%A8%8B%E5%AE%89%E6%8E%92&quot; tabindex=&quot;-1&quot;&gt;行程安排&lt;/h2&gt;
&lt;p&gt;广州到苏州的行驶距离大概是 1500 公里，理论上如果一直开，至少也需要十几个小时。研究了一下地图后，我把整个行程分成了 3 天：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一天：离开广东（广州）到达江西&lt;/li&gt;
&lt;li&gt;第二天：离开江西到达杭州&lt;/li&gt;
&lt;li&gt;第三天：离开杭州到达苏州&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实第二天有足够的时候直接到达苏州，但是想在杭州和老朋友叙叙旧，所以安排在杭州多逗留一晚，第二天再出发。这样安排非常合理，每天只需开 400-500 公里。&lt;/p&gt;
&lt;p&gt;接着需要规划充电的路线。我使用了「加电」这个 App, 可以查看行程沿途有哪些充电站，以及相隔的距离，这样可以根据自己的车的续航能力，提前安排好在什么地方开始充电。从 App 的显示来看，充电站的数量非常充足，我想应该不会出现太大的意外。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/DZxGYl.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E8%A1%8C%E7%A8%8B%E4%B8%AD&quot; tabindex=&quot;-1&quot;&gt;行程中&lt;/h2&gt;
&lt;p&gt;出发那天天气非常好，蓝天白云，晴空万里。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/L9GSEf.jpg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;一直弄到傍晚，感受天色的变化。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/7XwvOP.JPG?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;第一天晚上到达了江西鹰潭，住了一晚，这是第二天酒店的窗外：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/VdCbfN.jpg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;进入浙江后，天气变得糟糕：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/qEzIAW.jpg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/ayYXFU.jpg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%85%E7%94%B5&quot; tabindex=&quot;-1&quot;&gt;充电&lt;/h3&gt;
&lt;p&gt;出发后，我打算在续航还剩 100 公里时开始进入最近的充电站。虽然我提前规划了大概会去哪个充电站，但我发现在用「百度地图」导航的时候，会在下一个服务站的提示牌上显示这个服务区有没有充电桩，非常方便。&lt;/p&gt;
&lt;p&gt;整个行程下来，&lt;strong&gt;我发现基本每一个高速服务区都有国家电网的充电桩，所以在高速上基本只要是能加油的地方，基本都能充电&lt;/strong&gt;。所以在后来我已经不再提前找下一站的充电站，在需要充电的时候直接进下一个服务区即可。并且充电速度的中位数是 60kw. 我的车满电续航是 510+ 公里，我一般只剩 100 公里的时候开始充电，充到大概 500 的时候就继续出发，充电时间在半小时左右。恰好我一般是在饭点的时间到达服务区，所以正好在服务区吃点东西后，就刚好充好电可以出发了。&lt;/p&gt;
&lt;p&gt;在服务区充电的电动车非常少，没有遇到过要排队的情况。只在一个服务区出现了坏桩的情况，不过好在只坏了四个中的一个。所以我在出发前对充电的担忧是多余的。&lt;/p&gt;
&lt;p&gt;进入到浙江后，国家电网的覆盖就变得很少了，两个有国家电网的服务区相隔差不多两百公里。不过在这之间的服务区有「小桔充电」。&lt;/p&gt;
&lt;h3 id=&quot;%E8%BE%85%E5%8A%A9%E9%A9%BE%E9%A9%B6&quot; tabindex=&quot;-1&quot;&gt;辅助驾驶&lt;/h3&gt;
&lt;p&gt;这段旅途一路上都是在高速路上往北开，我基本上都是开着 Autopilot, 在车上要做的只是看着路面，握好方向盘。所以这三天的路程并没有因为开车觉得累，不过是太无聊了。体感就像坐了三天的车，但是什么都不能干。我特意在途中尝试了不用 Autopilot, 自己开了一个多小时，最大的感受是：人类长时间开高速真是个危险的事情 😆。&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%85%E7%94%B5%E8%B4%B9%E7%94%A8&quot; tabindex=&quot;-1&quot;&gt;充电费用&lt;/h2&gt;
&lt;p&gt;整个行程一共充了五次电，总共花了 300 元左右。国家电网的电费大概是 1.3元/度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你也准备购买特斯拉，可以使用我的推荐码：&lt;a href=&quot;https://lutaonan.com/go/tesla&quot;&gt;https://lutaonan.com/go/tesla&lt;/a&gt; 我们都能获得 1500 公里免费超充。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>Next.js 应用开发实践</title>
    <link href="https://lutaonan.com/blog/the-book-nextjs-in-action/"/>
    <updated>2021-06-16T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/the-book-nextjs-in-action/</id>
    <content type="html">&lt;p&gt;最近写了一本篇幅很小的书，总结了这段时间写 Next.js 应用的一些「最佳实践」，相信你可以在一个多小时的阅读中得到非常大的启发。&lt;/p&gt;
&lt;p&gt;欢迎阅读和购买：&lt;a href=&quot;https://nextjs-in-action-cn.taonan.lu/&quot;&gt;https://nextjs-in-action-cn.taonan.lu/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我给自己设立了每月 $20 的开源捐赠预算</title>
    <link href="https://lutaonan.com/blog/my-oss-donation-budget/"/>
    <updated>2021-05-12T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/my-oss-donation-budget/</id>
    <content type="html">&lt;p&gt;Babel 官方最近&lt;a href=&quot;https://babeljs.io/blog/2021/05/10/funding-update&quot;&gt;发布了一篇博客&lt;/a&gt; 称 Babel 团队的 funding 已经不够了。一直以来我零碎地捐赠过一些开源项目和个人，在卖贴纸和 T 恤的时候也把大部分的利润捐赠给了 Vue. Babel 这件事让我有了固定每月捐赠一些开源项目的想法。&lt;/p&gt;
&lt;p&gt;目前设定的是每月&lt;strong&gt;至少&lt;/strong&gt; $20 (约 130 多元人民币) 的预算，这样平均至少可以捐赠 4 个不同的项目。我可以在这个预算内根据我的技术栈灵活地选择我对哪些项目进行捐赠。&lt;/p&gt;
&lt;p&gt;我个人会选择一些这样的项目进行捐赠：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我在做 side-project 的时候经常会用的项目&lt;/li&gt;
&lt;li&gt;项目没有融资背景（例如我非常喜欢 &lt;a href=&quot;https://prisma.io/&quot;&gt;Prisma&lt;/a&gt;, 可是它已经有了 $12M 的 A 轮融资）&lt;/li&gt;
&lt;li&gt;做了一些我用到的工具的个人开发者&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前我捐赠的项目和个人&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/sponsors/egoist&quot;&gt;EGOIST&lt;/a&gt; 在全职做开源的好朋友&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opencollective.com/chakra-ui&quot;&gt;chakra-ui&lt;/a&gt; 我用 React 写 side-project 必用的 UI component 库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opencollective.com/dayjs&quot;&gt;dayjs&lt;/a&gt; 我经常会用的 moment.js alternative&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/tannerlinsley/react-query&quot;&gt;react-query&lt;/a&gt; 我经常会用的 React 请求库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://next-auth.js.org/&quot;&gt;next-auth&lt;/a&gt; 非常好用的 Next.js OAuth 库&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://opencollective.com/logseq&quot;&gt;Logseq&lt;/a&gt; 开源的 Roam Research alternative&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;你可以在 &lt;a href=&quot;https://opencollective.com/randyloop&quot;&gt;OpenCollective&lt;/a&gt; 和 &lt;a href=&quot;https://github.com/djyde?tab=sponsoring&quot;&gt;GitHub Sponsor&lt;/a&gt; 看到我对哪些项目和个人进行了捐赠。&lt;/p&gt;
&lt;h2 id=&quot;%E5%9B%BD%E5%86%85%E7%94%A8%E6%88%B7%E6%8D%90%E8%B5%A0%E7%9A%84%E6%96%B9%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;国内用户捐赠的方法&lt;/h2&gt;
&lt;p&gt;国内用户捐赠只要具有以下其中一个条件即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册 Paypal 账号和国内银行卡绑定&lt;/li&gt;
&lt;li&gt;持有一张 Visa 信用卡&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenCollective 支持 Paypal 和信用卡，甚至支持银联的信用卡，因此一般国内用户都能很容易通过 OpenCollective 进行捐赠。GitHub sponsor 不支持 Paypal, 需要 Visa.&lt;/p&gt;
&lt;p&gt;除了每月固定的捐助，还可以选择一次性的捐助。&lt;/p&gt;
&lt;h2 id=&quot;%E6%88%91%E5%AF%B9%E5%BC%80%E6%BA%90%E7%9A%84%E7%9C%8B%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;我对开源的看法&lt;/h2&gt;
&lt;p&gt;我从开放的源代码学到了非常宝贵的知识，这些知识帮助我成为了更好的程序员。功利一些来说，我通过使用这些开源项目得到了可以谋生的岗位，这些开源项目竟然是开放和免费的。&lt;/p&gt;
&lt;p&gt;有些人认为，做了一个成功开源项目，即使没有钱，也收获了名气。对我个人来说，我确实也通过做开源项目得到了非常多的机会，但是正是自己做过开源项目，才深知维护一个开源项目的成本不是靠「名气」就可以支撑起来的。&lt;/p&gt;
&lt;p&gt;关于这个话题，强烈建议收听牛油果烤面包的这一集 Podcast: &lt;a href=&quot;https://avocadotoast.live/episodes/70/&quot;&gt;《#70. 和Vue.js的创造者尤雨溪聊开源软件》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;也可以读一读这本 &lt;a href=&quot;https://www.amazon.com/dp/B08BDGXVK9&quot;&gt;Working in Public: The Making and Maintenance of Open Source Software&lt;/a&gt;, 里面有很多开源软件维护者面临的问题。&lt;/p&gt;
&lt;h2 id=&quot;%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E4%B8%BA%E5%BC%80%E6%BA%90%E5%81%9A%E4%BB%80%E4%B9%88%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;我们可以为开源做什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;根据自己的经济情况，设立一个捐赠预算（$1 也很不错），给自己生活中、工作中用到的开源工具进行捐赠。&lt;/li&gt;
&lt;li&gt;和我一样写一篇文章介绍你对哪些项目进行了捐赠，鼓励更多的开发者对开源项目捐赠。&lt;/li&gt;
&lt;li&gt;贡献有意义的 PR，即使只是文案的修改。&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Svelte 的异步更新实现原理</title>
    <link href="https://lutaonan.com/blog/how-svelte-set-state-works/"/>
    <updated>2021-04-11T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/how-svelte-set-state-works/</id>
    <content type="html">&lt;p&gt;在 &lt;a href=&quot;https://lutaonan.com/blog/svelte&quot;&gt;我对 Svelte 的看法&lt;/a&gt; 一文里，我分析了 Svelte 在编译时实现 Reactive 的原理。在这篇文章，我将分析在 Svelte 里更新一个状态 (state) 值后更新到 UI 的这一过程。&lt;/p&gt;
&lt;p&gt;阅读本文前，你应该至少：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;读过 &lt;a href=&quot;https://lutaonan.com/blog/svelte&quot;&gt;我对 Svelte 的看法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;明白 JavaScript 中的 &lt;a href=&quot;https://javascript.info/event-loop&quot;&gt;事件循环&lt;/a&gt; 机制&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90&quot; tabindex=&quot;-1&quot;&gt;原理分析&lt;/h2&gt;
&lt;p&gt;为了保持简单，先从一个和 Svelte 无关的例子讲起：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 假设我们正在实现一个 counter, 只有一个 state，就是 count, 它是一个 number:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 我们可以实现一个 setCount, 来改变 count 的值，顺便执行更新 UI:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newVal&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;update ui with count:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; update ui with count: 1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; update ui with count: 2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; update ui with count: 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样实现很简单，但是有一个严重的问题：连续的状态更新会连续触发 &lt;code&gt;updateUI&lt;/code&gt;, 性能会非常糟糕。解决这个问题的方法是：&lt;strong&gt;把同一个事件循环里的所有状态更新造成的 UI 更新统一合并（batch）到一个 microtask 里统一执行。&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 基于 Promise 实现一个把函数放到 microtask 里的函数&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createMicroTask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resovle&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fn&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; updateScheduled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;scheduleUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;updateScheduled&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 当首次 schedule 时，把 updateUI 放到 microtask 中&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;createMicroTask&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;updateUI&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    updateScheduled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  updateScheduled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;update ui with count:&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 在 setCount 时，不再直接触发 updateUI, 而是 schedule 一个 update&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newVal&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newVal&lt;br /&gt;	&lt;span class=&quot;token function&quot;&gt;scheduleUpdate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//=&gt; update ui with count: 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，在同一个事件循环里，多个状态更新只会触发一次 UI 更新。&lt;/p&gt;
&lt;p&gt;现在假设页面上有一个 &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;updateUI&lt;/code&gt; 中会更新它：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; h1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;h1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;updateUI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  updateScheduled &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;br /&gt;	h1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//=&gt; update ui with count: 3 &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far so good. 但是相信不少人年轻的时候曾经写过这样的代码：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;h1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;setCount(3)&lt;/code&gt; 后， &lt;code&gt;h1.innerHTML&lt;/code&gt; 竟不是预期中的 3. 仔细一想，当然了，&lt;code&gt;updateUI&lt;/code&gt; 是在同步代码执行完后，开始执行 microtask 队列的时候才触发的啊。&lt;/p&gt;
&lt;p&gt;为了可以在 &lt;code&gt;setCount&lt;/code&gt; 后拿到更新后正确的值，我们可以把关于 UI 的操作也放到下一个 microtask 才执行。为了方便，我们可以写一个 &lt;code&gt;tick&lt;/code&gt; 函数：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;tick&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;h1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTML&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 3&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;svelte-%E7%9A%84%E5%AE%9E%E9%99%85%E5%81%9A%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;Svelte 的实际做法&lt;/h2&gt;
&lt;p&gt;回到 Svelte:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{count}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &amp;lt;button on:click={() =&gt; count++}&gt;+&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &amp;lt;button on:click={() =&gt; count--}&gt;-&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个组件会被编译成一个 fragment （你不需要读懂下面的代码）:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create_fragment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; div&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; span&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; button0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; t3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; button1&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; mounted&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; dispose&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			span &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;span&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			t0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*count*/&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			t1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			button0 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			button0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;+&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			t3 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;space&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			button1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			button1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; anchor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;target&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; div&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; anchor&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; span&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;span&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; button0&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; t3&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; button1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;mounted&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;				dispose &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;					&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/*click_handler*/&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;					&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;click&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/*click_handler_1*/&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;				&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;				mounted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;dirty&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dirty &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/*count*/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;set_data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;t0&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/*count*/&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token literal-property property&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; noop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token literal-property property&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; noop&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;detaching&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;detaching&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;detach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			mounted &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;			&lt;span class=&quot;token function&quot;&gt;run_all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dispose&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;$$self&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $$props&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $$invalidate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;click_handler&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$$invalidate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;click_handler_1&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$$invalidate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; click_handler&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; click_handler_1&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不要被吓到，一个 Svelte Fragment 实际上是一个函数返回几个必要的方法：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;createFragment&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 创建 DOM 的方法&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// 把 DOM mount 到节点的方法，以及事件绑定&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// DOM 节点更新的方法&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token comment&quot;&gt;// unmount 的方法&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里的 &lt;code&gt;p()&lt;/code&gt;, 就是类似上文提到的 &lt;code&gt;updateUI&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;而 &lt;code&gt;instance&lt;/code&gt; 则是 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 之中定义的变量和一些 event handlers. &lt;code&gt;$$invalidate(0, count--, count)&lt;/code&gt; 类似上文提到的 &lt;code&gt;setCount&lt;/code&gt;. 在真实的 Svelte 中整个状态更新的流程简单地来说就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户点击 button, 触发 &lt;code&gt;$$invalidate(0, count--, count)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;触发 &lt;code&gt;schedule_update()&lt;/code&gt;, 通知框架这个 fragment 需要被更新（&lt;code&gt;make_dirty()&lt;/code&gt;），框架会维护一个 &lt;code&gt;dirty_components&lt;/code&gt; 的数组&lt;/li&gt;
&lt;li&gt;同步代码执行完后，开始执行 microtask, 触发更新（&lt;code&gt;flush&lt;/code&gt;），遍历 &lt;code&gt;dirty_components&lt;/code&gt;, 触发每一个 component 的 &lt;code&gt;p()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
  </entry>
  
  <entry>
    <title>读《蒂姆·库克传》</title>
    <link href="https://lutaonan.com/blog/reading-tim-cook/"/>
    <updated>2021-03-14T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/reading-tim-cook/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/wd1YKt.jpg?x-oss-process=style/80&quot; alt=&quot;书封面&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://lutaonan.com/go/shop/tim-cook&quot;&gt;购买链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我对 Apple 的钦佩除了是因为产品本身的设计和体验，还有 Apple 作为商业巨头，对个人隐私、环保、无障碍等等这些「人文关怀」有着并非门面功夫的执着。&lt;strong&gt;读这本书之前我没有想到这些执着其实大部分来自于 Tim Cook&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2014年5月，美国国家公共政策研究中心保守派智囊团的一名成员逼迫库克衡量可持续发展项目会给苹果带来的利益损失，库克拒绝了，他说：“当我们付出努力，为了让盲人也可以使用我们的设备时，我是不会考虑该死的ROI（投资回报率）的。苹果在发起环保倡议、保护员工安全和其他政策时也是如此。“如果你让我做事的时候，唯一关心的就是投资回报率，那我希望你马上抛出苹果的股票！”库克向这位保守投资者吼道。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;谈到慈善这件事，乔布斯是出了名的不感兴趣，他说他能做的最大的慈善，就是提升苹果的市值，这样股东们就会有更多的钱投入他们选择的事业里。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;《纽约时报》还发表了一份有关富士康工作条件的调查报告，这份报告后来还获得了普利策奖。一向性格谦和的库克对此大发雷霆，在跟员工们分享看法时，他表达出了与乔布斯迥然不同的态度——乔布斯曾被指责在此事上表现冷漠。在一封内部邮件中，库克说看到这份报告后很“气恼”，甚至“火冒三丈”。他开诚布公地写道：“我们的供应链遍及全球，我们关心其中的每一位员工。任何一起事故都令人深感不安，任何有关工作环境的问题都值得关注。任何认为我们对员工漠不关心的想法都完全错误，并且令人反感。你们是最了解真相的人，这种指责与我们的价值观相悖。苹果完全不是这样的。”库克再三强调苹果正在改善成千上万名工人的工作条件，他决心要纠正大众的误解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这本所谓的「传」实际上是作者把 Tim Cook 的公开言说和资料以及一些他身边的好友的回忆整理在一起，还原出了 Tim Cook 的人生和事业轨迹。相当于是加长版的 Tim Cook 维基百科页。&lt;/p&gt;
&lt;p&gt;从 Steve Jobs 重返 Apple 不久开始，Tim Cook 就已经在苹果发挥了很大的价值，解决了苹果在供应链上的问题，这对当时的 Apple 而言是很至关重要的。可是解决供应链问题不像做产品那么 cool, 作为局外人的消费者，很难看到 Tim Cook 的价值所在。「只有当供应链出现了问题的时候，人们才会发现供应链的问题」。从 Tim Cook 解决问题的方式可以看出来，他和 Steve Jobs 一样能做到 Think Different.&lt;/p&gt;
&lt;p&gt;书中还记录了很多 Tim Cook 关于人文关怀的事例。我猜测他的这些执着是来源于他从小遇见过的种族主义者，还有他本身作为社会中的少数派(同性恋)，让他把尊重多元社会视为己任。有趣的是他在读大学的时候还修过一门「道德课」：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;库克在杜克大学读书的时候，修了一门道德课，这门课对他日后产生了深远的影响。一名工程师学习道德课程，这并不常见，但是库克希望拓宽自己的视野，希望自己对工程学和商业有全球化的视角。在职业生涯的早期，库克就在思索，公司可以成为一股向善的力量以推动世界的改变。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://lutaonan.com/go/shop/tim-cook&quot;&gt;购买链接&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我对 Svelte 的看法</title>
    <link href="https://lutaonan.com/blog/svelte/"/>
    <updated>2021-03-09T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/svelte/</id>
    <content type="html">&lt;p&gt;我在很早前已经听说过 &lt;a href=&quot;https://svelte.dev/&quot;&gt;Svelte&lt;/a&gt;, 但是一直没有机会在新的项目真正地用上。最近在尝试模仿实现一个 &lt;a href=&quot;https://roamresearch.com/&quot;&gt;Roam Research&lt;/a&gt; 的编辑器，考虑到可能会有大量和 DOM 交互的逻辑，所以我趁这个机会选择了 Svelte, 目前这个编辑器的已经完成了大部分的功能，开源在 &lt;a href=&quot;https://github.com/djyde/plastic-editor&quot;&gt;https://github.com/djyde/plastic-editor&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;在开发的过程中我对 Svelte 非常满意，这篇文章打算就我的体验来说说我对 Svelte 的一些看法。&lt;/p&gt;
&lt;p&gt;你需要有使用过任意一个前端框架的经验才能读懂本文。这篇文章&lt;strong&gt;不是&lt;/strong&gt;一篇 Svelte 教程，如果你想学习 Svelte, 请浏览 &lt;a href=&quot;https://svelte.dev/tutorial/basics&quot;&gt;Svelte 的官方教程&lt;/a&gt;，&lt;strong&gt;本文试图通过告诉读者 Svelte 在编译阶段做了什么，来让只听说过 Svelte 的读者，从浅层的原理和设计的角度，了解到 Svelte 是一个怎么样的框架、她和其它框架的区别是什么&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;svelte-%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;Svelte 是什么？&lt;/h2&gt;
&lt;p&gt;简单来说 Svelte 是一个在编译时实现了 Reactivity (反应式) 的框架，所以它既是一个框架，同时也是一个 Compiler. 如何理解「编译时实现了 Reactivity」？先说说什么是 Reactivity.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 3&lt;/span&gt;&lt;br /&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 3, not 4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript 没有 Reactivity 的能力，所以即使 &lt;code&gt;let c = a + b&lt;/code&gt;, 在改变了 &lt;code&gt;a&lt;/code&gt; 或 &lt;code&gt;b&lt;/code&gt; 的值之后，&lt;code&gt;c&lt;/code&gt; 不会因此而改变。真正的 Reactive 与此相反。&lt;/p&gt;
&lt;p&gt;拿 Excel 举例，Excel 是天生 Reactive 的，一个 Excel 里面的单元格，可以编写简单的函数组合其它单元格的值，而组合的结果会随着依赖的单元格改变而自动改变。例如单元格 &lt;code&gt;C1&lt;/code&gt; 如果是  &lt;code&gt;=SUM(A1:B1)&lt;/code&gt; , 那么 &lt;code&gt;C1&lt;/code&gt; 值会随着 &lt;code&gt;A1&lt;/code&gt; 或 &lt;code&gt;B1&lt;/code&gt; 的值而重新计算和改变。&lt;/p&gt;
&lt;p&gt;如果你用过 Vue 或者 MobX, 你应该知道它们实现 Reactivity 的原理：它们使用了 &lt;code&gt;defineProperty&lt;/code&gt; 或者 &lt;code&gt;Proxy&lt;/code&gt;, 在 setter 这一层做了一些手脚，当对象的某个成员被赋值的时候，执行更新逻辑。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reactive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactive&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a was updated&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;reactive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;changed&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; a was updated&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是一种「运行时」的手段，它需要在运行时改变了赋值行为，所以在用 Vue 的时候，你必需把需要 Reactivity 的对象包在 &lt;code&gt;data&lt;/code&gt; 里，上文的例子用 Vue 需要这么写：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; yourData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 还有 computed&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reactive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;yourData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 3&lt;/span&gt;&lt;br /&gt;reactive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;reactive&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 4, not 3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是我们可以想一想，如果不用 &lt;code&gt;defineProperty&lt;/code&gt;, 可以实现类似的功能吗？&lt;/p&gt;
&lt;p&gt;当然可以：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 3&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 4&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;c&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//=&gt; 6&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们只要每次在赋值的时候，手动触发一个 &lt;code&gt;update&lt;/code&gt; 函数，那么 &lt;code&gt;c&lt;/code&gt; 的值就会重新计算，不就实现了 Reactivity 的效果吗？&lt;/p&gt;
&lt;p&gt;但是这样做未免太蠢，要写太多的代码，而且很容易漏掉。不过，我们可以借助 Compiler 帮我们做这些事！在编译时，每当遇到赋值语句，我们就让它在赋值语句的后面自动加一个调用 &lt;code&gt;update&lt;/code&gt; 方法的语句。&lt;/p&gt;
&lt;p&gt;这就是 Svelte 做的事情。当然实际上的实现要更加复杂一些（比如需要把更新放在同一个 microtask 里），但原理是一样的。&lt;/p&gt;
&lt;p&gt;Reactivity 是现代的前端框架的标配，因为从前 MVC 的开发模式对 UI 开发来说，要在 Controller 手动操作 DOM 这个步骤显得有点枯燥和多余，我们希望 UI 是自动随着数据的变化而自动更新的。因此&lt;strong&gt;不同的框架除了写法不尽相同外，最主要的区别还是在于框架在检测到数据更新后，如何处理 UI 的更新&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;以一个 Counter 为例，这是 React 的写法：&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setCount &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    	&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;count&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;	    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;      &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;token script language-javascript&quot;&gt;&lt;span class=&quot;token script-punctuation punctuation&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setCount&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;    &lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我在之前的文章已经谈过 React 的思想，在这里稍作重复。React 主张「视图」是「状态」的函数：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;UI &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; f&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;setState&lt;/code&gt; 的时候，这个函数会重新执行，因为是新的 &lt;code&gt;state&lt;/code&gt;, 因此 UI 是变化的。在 React 里，UI 是 Virtual DOM, 用算法对比两个 DOM 树，来算出哪个真实的 DOM 需要被更新。&lt;/p&gt;
&lt;p&gt;React 的实现非常「粗暴」，因为它是真的会重新执行这个函数，在上面的例子中，&lt;code&gt;Counter&lt;/code&gt; 会在每次状态变化的时候被重新执行。这使得写 React 组件要多留心性能问题，因为你要避免在函数内部进行不必要的计算：&lt;/p&gt;
&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;function Counter () {&lt;br /&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; const [ count, setCount ] = React.useState(0)&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; doSomethingHeavy()&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; &lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; return (&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   &amp;lt;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   	&amp;lt;div&gt;{count}&amp;lt;/div&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;	    &amp;lt;button onClick={_ =&gt; setCount(count + 1) }&gt;+&amp;lt;/button&gt;&lt;br /&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;     &amp;lt;button onClick={_ =&gt; setCount(count - 1) }&gt;-&amp;lt;/button&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   &amp;lt;/&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; )&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在「古典」React 里，你不得不写 shouldComponentUpdate, 在现代 React, 你同样需要引入 &lt;code&gt;useCallback&lt;/code&gt; 和  &lt;code&gt;useMemo&lt;/code&gt;，手动地缓存函数，来避免性能问题。&lt;/p&gt;
&lt;p&gt;同样是使用 Virtual DOM 的 Vue 却没有这个问题，因为 Vue 的机制（依赖收集）决定了它不必重新执行整个 UI 函数来换取新的 Virutal DOM 树，当某个状态更新的时候，它明确地知道应该 diff 哪些节点。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你是 Vue 用户，而不太清楚 React 的机制, 你可以把一个 React 组件函数想象成是一个 Vue 的 &lt;code&gt;computed&lt;/code&gt; 里的成员函数, 你一定知道在 &lt;code&gt;computed&lt;/code&gt; 的成员函数里做耗时计算的后果是什么。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;现代前端框架倾向于使用 Virtual DOM, 我认为主要出于两点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual DOM 可以 port 到任何除了 Web 以外的宿主环境。&lt;/li&gt;
&lt;li&gt;Virtual DOM diff 算法足够快，框架把 DOM diff 和 DOM 修改的工作交给了算法，可以把精力花在实现框架的其它功能上。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Virtual DOM 的本质就是找出需要被修改的真实 DOM 节点，难道不用 Virtual DOM 就不能实现吗？当然不是。回到上面的 Counter 的例子，我们如何用 Vanilla JS (原生 JavaScript) 来实现：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// state&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// view&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button1Text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;button1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button1Text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button2Text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;button2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button2Text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// event&lt;/span&gt;&lt;br /&gt;button1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  count &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;button2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  count &lt;span class=&quot;token operator&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的程序生成了 UI, 绑定了点击事件，改变了状态 &lt;code&gt;count&lt;/code&gt; 的值。但是显然 UI 是不会随之改变的，所以我们需要写一个 &lt;code&gt;update&lt;/code&gt; 函数，让状态在变化的时候，触发特定的 UI 更新逻辑：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; target &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// state&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// view&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; countText &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;countText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button1Text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;button1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button1Text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;button&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; button2Text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;button2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button2Text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;div&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;target&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;button2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// event&lt;/span&gt;&lt;br /&gt;button1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;count&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;button2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;click&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;count&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// update&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  state&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; value&lt;br /&gt;  countText&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nodeValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; state&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在点击按钮，&lt;code&gt;div&lt;/code&gt; 显示的 &lt;code&gt;count&lt;/code&gt; 就会变化了，因为我们在 &lt;code&gt;update&lt;/code&gt; 函数指明了 UI 更新的逻辑。&lt;/p&gt;
&lt;p&gt;我敢保证上面的程序性能一定比 React 版本的更好（当然在这个例子可能只相差 0.0000002ms），因为 DOM diff 再快还是要算，原生 JavaScript 是不需要算的。&lt;/p&gt;
&lt;p&gt;但没人愿意这样写程序：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这样的代码完全丧失了可读性，无法一眼看出 UI 树的结构。&lt;/li&gt;
&lt;li&gt;UI 只要一调整，就需要写大量的代码。&lt;/li&gt;
&lt;li&gt;每当有元素依赖一个状态值，就要手动在 &lt;code&gt;update&lt;/code&gt; 函数中加上 UI 更新的逻辑。和传统的 MVC 没区别。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Svelte 是一个 Compiler, 帮助你在编译时生成这些 Vanilla JS 的代码，同时收集依赖，生成 UI 更新的逻辑。&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;hello world&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会被编译成：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;这并不是 Svelte 编译出来的代码，真实的代码经过了封装。这里只是为了方便讲解，但本质上是一致的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加一个变量：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  {count}&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会被编译成：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; text &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;count&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  text&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;nodeValue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; count&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;再次强调，这并非 Svelte 编译出来的真实代码。如果你对 Svelte 真实编译出来的代码有兴趣，可以在官方的 REPL &lt;a href=&quot;https://svelte.dev/repl&quot;&gt;https://svelte.dev/repl&lt;/a&gt; 写一个简单的 Svelte 组件然后看 JS output. 然后推荐进一步阅读 &lt;a href=&quot;https://lihautan.com/compile-svelte-in-your-head/&quot;&gt;https://lihautan.com/compile-svelte-in-your-head/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编译器在遇到 &lt;code&gt;{count}&lt;/code&gt; 的时候，就可以收集到在 count 变化的时候需要更新哪些元素。也就是说，像 Vue 那样通过 getter 实现的依赖收集，Svelte 通过编译阶段实现了。&lt;/p&gt;
&lt;p&gt;一个完整的 Counter:&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  {count}&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&amp;lt;button on:click={_ =&gt; { count += 1 }}&gt;+&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&amp;lt;button on:click={_ =&gt; { count -= 1 }}&gt;-&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;你可以在这里打开这个程序 &lt;a href=&quot;https://svelte.dev/repl/cfd45cdafb8a48a88edab6921c69ac0c?version=3&quot;&gt;https://svelte.dev/repl/cfd45cdafb8a48a88edab6921c69ac0c?version=3&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在编译的阶段，只要遇到赋值语句，就可以插入一个语句来安排 UI update (schedule update). 就像本文最初提到的方法一样。&lt;/p&gt;
&lt;p&gt;到这里，已经解释了什么是「在编译时实现了 Reactivity」。&lt;/p&gt;
&lt;h2 id=&quot;svelte-%E7%9A%84%E7%89%B9%E6%AE%8A%E8%AF%AD%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;Svelte 的特殊语法&lt;/h2&gt;
&lt;p&gt;Svelte 里有一个比较特殊的语法，值得在这里介绍一下。&lt;/p&gt;
&lt;p&gt;回到最初的例子：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;c&lt;/code&gt; 依赖了其它变量，如果其中的依赖发生了改变，它应该会被重新计算。在 Vue 里可以通过 &lt;code&gt;computed&lt;/code&gt; 实现：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; reactive &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;computed&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;b&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Svelte 用了一个特殊的语法实现了类似 computed 的功能：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; c &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{c}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;:&lt;/code&gt; 其实是一个合法的 JavaScript 语法，&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/label&quot;&gt;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/label&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然背后同样是在编译时实现的，它在更新视图的函数前会加入执行 &lt;code&gt;a + b&lt;/code&gt; 并赋值给 c 的语句。&lt;/p&gt;
&lt;h2 id=&quot;svelte-%E7%9A%84%E8%B7%A8%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF&quot; tabindex=&quot;-1&quot;&gt;Svelte 的跨组件通讯&lt;/h2&gt;
&lt;p&gt;状态管理和组件通讯是前端框架设计比较重要的一块，通常的做法是 &lt;a href=&quot;https://zh-hans.reactjs.org/docs/lifting-state-up.html&quot;&gt;Lifting State Up&lt;/a&gt;. 也就是两个同级组件如果想要共享状态，那就把这个状态上升到共同的父组件上面去。Svelte 也可以这么做。不过 Svelte 里有 &lt;code&gt;store&lt;/code&gt; , 你可以定义一个 writable store, 然后在不同的组件之间进行读取和更新：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;// store.js&lt;br /&gt;import { wrtiable } from &#39;svelte/store&#39;&lt;br /&gt;export let count = writable(0)&lt;br /&gt;&lt;br /&gt;// A.svelte&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./store.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; count_value&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unsub &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; count&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  count_value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newValue&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sapn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{count_value}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sapn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;// B.svelte&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./store.js&#39;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&amp;lt;button on:click={_ =&gt; count.set(2) }&gt;mutate&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;每个 writable store 其实是一个 object, 在需要用到这个值的组件里可以 &lt;code&gt;subscribe&lt;/code&gt; 他的变化，然后更新到自己组件里的状态。在另一个组件里可以调用 &lt;code&gt;set&lt;/code&gt; 更新这个状态的值。&lt;/p&gt;
&lt;p&gt;敏锐的读者可能已经发现，上面的代码没有处理组件销毁时 unsubscribe. 当然我可以在 &lt;code&gt;onDestroy()&lt;/code&gt; 里调用 &lt;code&gt;unsub()&lt;/code&gt;, 但是在 Svelte, 有个更便捷的语法：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;// store.js&lt;br /&gt;import { wrtiable } from &#39;svelte/store&#39;&lt;br /&gt;export let count = writable(0)&lt;br /&gt;&lt;br /&gt;// A.svelte&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./store.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;sapn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{$count}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;sapn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;// B.svelte&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; count &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./store.js&#39;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&amp;lt;button on:click={_ =&gt; $count = 2 }&gt;mutate&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Svelte 规定了在 store 前面加一个 &lt;code&gt;$&lt;/code&gt;, 会自动 subscribe, 得到它的值，并且在组件被销毁的时候自动帮你 unsubscribe 它。对它进行赋值的时候，其实相当于执行了 &lt;code&gt;.set()&lt;/code&gt; 的方法。&lt;/p&gt;
&lt;p&gt;不要以为 &lt;code&gt;svelte/store&lt;/code&gt; 的 writable 返回的对象是一个黑魔法，其实他不过是一个普通的对象而已，只是 Svelte 在编译的时候对 &lt;code&gt;$&lt;/code&gt; 为首的变量做了一些特殊处理。比如：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;$name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会编译成：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; name_value&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; unsub &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; name&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;newValue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  name_value &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; newValue&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;name_value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;unsub&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;同样这不是 Svelte 实际生成的代码，这里是为了讲解，但本质和 Svelte 的逻辑一致&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对一个 store 赋值：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;	$name &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;new&#39;&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;会被编译成：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;name_value&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;name&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;看到这里，你可能已经知道了，其实 store 只不过是一个普通的对象，只是如果你在 Svelte 里通过 $ 符号进行操作的时候，会调用它的一些方法。这些方法就是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;subscribe&lt;/code&gt;. 返回一个 unsubscribe 方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;只要任何对象有实现两个方法，就可以用 $ 进行这样的便捷使用。这是一种 Svelte 约定的 &lt;a href=&quot;https://svelte.dev/docs#Store_contract&quot;&gt;store 协议&lt;/a&gt;. &lt;code&gt;writable&lt;/code&gt; 是一个创建符合 store 协议的对象的捷径，不是什么黑魔法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你用 RxJS, 你会发现 RxJS 天生就兼容 store 协议&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E6%88%91%E5%AF%B9-svelte-%E7%9A%84%E7%9C%8B%E6%B3%95&quot; tabindex=&quot;-1&quot;&gt;我对 Svelte 的看法&lt;/h2&gt;
&lt;p&gt;我用 React 太久了，在用回不需要关心 rerender 问题的框架，我觉得非常舒服😄。当然 Vue 也不需要，我觉得在某个程度上 Svelte 和 Vue 很像，它和 Vue  的区别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实现 Reactivity 的原理都是依赖收集，但 Svelte 是在编译时完成了，Vue 在运行时收集。&lt;/li&gt;
&lt;li&gt;Vue 用了 Virtual DOM, Svelte 在编译时就知道它应该操作哪个 DOM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为所有的功能都是在编译时实现的，所以用 Svelte 写的代码非常直白 —— 像正常定义变量一样定义变量，在 HTML 里使用这个变量，修改这个变量（而且没有 &lt;code&gt;this&lt;/code&gt;）。运行时的框架无论如何简单，至少需要你写一层 Wrapper，例如在 Vue 里你必须把状态包在 data 函数中返回。&lt;/p&gt;
&lt;p&gt;我认为 &lt;a href=&quot;https://svelte.dev/blog/write-less-code&quot;&gt;Write less code&lt;/a&gt; 是重要的，在前端开发的领域，我们花了太多精力在处理像 immutable, reactivity 这些 UI 开发标配的特性上面， 我一直认为需要有一门天生带了这些特性的语言用来写 UI 应用，而不是引入第三方包、写一些 boilerplate code.&lt;/p&gt;
&lt;p&gt;Svelte 非常接近，而且它做到了不需要你学习新的语法，在 JavaScript 里面就实现了这样的效果（目前只是 Reactivity）。&lt;/p&gt;
&lt;p&gt;所以无论是对比哪个框架，我个人觉得 Svelte 对我来说最大的吸引力是可以写更少的代码，而且在写代码的时候感觉是符合直觉的，这一点非常重要，我认为 React 并没有做好这一点。我碰到过太多用 React 的朋友同样遇到过这样的问题：&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; time&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; setTime &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; interval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;time &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;interval&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个 &lt;code&gt;time&lt;/code&gt; 在视图里一直是 1，为什么？谁会在第一次写这样的逻辑的时候就能意识到问题出现在哪里呢？&lt;/p&gt;
&lt;p&gt;同样的逻辑在 Svelte 里，就不会有这样的问题（当然在 Vue 里也不会有）：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;	&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; interval &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		time &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; time &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;	&lt;span class=&quot;token function&quot;&gt;onDestroy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;		&lt;span class=&quot;token function&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;interval&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  {time}&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然可能有人会说，Randy, 你连在 hooks 里面怎么用 setInterval 都不知道，你一定是 JavaScript 基础不行，回去补补基础吧！对于这样的想法，我只能一笑了之😆。&lt;/p&gt;
&lt;p&gt;我没有办法提出一个杀手级的功能吸引没有用过 Svelte 的人来用 Svelte, 我只能说我喜欢 Svelte 是因为她是一个简单的框架，我在用她的时候不用想太多 Why.&lt;/p&gt;
&lt;p&gt;Vue 的缺点和优点基本就是 Svelte 的缺点和优点，但 Svelte 从用法上比 Vue 更简单。&lt;/p&gt;
&lt;p&gt;至于有人说，Svelte 生成的代码体积小，我认为这确实是一个优势，不过要注意的是用 Svelte 生成的代码，体积是线性增长的。这是我大概画的一个图，表示项目规模和代码体积的关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/Z9fwZH.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这只是一个大概的趋势，图中的斜率不是一个准确的值。详细在 Github 看相关的讨论 &lt;a href=&quot;https://github.com/sveltejs/svelte/issues/2546&quot;&gt;https://github.com/sveltejs/svelte/issues/2546&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;svelte-%E7%9A%84%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF&quot; tabindex=&quot;-1&quot;&gt;Svelte 的适用场景&lt;/h2&gt;
&lt;p&gt;生态是技术选型一个很重要的考虑因素，Svelte 显然不是数一数二的选择，基本不用期望 Svelte 有什么现成的组件库。&lt;/p&gt;
&lt;p&gt;我认为 Svelte 非常适合用来做活动页。活动页没有很复杂的交互，以渲染和事件绑定为主。我常常想做简单的活动页还用 React 也太委屈自己了吧。&lt;/p&gt;
&lt;p&gt;另外一个很好的用法是用 Svelte 写的 UI 组件，可以包装成给不同框架用的组件。Svelte 暴露了足够的 &lt;a href=&quot;https://svelte.dev/docs#$set&quot;&gt;API&lt;/a&gt; 可以适配到其它框架，比如写一个日历组件，然后分别包装成 React 和 Vue 的版本。&lt;/p&gt;
&lt;h2 id=&quot;%E7%BB%93%E8%AE%BA&quot; tabindex=&quot;-1&quot;&gt;结论&lt;/h2&gt;
&lt;p&gt;我很喜欢 Rich Harris (Svelte 的作者) 的很多想法，在 YouTube 看他的演讲有很大的收获。你可以在下面的延伸链接找到更多有关 Svelte 的我认为不错的视频，十分推荐 Rethinking Reactivity 这个演讲（我在 Bilibili 没有找到搬运，所以只能贴上 YouTube 链接了）。&lt;/p&gt;
&lt;p&gt;最后想说的是，学习一个框架或者一个语言，不一定是非要把它用到生产环境才算是有用。我很喜欢看新的技术和学不同的语言，更多地是因为想看看在面对同一个问题的时候，不同的人解决问题的思路是怎么样的，这才是框架和语言真正的魅力。比如说你不一定非要用 &lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt;, 但是你一定能从 Elm 的设计学到点什么。Svelte 也一样 :)&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%93%BE%E6%8E%A5&quot; tabindex=&quot;-1&quot;&gt;延伸链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zhihu.com/question/53150351&quot;&gt;知乎 - 如何看待 svelte 这个前端框架？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AdNJ3fydeao&quot;&gt;Rethinking Reactivity (YouTube)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://overreacted.io/making-setinterval-declarative-with-react-hooks/&quot;&gt;Making setInterval Declarative with React Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lihautan.com/compile-svelte-in-your-head/&quot;&gt;Compile Svelte in your head&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.swyx.io/svelte-sites-react-apps/&quot;&gt;Svelte for Sites, React for Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>做这个世界的生产者</title>
    <link href="https://lutaonan.com/blog/be-a-creator/"/>
    <updated>2021-01-27T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/be-a-creator/</id>
    <content type="html">&lt;p&gt;偶尔看到这篇名叫 &lt;a href=&quot;https://tjcx.me/p/consume-less-create-more&quot;&gt;Consume less, create more&lt;/a&gt; 的文章，是作者从「消费者」转变为「生产者」的心路历程。他每天在巴士上面用 iPhone 写点什么，最终写出了这篇文章。&lt;/p&gt;
&lt;p&gt;我从懂事开始就一直觉得自己在这个世界上与众不同，觉得自己的出生一定是背负了某个特殊的使命。后来发现原来每个人年轻的时候都是这么想的，随着年纪渐长，大多数人开始接受自己只是个普通人的事实。我也不例外。&lt;/p&gt;
&lt;p&gt;但唯一没有变过的是我没有因为意识到了自己的平凡而停止了试图变得不平凡。其中的一个表现就是我希望在这个世界上，我是作为一个生产者存在的，而不只是一个消费者。&lt;/p&gt;
&lt;p&gt;写博客、编程、做音乐都是我的生产，即使我写的博客没有让我成为几十万粉丝的 KOL, 我写的代码没有几万的 star, 唱的歌的观看数只是几百，我还是保持生产，&lt;strong&gt;因为对于这个世界，能让我有那么一点与众不同的是我的生产，而不是我的消费。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我讨厌抖音，不是因为它的内容，是因为它默默地把人驯化成了贪婪的信息消费者。如果我什么都不创造，那么我每天看 Hacker News 和别人每天刷抖音没有任何区别。&lt;/p&gt;
&lt;p&gt;这个世界的每个人都是消费者，但不是每个人都是生产者。如果你也希望为这个世界留下点什么，就去创造，别担心你创造的是不是垃圾，只要创造了，是一定会有收获的。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2020 年终总结</title>
    <link href="https://lutaonan.com/blog/2020-summary/"/>
    <updated>2021-01-10T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2020-summary/</id>
    <content type="html">&lt;p&gt;COVID-19 疫情最严重的时候我在广州，记得我 12 月底从杭州飞回广州的时候，根本没有想到事情会发展得和 SARS 一样严重。印象中那个时候的关键词是：安静，冷空气，未知。不知道这样的情况会持续多久，每天关注着 Telegram 的 Broadcast 看新增的感染有多少。同时还远程办公着，做着「花呗来电」的需求。没错，就是那个让你付钱还要每月打电话提醒你还花呗的服务。&lt;/p&gt;
&lt;p&gt;没想到多年前我们都在探索的远程办公，会因为一场传染病让更多人体验到了。但显然，我体验到的只是畸形的远程办公，他披上了远程办公的外衣，让我们每个人变成了 On call 24 小时 —— 比如我甚至在炒菜的时候还要接入电话会议。&lt;/p&gt;
&lt;p&gt;我思考了很多，在 4 月份决定&lt;a href=&quot;https://lutaonan.com/blog/leaving-alibaba&quot;&gt;离开阿里巴巴&lt;/a&gt;。后来我面试了一些公司，那些你能说得出名字的公司我应该面了有一半。我很奇怪现在的「大厂」招聘到底是什么标准，问的问题到底有什么意义，让我一度严重怀疑我的能力。当然，有些面试者可能也觉得奇怪，为什么这样一个在博客上侃侃而谈的人，连浏览器如何验证 HTTPS 证书的都不知道。&lt;/p&gt;
&lt;p&gt;后来落实了现在的工作，不过我现阶段不打算过多的提及我的新工作。但在这个新的环境，遇到的新的人们，对我一些固有的想法有了不少的冲击，让我有了一些新的想法和反思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优秀的程序员和普通的程序员之间很多时候只隔了一层好奇心，对「有没有更好，更有效率，更聪明的做法」的好奇心。&lt;strong&gt;在这个时代，「代码」是一种生产资料的，而大量的程序员们却自己忽略了这一点，或者自愿放弃了这点&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;把技术作为兴趣的人是少数，只是互联网让我们有机会聚集到了一起，这让我很长一段时间误以为这就是程序员的常态。现在每当我因一个程序员缺乏专业素养而内心愤怒的时候， &lt;strong&gt;我都会提醒自己，不是每个人都像我一样愿意(或者有条件)把技术带到日常生活中去。&lt;/strong&gt; 我每天吸收的资讯、读的书大部分都和技术有关，这只是因为我的兴趣和职业都恰好是技术，但别人不是。&lt;/li&gt;
&lt;li&gt;我在很多人的眼里是幸运的 —— 我有条件在很小的时候接触计算机，我「幸运地」在退学以后还能进「大厂」，等等等等。我承认我是幸运的，但我一直在思考，我所享受到的幸运，可以如何为那些不那么「幸运」的人带去一些有用的东西呢？博客是我一直在做的，也能稍微达到目的，但这远远不够。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E6%8A%80%E6%9C%AF&quot; tabindex=&quot;-1&quot;&gt;技术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;在一个内部平台用了 &lt;a href=&quot;https://hapi.dev/&quot;&gt;hapi&lt;/a&gt;, 我非常喜欢 &lt;code&gt;hapi/boom&lt;/code&gt; 的设计。hapi 是我目前用 Node 写 API Server 的首选。&lt;/li&gt;
&lt;li&gt;学了一段时间 Go, 写了 &lt;a href=&quot;https://github.com/djyde/snp&quot;&gt;snp&lt;/a&gt;. 目前还没有场景用到 Go 的更高阶的特性。以后我会尽量把和前端无关的工具用 Go 写。&lt;/li&gt;
&lt;li&gt;我仍然一直在关注 &lt;a href=&quot;https://rescript-lang.org/&quot;&gt;ReScript&lt;/a&gt; (也就是 ReasonML), 我认为 ReScript 是所有编译到 JavaScript 的方言里最优雅的语言。她的特性弥补了用 ECMAScript 写 React 的缺点。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E6%88%91%E4%BB%8A%E5%B9%B4%E6%9C%80%E5%96%9C%E6%AC%A2%E7%9A%84%E6%8A%80%E6%9C%AF&quot; tabindex=&quot;-1&quot;&gt;我今年最喜欢的技术&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hasura.io/&quot;&gt;Hasura&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://prisma.io/&quot;&gt;Prisma&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://chakra-ui.com/&quot;&gt;chakra-ui&lt;/a&gt; 它比 Ant.Design 更容易定制化&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;best-buy&quot; tabindex=&quot;-1&quot;&gt;Best buy&lt;/h2&gt;
&lt;p&gt;(&amp;lt;small&amp;gt;*排名分先后&amp;lt;/small&amp;gt;)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tesla-model-3-review/&quot;&gt;Tesla Model 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/go/shop/xiaomi-chongya&quot;&gt;小米冲牙器&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;以前用牙线，麻烦，效率低，不环保，不全面。用了冲牙器，快、有效、方便。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/go/shop/sony-a6100&quot;&gt;SONY a6100&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;替换了我的黑卡 3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我也对我买过的数码产品进行了反思，觉得有些对我来说是性能过剩的：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;iPad Pro&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果现在让我选，我肯定会选更便宜且支持二代 Apple Pencil 的 iPad Air. 我目前对 iPad 的需求只有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持二代 Apple Pencil&lt;/li&gt;
&lt;li&gt;支持蜂窝&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;MacBook Pro 32GB 内存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我在买这台 MacBook 的时候特意把内存加到了 32GB, 但这些年用下来，我发现我对 laptop 的需求瓶颈不在内存，而是 CPU, 运算速度，续航和发热量，而这些东西在这台 MacBook Pro 都没有做得好。&lt;/p&gt;
&lt;p&gt;我可能会在一年后换成 M2 的 MacBook Air 取代这台 MacBook Pro.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Apple Watch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Apple Watch 对于有氧训练来说确实非常好用，但对于我大多数情况下都是力量训练的人来说并没有太大的用处，唯一的用处只有一些健身记录的 App 可以通过 Apple Watch 在训练的时候进行记录，或者组间计时。而我更愿意用小本子来记(因为记录一些训练感受的备注更方便)，我的卡西欧手表计时也足够方便。&lt;/p&gt;
&lt;p&gt;我也用 AutoSleep 记录过一段时间的睡眠时间和质量，但我本身睡眠就没有什么问题，所以这些数据对我没有什么帮助。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B7%A5%E5%85%B7&quot; tabindex=&quot;-1&quot;&gt;工具&lt;/h2&gt;
&lt;p&gt;今年用到了两个新的工具，值得分享给大家。&lt;/p&gt;
&lt;h3 id=&quot;roam-research&quot; tabindex=&quot;-1&quot;&gt;Roam Research&lt;/h3&gt;
&lt;p&gt;我在试用了 30 天 Roam Research 以后就发现我离不开它，所以咬着牙订阅了它。我记的想法或者笔记通常是零散的，没有组织的，但在 Roam Research 里可以通过 tag 和 backlink 把这些零散的记录关联到一起，可以很好地辅助我的写作。&lt;/p&gt;
&lt;p&gt;比如在我的 Roam Research 里有提到关于 Roam Research 的记录都能直观地看到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/cpfllD.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;有时候我在写作的时候会惊喜地发现有些有关联的笔记我自己都已经忘了，如果不是 backlink 我可能永远都不会想起它。所以它就像是我&lt;strong&gt;第二大脑&lt;/strong&gt; ：我们虽然暂时还无法复制我们自己的大脑，但是我们可以通过文字笔记的方式创造一个我们大脑的子集。它记忆了自己曾经学习过的、思考过的东西，永远不会忘记。在需要的时候，随时可以翻查这个第二大脑的记忆，而且他是网状的，拥有一定程度上的「联想」。&lt;/p&gt;
&lt;p&gt;我之后会详细地分享我是如何用 Roam Research 的。&lt;/p&gt;
&lt;h3 id=&quot;cubox&quot; tabindex=&quot;-1&quot;&gt;Cubox&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://cubox.pro/&quot;&gt;https://cubox.pro&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我以前不用书签管理工具，有些曾经读过的文章和工具，在之后想找也找不到了。在用了 Roam Research 之后，感受到了 tag 的强大力量，所以我开始用书签管理工具, 给每一个书签加上标签，日后我可以通过 tag 的组合找到忘掉的东西。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cubox 也替代了我其它的 Read it later 工具，我现在看到无法短时间消化的文章，都可以收藏到 Read it later 的文件夹里，到晚上统一处理。&lt;/li&gt;
&lt;li&gt;在移动端用 share sheet 也可以很方便把移动端上看到的页面收藏到 Cubox&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E9%98%85%E8%AF%BB&quot; tabindex=&quot;-1&quot;&gt;阅读&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;《精通正则表达式》&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我是在一次面试的时候被问到过一个用正则表达式提取一个固定语法的句子里的信息的问题，之后我就读到了这本《精通正则表达式》，前三章已经让我收获非常大。这个收获不是那些正则表达式的基本语法，而是这本书想要传达给读者的思想 —— 把正则表达式作为一种工具去运用它。&lt;/p&gt;
&lt;p&gt;我在读了这本书之后再也没有了以前对正则表达式的那种恐惧，而且还因为正则表达式学习了很多关于 Parser 的知识，也在日常开发中惊喜地发现有很多问题可以用正则的方式解决。&lt;/p&gt;
&lt;p&gt;《精通正则表达式》是我今年读的最有价值的一本书。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to make smart notes&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;因为用 Roam Research 所以读的一本书，讲的是做笔记的方法论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even the best tool will not improve your productivity considerably if you don’t change your daily routines the tool is embedded in, just as the fastest car won’t help you much if you don’t have proper roads to drive it on. Like every change in behaviour, a change in working habits means going through a phase where you are drawn back to your old ways.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://lutaonan.com/go/shop/clean-arch&quot;&gt;《整洁架构之道》&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我最早的职业规划是成为一个架构师，在工作以来也用自己的方法「设计」过很多系统和工具，这本书是讲真正的软件架构，里面解答了很多我想要知道的答案，软件架构的目标是什么，如何做软件架构，如何做技术选型。还有一些真实的架构案例可以参考。&lt;/p&gt;
&lt;p&gt;这本书我要再读一两遍才能详细地和大家分享。&lt;/p&gt;
&lt;h2 id=&quot;%E6%96%B0%E7%9A%84%E4%B8%80%E5%B9%B4%E6%83%B3%E5%81%9A%E7%9A%84&quot; tabindex=&quot;-1&quot;&gt;新的一年想做的&lt;/h2&gt;
&lt;p&gt;如果有机会，我希望可以在今年做一个小而美且有人愿意购买的产品，她会是好用的、体验好的、克制的、能带给用户更深层次的价值的。&lt;a href=&quot;https://sspai.com/post/61000&quot;&gt;就像印刷机，他表面上看上去只是一个工具，但他对于人类知识文化的传播是功不可没的&lt;/a&gt;。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>用 Code Snippet 提高开发效率</title>
    <link href="https://lutaonan.com/blog/how-to-use-code-snippets/"/>
    <updated>2020-12-25T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/how-to-use-code-snippets/</id>
    <content type="html">&lt;p&gt;写代码的时候总会遇到一些相同的但是反复要写的代码，比方说每次写一个 React Component, 都要这样写一遍：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; App&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时候很适合把他写成 Code Snippet, 让编辑器帮我去生成。每个编辑器或 IDE 都有 Snippet 功能，我自己常用 VS Code, 所以我会去写一些 VS Code 的 Snippet 文件。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VS Code code snippet 的配置入口：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/cXvY0y.png?x-oss-process=style/80&quot; alt=&quot;VS Code code snippet 配置入口&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;VS Code code snippet 配置是一个 JSON 文件，按照&lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets#_creating-your-own-snippets&quot;&gt;它的语法&lt;/a&gt;, 我可以这样去实现一个上面提到的，用于生成 React Component 代码的 snippet:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;fc&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;scope&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;javascript,typescript,typescriptreact&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;React Function Component&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;function ${componentName} () {&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;  return (&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;    &amp;lt;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;    &amp;lt;/&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;  )&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string&quot;&gt;&quot;export default ${componentName}&quot;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;prefix&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;fc&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后我在编辑器里只要输入 &lt;code&gt;fc&lt;/code&gt;, 就可以选择这个 snippet:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/8hdVZE.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;用 Snippet 很方便，但是编写这个 Snippet 体验非常糟糕，因为需要把代码块一行一行地转换成字符串，空格也要自己加。&lt;/p&gt;
&lt;p&gt;我想这也是我身边这么少人用 Snippet 的原因，我自己也深受其害。为了方便管理我的 Snippets 以及方便地导出为 VS Code code-snippets 文件，我写了个程序，可以让我把每个 snippet 写到单独的文件里，然后输出 VS Code code-snippets 格式的 JSON.&lt;/p&gt;
&lt;h2 id=&quot;%E7%94%A8-snp-%E7%AE%A1%E7%90%86-snippets&quot; tabindex=&quot;-1&quot;&gt;用 snp 管理 snippets&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;目前只适用于 VS Code&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个程序叫 &lt;code&gt;snp&lt;/code&gt;, 你可以用 curl 直接安装这个程序：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -sf https://gobinaries.com/djyde/snp &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;于是，我现在管理 snippets 非常轻松。创建一个目录，用来存放这些 snippets,&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; snippets&lt;br /&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; snippets&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后我就可以创建我的 snippets, 以触发的词作为文件名，&lt;code&gt;.snp&lt;/code&gt; 作为后缀。例如我创建一个输入 &lt;code&gt;fc&lt;/code&gt; 就会触发的 snippet:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; fc.snp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 &lt;code&gt;.snp&lt;/code&gt; 文件里，你可以按照 &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax&quot;&gt;snippet 语法&lt;/a&gt; 直接写你需要生成的代码，然后在文件的头部加上必要的信息：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token literal-property property&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; javascript&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;typescript&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;typescriptreact&lt;br /&gt;&lt;span class=&quot;token literal-property property&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; React Function Component&lt;br /&gt;&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;componentName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; $&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;componentName&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;scope&lt;/code&gt; 指定了这个 snippet 在哪个语言环境生效，具体可以参照 &lt;a href=&quot;https://code.visualstudio.com/docs/editor/userdefinedsnippets&quot;&gt;VS Code 的文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后执行：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ snp -p&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你会看到命令输出了一段 JSON, 你可以把这段 JSON 写入文件里:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ snp -p &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; my-snippets.code-snippets&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后手动复制到 VS Code 的 snippets 文件里。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然，如果你嫌每次更新都要手动复制很麻烦，你可以直接运行：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ snp -u&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样 snippets 会自动写到 VS Code 的目录里，你不需要手动更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就可以像我一样，在一个文件夹里统一管理 snippets, 用 snp 同步到 VS Code,还能上传到 GitHub:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/s6ER6t.png?x-oss-process=style/80&quot; alt=&quot;我的 snippets 目录&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/fveMJq.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;br /&amp;gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&amp;lt;br /&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;snp 是一个开源项目：&lt;a href=&quot;https://github.com/djyde/snp&quot;&gt;https://github.com/djyde/snp&lt;/a&gt;. 用 Go 编写。&lt;/li&gt;
&lt;li&gt;这是我的 snippets 仓库：&lt;a href=&quot;https://github.com/djyde/snippets&quot;&gt;https://github.com/djyde/snippets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>博客开放评论</title>
    <link href="https://lutaonan.com/blog/open-for-comment/"/>
    <updated>2020-08-26T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/open-for-comment/</id>
    <content type="html">&lt;p&gt;我曾经&lt;a href=&quot;https://lutaonan.com/blog/do-have-faith-with-yourself/&quot;&gt;声明&lt;/a&gt;博客不开放评论，今天我重新在博客的每篇文章底部增加了 Disqus. 是因为一直以来收到过很多&lt;a href=&quot;https://lutaonan.com/blog/letters-from-reader/&quot;&gt;读者来信&lt;/a&gt;， 有些来信很有质量，是值得被更多人看到的。但是 Email 毕竟是私密的，不能随便公开。重新开放评论就是为了可以让博客读者多一种公开表达的渠道，把一些值得公开的表达不止存在在我的邮箱里。&lt;/p&gt;
&lt;p&gt;为了防止无意义的评论，只有通过我筛选的评论会被显示。当然，筛选的标准是公开的，我希望读者的评论是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不是无意义的评论，如「膜拜」、「牛逼」、「傻逼」等&lt;/li&gt;
&lt;li&gt;文章对读者的具体启发&lt;/li&gt;
&lt;li&gt;读者对文章观点的有理反驳&lt;/li&gt;
&lt;li&gt;对在读同一篇文章的人想说的话&lt;/li&gt;
&lt;li&gt;对文章进行勘误&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我还增设了&lt;a href=&quot;https://lutaonan.com/comments/&quot;&gt;「公共留言」&lt;/a&gt;，作为对博客而非具体文章的留言区。&lt;/p&gt;
&lt;p&gt;期待你的留言。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Docmate - 一个可以自由部署的文档平台</title>
    <link href="https://lutaonan.com/blog/announcing-docmate/"/>
    <updated>2020-08-15T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/announcing-docmate/</id>
    <content type="html">&lt;p&gt;建议阅读本文的英文版: &lt;a href=&quot;https://docs.docmate.io/5b597b6b-595a-4e88-9350-3694f7754916#/UNLXdip7&quot;&gt;Announcing Docmate&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/MvPTCD.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;对我来说，文档和代码同等重要，如果写出来的代码没有写文档，那么等于没写代码。互联网上有很多文档平台，但有些团队或公司会基于数据安全的考虑不能使用外部平台，只好通过自建的 Gitlab Wiki 或者其它一些开源的 wiki system 解决文档问题，或者用一些静态文档生成工具配合 Gitlab 生成文档。&lt;/p&gt;
&lt;p&gt;我调研了一些开源的 wiki system, 发现国外开源的 wiki system 对中文内容并不友好，尤其是在内容组织上，基于 slug 来编排目录对于中文标题来说是非常困难的. 国内的开源 wiki system 相对比较少，所以这些天，作为一个 Side Project, 我尝试按照自己的思路做出来了 &lt;a href=&quot;https://docmate.io/&quot;&gt;Docmate&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;docmate-%E5%8F%AF%E4%BB%A5%E5%81%9A%E4%BB%80%E4%B9%88&quot; tabindex=&quot;-1&quot;&gt;Docmate 可以做什么&lt;/h2&gt;
&lt;p&gt;1.编写 Markdown 文档，得到可以分享的 &lt;a href=&quot;https://docute.org/&quot;&gt;Docute&lt;/a&gt; 或 &lt;a href=&quot;https://docsify.js.org/&quot;&gt;Docsify&lt;/a&gt; (暂不支持) 文档&lt;/p&gt;
&lt;p&gt;2.建立团队，邀请团队成员，共同维护文档&lt;/p&gt;
&lt;p&gt;3.文档可以设置为仅团队成员可见&lt;/p&gt;
&lt;h2 id=&quot;%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97-docmate&quot; tabindex=&quot;-1&quot;&gt;如何获得 Docmate&lt;/h2&gt;
&lt;p&gt;Docmate 分为 Docmate Cloud 和自己部署的 Docmate, 两者功能目前完全相同。你可以按照&lt;a href=&quot;https://docs.docmate.io/5a7c975f-8438-46fa-b202-81029241975f#/&quot;&gt;官方文档&lt;/a&gt;部署自己的 Docmate, 也可以在 &lt;a href=&quot;https://docmate.io/&quot;&gt;https://docmate.io&lt;/a&gt; 可以直接使用 Docmate Cloud. 所有功能暂时不收取费用。&lt;/p&gt;
&lt;h2 id=&quot;%E8%B0%81%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8-docmate&quot; tabindex=&quot;-1&quot;&gt;谁应该使用 Docmate&lt;/h2&gt;
&lt;p&gt;1.对数据安全敏感、希望自己部署文档库的团队&lt;/p&gt;
&lt;p&gt;2.工具开发者，需要给用户编写使用手册，可以直接使用 Docmate Cloud&lt;/p&gt;
&lt;h2 id=&quot;docmate-%E7%9A%84%E8%AE%A1%E5%88%92&quot; tabindex=&quot;-1&quot;&gt;Docmate 的计划&lt;/h2&gt;
&lt;p&gt;在团队合作中，编写文档是软件工程师很重要的素养，我希望 Docmate 能给需要文档库的团队多一个选择，让更多工程师愿意编写文档。&lt;/p&gt;
&lt;p&gt;还有很多计划中的功能尚未完成，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 Docsify&lt;/li&gt;
&lt;li&gt;支持更多级目录编排&lt;/li&gt;
&lt;li&gt;支持一个文档多种语言&lt;/li&gt;
&lt;li&gt;支持一个文档多个版本&lt;/li&gt;
&lt;li&gt;Docmate Cloud 支持自定义域名&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，在代码结构稳定后，我将开源全部代码。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>离开阿里巴巴</title>
    <link href="https://lutaonan.com/blog/leaving-alibaba/"/>
    <updated>2020-05-17T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/leaving-alibaba/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/jMN3dI.jpg?x-oss-process=style/80&quot; alt=&quot;西湖&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这个月我将离开阿里巴巴，结束至今 4 年的阿里生涯。&lt;/p&gt;
&lt;p&gt;在阿里的 4 年我体验到非常多的东西，了解到了作为一个「职业程序员」的工作状态，认识了很多很靠谱的同事。尝试了一些东西，创造了一些东西，也吸收了一些东西。&lt;/p&gt;
&lt;p&gt;我很幸运，这几年我遇到的老板都对我非常好。在 UC, 甄子给了我很大的自由度，让我得以在技术上做很多的&lt;a href=&quot;https://lutaonan.com/blog/what-i-have-done-at-UC&quot;&gt;探索&lt;/a&gt; 。在花呗，完颜和我一起做了很多次难忘的乐队演出。我很喜欢 &lt;a href=&quot;https://richlab.design/team/&quot;&gt;花呗前端团队&lt;/a&gt; ，这里的同事很有趣，在一起工作非常快乐，他们在面对复杂且繁忙的业务时展现的专业性是我难以企及的。&lt;/p&gt;
&lt;h2 id=&quot;why-leave%3F&quot; tabindex=&quot;-1&quot;&gt;Why leave?&lt;/h2&gt;
&lt;p&gt;在大公司，成为一个优秀的业务型程序员要做的更不仅仅是理解业务需求。而我更擅长的是用技术解决效率问题、通过设计降低&lt;a href=&quot;https://www.wikiwand.com/en/Programming_complexity&quot;&gt;软件复杂度（Programming complexity）&lt;/a&gt;。但在业务 deadline 面前，这些仿佛是次要的。很少人有精力在 deadline 和加班面前能保持追求代码质量和软件设计，但这却是保证软件稳定和快速迭代的基础。为了快速上线而忽视代码质量的代价是很沉重的，但没人会指出这些技术债的根本原因就是太着急了，整个环节都太着急了。&lt;/p&gt;
&lt;p&gt;我也不擅长画大图，把事情说得很宏大。阿里是一个很大的公司，有很多内部系统（所谓的「中台」）已经很完善，不是每个人都有机会遇到「大」问题。但是如果不做点什么大事，在阿里的仕途不会很顺利。所以我目睹了许多因为 KPI 和职级晋升产生的内耗。它潜移默化地使人做事变得功利，它就像一把声音在你做事的时候默默地提醒你：要把事情做大。&lt;/p&gt;
&lt;p&gt;我从 Apple 和乔布斯身上理解到了在做同一件事时，不同的目的会导致做出来的东西天差地别。钱很重要，但如果乔布斯做产品的目的是钱而不是用户体验，那么 Apple 不会是今天的这个 Apple. 我认为做技术产品也是一样的道理，「做好」应该是目的。但能遇到适合「做大」的技术产品的场景是很靠运气的，在这样的情况下，绩效和晋升的压力会让人不得不把「做大」变成了目的，这就导致了：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单的事情复杂化，增加使用者的理解成本（ &lt;a href=&quot;https://www.wikiwand.com/en/Cognitive_load&quot;&gt;Cognitive Load&lt;/a&gt; ）&lt;/li&gt;
&lt;li&gt;能使用现有的技术，偏要自己再做一套。由于「做大 -&amp;gt; 晋升」是目的，这样的产品有很大的机率在达成了目的后被放弃。&lt;/li&gt;
&lt;li&gt;做事态度变成「能用就行」，不关心用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这样的做事方式不适合我，也违背了我做技术的理念。&lt;/p&gt;
&lt;h2 id=&quot;what%E2%80%99s-next&quot; tabindex=&quot;-1&quot;&gt;What’s next&lt;/h2&gt;
&lt;p&gt;我还没有一个很确切的计划，但我希望能去一个地方，定义我价值的不仅仅是因为我用了多牛逼的技术，做了一个多大的「平台」，而是我用技术的手段，给用户创造了什么他们觉得有价值的东西，如何改进了用户体验。又或者我用技术解决了哪些效率问题。&lt;/p&gt;
&lt;p&gt;更具体的目标是成为 &lt;a href=&quot;https://www.phodal.com/blog/path-to-tech-lead/&quot;&gt;Tech Lead&lt;/a&gt; 的角色。同时我对 &lt;a href=&quot;https://book.douban.com/subject/27593848/&quot;&gt;Growth Hacking&lt;/a&gt; 有很大的兴趣，希望可以结合技术和数据找出产品增长的瓶颈、把产品做得更好，帮助产品实现增长。&lt;/p&gt;
&lt;p&gt;我会回到广东，离开杭州。&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;离职不是什么苦大仇深的事，我对阿里没有任何的怨念，阿里有很多很好的地方，只不过不属于这篇文章要讨论的范围。无论在哪个地方，我想要的都是和一群有想法的人一起打磨一个有价值的产品，而不是不同职能的团队都只做对自己 KPI 有利的事。每个公司都有其独特的生存法则，但这个生存法则也应该让那些务实和纯粹的人能很好地生存下去。也许这就是我作为一个技术人的理想主义吧。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>说说 React 和 Vue</title>
    <link href="https://lutaonan.com/blog/react-and-vue/"/>
    <updated>2020-05-13T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/react-and-vue/</id>
    <content type="html">&lt;p&gt;争论框架是个无聊的事情，有一天在开车的时候我突然想到选框架和选车是一样的。&lt;/p&gt;
&lt;p&gt;React 就像手动挡，Vue 就像自动挡。你不能因为你会开手动挡就看不起开自动挡的，我想正常的驾驶员在城市代步都会选择开自动挡。我只想代个步，为什么不把复杂的事情交给变速箱呢。&lt;/p&gt;
&lt;p&gt;当你要下赛道，你可能要选择手动档。因为你相信你的人脑比变速箱要聪明得多。你需要由你自己的大脑控制最重要的事 —— 赛车里是速度，软件开发是性能。useMemo 或者shouldComponentUpdate 就是你车里面的那根档棍。&lt;/p&gt;
&lt;p&gt;用手动档的没有必要看不起用自动档的，人家根本不在意这车能不能开到极速，只想安心开开车顺便摸摸副驾驶的大腿；用自动档的也没必要在路上看到别人开手动档的就骂别人傻逼，人家一个老司机开手动档多年，可能从心智上开手动档开得跟你开自动档一样轻松，自己也享受手动档的乐趣。也有可能是因为他想开的车只有手动档的 —— 比如他因为想用 Ant.Design 所以选了 React.&lt;/p&gt;
&lt;p&gt;就像选择自动 GC 和手动 GC 的语言，作为一个成年人，应该知道什么是 trade-off.&lt;/p&gt;
&lt;p&gt;作为专业的程序员，更重要的是知道你面对的是赛道还是公路，你的伙伴到底会不会开手动档。&lt;/p&gt;
&lt;p&gt;最怕的是硬要让只会开自动档的人开手动档的车，轻则红绿灯起步死火被疯狂按喇叭，重则…&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>国内自建图床指南</title>
    <link href="https://lutaonan.com/blog/aliyun-cdn-tutorial/"/>
    <updated>2020-03-07T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/aliyun-cdn-tutorial/</id>
    <content type="html">&lt;nav class=&quot;table-of-contents&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E6%9C%AC%E6%96%87%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%BB%E8%80%85&quot;&gt;本文的目标读者&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%81%9A%E5%9B%BE%E5%BA%8A%E7%9A%84%E5%8E%9F%E7%90%86&quot;&gt;云服务做图床的原理&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3&quot;&gt;步骤详解&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-oss-bucket&quot;&gt;创建一个 OSS Bucket&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E5%88%9B%E5%BB%BA-cdn-%E9%85%8D%E7%BD%AE&quot;&gt;创建 CDN 配置&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D%E7%9A%84-cname&quot;&gt;设置域名的 CNAME&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E5%BC%80%E5%90%AF-https&quot;&gt;开启 HTTPS&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E5%BC%80%E5%90%AF%E7%A7%81%E6%9C%89-bucket-%E5%9B%9E%E6%BA%90&quot;&gt;开启私有 Bucket 回源&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E9%85%8D%E7%BD%AE-refer-%E9%98%B2%E7%9B%97%E9%93%BE&quot;&gt;配置 Refer 防盗链&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E4%BD%BF%E7%94%A8-upic-%E6%96%B9%E4%BE%BF%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87&quot;&gt;使用 uPic 方便上传图片&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E9%85%8D%E7%BD%AE-upic&quot;&gt;配置 uPic&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E6%88%91%E5%8D%9A%E5%AE%A2%E7%9A%84-cdn-%E7%94%A8%E9%87%8F&quot;&gt;我博客的 CDN 用量&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/aliyun-cdn-tutorial/#%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5&quot;&gt;相关链接&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/nav&gt;&lt;p&gt;我的博客很长一段时间在使用新浪微博作为图床，自从新浪微博开始防外链，我博客文章很多配图丢失了。我意识到我需要一个稳定可靠的图床，所以开始用阿里云自建一个我自己的图床，目前已经稳定使用了大半年。&lt;/p&gt;
&lt;p&gt;我起初以为很难，而且费用不底。但是在这半年，我每个月的 CDN 费用不高（当然这也取决于访问量）。我自诩自己的博客不至于荒废或者没什么人访问，所以对于那些和我的博客规模差不多的独立博客博主，本篇应该算得上是一个十分贴切的参考。&lt;/p&gt;
&lt;p&gt;当然，虽然我用的是阿里云，但套用到其它云服务都是一样的，读者可以读完后价比三家再作选择。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;声明：本文和阿里云没有任何利益关系。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;%E6%9C%AC%E6%96%87%E7%9A%84%E7%9B%AE%E6%A0%87%E8%AF%BB%E8%80%85&quot; tabindex=&quot;-1&quot;&gt;本文的目标读者&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;有自建图床的需求，且对国内访问速度有要求的。例如独立博客、独立摄影站，甚至独立播客主于用存放音频文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%81%9A%E5%9B%BE%E5%BA%8A%E7%9A%84%E5%8E%9F%E7%90%86&quot; tabindex=&quot;-1&quot;&gt;云服务做图床的原理&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/Untitled%20%28Draft%29-1%206.jpg?x-oss-process=style/80&quot; alt=&quot;原理图&quot; /&gt;&lt;/p&gt;
&lt;p&gt;云服务产品有很多，搭建图床只需要关注 OSS 和 CDN. OSS 是对象存储服务，通俗来说就是用来存文件的。OSS 都有对应的域名，文件保存在 OSS 后，可以通过 URL 下载它。&lt;/p&gt;
&lt;p&gt;但是直接通过 OSS 下载的成本很高，价格十分昂贵，所以我们需要 CDN 来分发，节约成本。在阿里云，可以把 CDN 绑定到 OSS, 通过 CDN 去访问这个文件时，如果是首次访问，CDN 会从 OSS 取得这个文件，这个过程叫「回源」。之后再访问会直接从 CDN 读取。&lt;/p&gt;
&lt;h2 id=&quot;%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3&quot; tabindex=&quot;-1&quot;&gt;步骤详解&lt;/h2&gt;
&lt;p&gt;因为我自己用的是阿里云，所以以阿里云为例（假设你已经注册好帐号）。&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA-oss-bucket&quot; tabindex=&quot;-1&quot;&gt;创建一个 OSS Bucket&lt;/h3&gt;
&lt;p&gt;一个 Bucket 相当于 OSS 中的一个存储空间，在 &lt;a href=&quot;https://oss.console.aliyun.com/overview&quot;&gt;OSS 控制台&lt;/a&gt; 点击创建 Bucket:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/%E6%88%AA%E5%B1%8F2020-03-07%E4%B8%8B%E5%8D%884.30.25.png?x-oss-process=style/80&quot; alt=&quot;创建 Bucket&quot; /&gt;&lt;/p&gt;
&lt;p&gt;填好 Bucket 名称和区域，其它选项按照默认即可。&lt;/p&gt;
&lt;p&gt;创建成功后，在 Bucket 的文件管理可以上传文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/B2l6dV.png?x-oss-process=style/80&quot; alt=&quot;上传文件&quot; /&gt;&lt;/p&gt;
&lt;p&gt;查看上传文件的信息，你可以看到文件有 URL, 但由于在创建 Bucket 的时候，为了防止盗用，我们选的 Bucket 权限为私有，所以从 URL 其实无法访问这个文件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/HUFU2y.png?x-oss-process=style/80&quot; alt=&quot;文件详情&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%88%9B%E5%BB%BA-cdn-%E9%85%8D%E7%BD%AE&quot; tabindex=&quot;-1&quot;&gt;创建 CDN 配置&lt;/h3&gt;
&lt;p&gt;在 &lt;a href=&quot;https://cdn.console.aliyun.com/&quot;&gt;CDN 控制台&lt;/a&gt; 进入域名管理，就可以开始配置 CDN 域名。&lt;/p&gt;
&lt;p&gt;所以，在创建 CDN 前，你需要买一个域名。这个域名可以随便买个便宜的不主流的，因为没人在意一个图床的域名。&lt;/p&gt;
&lt;p&gt;创建域名后，有一个要注意的地方，就是如果你需要国内加速，你的域名必须备案。备案其实是整个自建图床成本最高的一个环节。如果你的博客或者网站域名已经备案，那么可以直接用这个域名分配一个二级域名给 CDN 用。省去再备案的麻烦。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/guk3mO.png?x-oss-process=style/80&quot; alt=&quot;添加域名&quot; /&gt;&lt;/p&gt;
&lt;p&gt;比如你的域名是 &lt;a href=&quot;http://blabla.com/&quot;&gt;blabla.com&lt;/a&gt;, 那么你的加速域名可以是 &lt;a href=&quot;http://static.blabla.com/&quot;&gt;static.blabla.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;源站信息选「OSS域名」，选中之后会出现一个下拉选择，可以选中刚刚创建的 Bucket 源站：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/GPlUFe.png?x-oss-process=style/80&quot; alt=&quot;源站域名&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如果你的网站用 https, 端口选 443.&lt;/p&gt;
&lt;p&gt;如果你域名已经备案，就选全球或中国大陆。&lt;/p&gt;
&lt;h4 id=&quot;%E8%AE%BE%E7%BD%AE%E5%9F%9F%E5%90%8D%E7%9A%84-cname&quot; tabindex=&quot;-1&quot;&gt;设置域名的 CNAME&lt;/h4&gt;
&lt;p&gt;创建完后，你需要把你域名的 CNAME 指定为提供的值。如果你域名解析也是用阿里云，可以查看 &lt;a href=&quot;https://help.aliyun.com/document_detail/27144.html?spm=5176.11785003.0.0.6402142fn9IEPG&quot;&gt;这篇文档&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/j5Vvuk.png?x-oss-process=style/80&quot; alt=&quot;CNAME&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%BC%80%E5%90%AF-https&quot; tabindex=&quot;-1&quot;&gt;开启 HTTPS&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/TezAat.png?x-oss-process=style/80&quot; alt=&quot;https&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%BC%80%E5%90%AF%E7%A7%81%E6%9C%89-bucket-%E5%9B%9E%E6%BA%90&quot; tabindex=&quot;-1&quot;&gt;开启私有 Bucket 回源&lt;/h3&gt;
&lt;p&gt;因为前面在创建 Bucket 的时候权限设置为私有，所以需要给 CDN 开启私有 Bucket 回源的权限。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/G0K6M4.png?x-oss-process=style/80&quot; alt=&quot;私有Bucket回源&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%85%8D%E7%BD%AE-refer-%E9%98%B2%E7%9B%97%E9%93%BE&quot; tabindex=&quot;-1&quot;&gt;配置 Refer 防盗链&lt;/h3&gt;
&lt;p&gt;CDN 防盗是有必要的，如果你的图片被别处盗用，会增加不必要的流量。所以推荐设置 Refer 防盗白名单，只对允许指定的域名访问。例如我设置了除了我自己博客以外的一些 RSS Reader 以及 V2EX 可以访问：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/ZST89j.png?x-oss-process=style/80&quot; alt=&quot;Refer 防盗链&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E4%BD%BF%E7%94%A8-upic-%E6%96%B9%E4%BE%BF%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87&quot; tabindex=&quot;-1&quot;&gt;使用 uPic 方便上传图片&lt;/h2&gt;
&lt;p&gt;以上的准备都做完后，你已经拥有了一个图床。现在就需要一个方便的工具把图片上传到图床。如果你用 macOS, 我推荐开源的 &lt;a href=&quot;https://github.com/gee1k/uPic&quot;&gt;uPic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/cqSMIR.gif&quot; alt=&quot;upic&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%85%8D%E7%BD%AE-upic&quot; tabindex=&quot;-1&quot;&gt;配置 uPic&lt;/h3&gt;
&lt;p&gt;添加阿里云 OSS 配置：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/AisKxQ.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这里需要填 AccessKey 和 SecretKey：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/VkPsCc.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;你可以在 &lt;a href=&quot;https://ram.console.aliyun.com/users&quot;&gt;RAM 控制台&lt;/a&gt; 创建一个用户，然后创建 AccessKey.&lt;/p&gt;
&lt;p&gt;创建后给这个 AccessKey 授 AliyunOSSFullAccess 这个权限：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/m3KaPP.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h1 id=&quot;%E6%88%91%E5%8D%9A%E5%AE%A2%E7%9A%84-cdn-%E7%94%A8%E9%87%8F&quot; tabindex=&quot;-1&quot;&gt;我博客的 CDN 用量&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/uPic/Pit7QZ.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;从 2019 年 10 月 1 号至 2020 年 3 月 7 号总计 11.28GB. 按流量计费，每 GB 0.24 元，也才几块钱。&lt;/p&gt;
&lt;h1 id=&quot;%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5&quot; tabindex=&quot;-1&quot;&gt;相关链接&lt;/h1&gt;
&lt;p&gt;如果你觉得本指南受用，可以通过 &lt;a href=&quot;https://www.aliyun.com/minisite/goods?userCode=n7qobwbd&quot;&gt;此链接&lt;/a&gt; 注册阿里云。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>好产品帮助用户变得更好 - 读 Badass: Making Users Awesome</title>
    <link href="https://lutaonan.com/blog/read-badass-making-users-awesome/"/>
    <updated>2020-03-01T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/read-badass-making-users-awesome/</id>
    <content type="html">&lt;p&gt;如何让用户愿意花钱购买你的软件 / 服务 ？&lt;/p&gt;
&lt;p&gt;如果你也在思考这个问题，那么你一定要读一读 Kathy Sierra 写的 Badass: Making Users Awesome (中文译作&lt;a href=&quot;https://lutaonan.com/go/shop/badass-making-users-awesome&quot;&gt;《 用户思维+ 好产品让用户为自己尖叫 》&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;想象一下，有一天，你看到有人在网上写了一篇如何记账和理财的文章，读罢，备受鼓舞，文章的作者在里面提到了如何用一个 App 高效做记账，于是你买下了这个 App.&lt;/p&gt;
&lt;p&gt;背后驱使你买这个 App 的原因是什么？是因为你觉得这个 App 很不错？不，是因为你想成为那个善于理财的人。&lt;/p&gt;
&lt;p&gt;这就是这本书的观点 —— 用户购买你的产品，他在意的是用了你的产品，他成为了什么样的人。所以，如何打造一个可以持续获得用户的产品，秘诀在于如何让用户通过你的产品成为他想成为的人。&lt;/p&gt;
&lt;p&gt;这个观点让我耳目一新，我可以从自己或者从别人的购买行为看出这样的本质。我忽然发现，以往在思考如何打造一个用户觉得有价值的产品，我太专注在思考工具本身的功能应该怎么做，完全忽略了我的产品如何帮助我的目标用户变得更好。&lt;/p&gt;
&lt;p&gt;例如，我总是在想着做一个博客平台，读完 Kathy 的这本书，我发现，我太过于思考从功能上，我要提供给用户什么。我想，我要提供 Podcast 托管，我要提供最快的 CDN, 我要支持自定义域名。但是，整个互联网，博客平台已经有很多，这些功能，别的平台可以提供。用户为什么选择我？&lt;/p&gt;
&lt;p&gt;读完这本书，我会这样去思考：我如果做一个新的博客平台，用户可以因为我的平台，成为一个什么样的人？这样一来，问题就变成了：我的博客平台如何让用户成为一个优秀的独立博客主？我的博客平台如何让用户成为一个成功的 Podcast 节目主？&lt;/p&gt;
&lt;p&gt;我们总是提供工具，但是往往忽略了如何让用户用好我们的工具，使他们变得 Awesome.&lt;/p&gt;
&lt;p&gt;让用户用好我们的工具，是零经济成本但最有效的宣传工具。因为这一些 Badass User (通俗来说就是「玩得溜」的那些用户，我姑且称为「用家」)，他们自己会帮你宣传。&lt;/p&gt;
&lt;p&gt;当一个玩摄影的朋友告诉你，「这个镜头太牛逼了，你看我用它拍的这些照片，太好看了。」你可能会对这个镜头心动，晚上就回家搜一搜这个镜头，然后下单。&lt;/p&gt;
&lt;p&gt;这位朋友嘴上说的是「这个 xx 太牛逼了，我用它 xxx」，事实上他想表达的是「我太牛逼了，我用它 xxx」。&lt;/p&gt;
&lt;p&gt;只要你帮助你的用户通过你的产品变得更「牛逼」，就会有越来越多这些「用家」帮你宣传，就会有更多人购买你的产品，希望自己变得「牛逼」。也就是常说的「种草」。&lt;/p&gt;
&lt;p&gt;然而他们宣传的方式不一定是直接跟身边的人说这个工具有多好，而是自己如何使用这个工具，做出了什么样的事。如果你有关注「&lt;a href=&quot;https://sspai.com/&quot;&gt;少数派&lt;/a&gt;」这个媒体，少数派是这种案例的典型。你会发现上面几乎所有的文章，比如关于 Ulysses 这个 App 的文章，这些作者不会单纯去写这个工具怎么样，而是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《为什么我选择用 Ulysses 写了一本小说》（我如何用 Ulysses 写了一本小说）&lt;/li&gt;
&lt;li&gt;《搭建 Ulysses 学术写作之公式输入》（我如何用 Ulysses 学术写作）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;越来越多的人会因为看到这些分享，希望自己可以用 Ulysses 也成为像他们这样成为一个写作者。&lt;/p&gt;
&lt;p&gt;简单地来说，就是想一想，你的产品如何让你的用户在和朋友聊天的时候体现自己的 Awesome.&lt;/p&gt;
&lt;p&gt;这本书也提到了在帮助用户成为「用家」的过程中遇到的问题以及解法，还从如果成为某个领域的专家作了一些科学上的分析（但我觉得这一部分的知识可以通过读 Atomic Habits 学到更多）。&lt;/p&gt;
&lt;p&gt;我知道这本书是在翻 &lt;a href=&quot;http://egghead.io/&quot;&gt;Egghead.io&lt;/a&gt; 的创始人 John Lindquist 的&lt;a href=&quot;https://mobile.twitter.com/shrutikapoor08/status/1230560418369658881&quot;&gt;这条 Retweet&lt;/a&gt;无意中看到的，我觉得一定是本很好的书，他才会给每一个 Egghead 讲师送这本书。&lt;/p&gt;
&lt;p&gt;我早在读 Egghead 的讲师指南的时候就发现 Egghead 会直接给每个讲师一套完整的录音设备（因为做 screencast 录音质量很重要）。我当时震惊于 Egghead 的阔绰。读完这本书，我就明白，即使需要成本，一套好的录音设备可以让这些用户（讲师）录制高质量的 screencast. 创始人就在践行这本书的理念。&lt;/p&gt;
&lt;p&gt;注：本书的作者 Kathy Sierra 也是 Head First Java 的作者。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/go/shop/badass-making-users-awesome&quot;&gt;《 用户思维+ 好产品让用户为自己尖叫 》购买链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>从「后端现在已经看不懂前端了」说起</title>
    <link href="https://lutaonan.com/blog/to-frontend-prejudicers/"/>
    <updated>2020-01-07T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/to-frontend-prejudicers/</id>
    <content type="html">&lt;p&gt;V2EX 这两天有一篇这样的帖子：&lt;a href=&quot;https://www.v2ex.com/t/635386#&quot;&gt;《说句实话，我后端现在已经看不懂前端了，太难了》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文内容是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;看不懂惹，肿么办，最近在学 react，完全抓瞎。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后又附加了内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一直用的 jquery，手动找位置然后对应 dom 操作，现在各种前端各种依赖，一会 route 一会 webpack 的 给爷整蒙了都。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;类似这样的帖子多年来数不胜数，但这次评论区的评论比较典型，所以我决定这次不再沉默。当然，本文并非针对帖子作者。&lt;/p&gt;
&lt;p&gt;对于那些抱怨前端「看不懂」的网友，我们应该问他们一个问题：&lt;strong&gt;为什么前端就应该是谁都能看懂？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这些网友从来不会抱怨别的领域的代码看不懂，比如他们不会说「我一个前端已经看不懂后端了」，或者「我一个后端已经看不懂 iOS」了。&lt;/p&gt;
&lt;p&gt;所以在这些网友心中，前端代码就是要谁都看得懂才是正常的。因为谁都应该看得懂 HTML, 谁都看得懂 CSS.&lt;/p&gt;
&lt;p&gt;显然，这群人对前端的认知还活在过去，他们一边享受着用 Web 技术做出来应用，一边意淫着这些包含复杂业务逻辑的 Web 应用靠 HTML 和 Vanilla JS (原生 JS) 就能写成。&lt;/p&gt;
&lt;p&gt;换句话说，这群人最大的问题在于，他们意识不到 GUI 开发 (Graphic User Interface Programming) 是一个从图形界面被发明开始就一直在被研究的独立领域，而 Web 前端只是 GUI 开发的其中一个分支而已。&lt;/p&gt;
&lt;p&gt;这群人没有意识到到底什么是「前端」。前端就是写 HTML / JavaScript / CSS  吗？不，前端应该泛指那些需要编写 GUI 的技术。在我看来，写 iOS  / Android 应用和写 Web 前端没有本质上的区别，区别只是语言和平台，背后处理的问题是一模一样的：&lt;strong&gt;如何实现视觉和交互 -&amp;gt; 交互如何触发逻辑 -&amp;gt; 逻辑如何影响视觉的变化&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;如果认为浏览器识别的是 HTML 所以认为前端应该谁都能看懂、门槛低，进而得出前端目前的工作流是问题复杂化的结果，就如同因为 Android 的 UI 是用 XML 写的就认为 Android 门槛低一样不成立得可笑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;对 GUI 开发难点的不了解是导致这种误解的最主要原因，以网友「 &lt;a href=&quot;https://www.v2ex.com/t/635386#r_8434047&quot;&gt;avastms&lt;/a&gt; 」提出的评论为典型：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是前端圈长期逆淘汰的结果。&lt;/p&gt;
&lt;p&gt;模板混代码里这种 PHP 宗教行为就别提了。&lt;/p&gt;
&lt;p&gt;个人认为因为 javascript 语言的部分原因，前端很少有人懂什么是继承，什么是类，实例到底啥意思，更别谈良好维护引用了。&lt;/p&gt;
&lt;p&gt;什么 redux,什么 vuex 根本就是莫名其妙，不就是事件监听吗，像 Node.js 那样 EventEmitter 多么清晰，非得自己造概念。&lt;/p&gt;
&lt;p&gt;画虎不成反类犬，凡是有这套什么状态管理逻辑的，代码完全不可读。&lt;/p&gt;
&lt;p&gt;前端自己也是不争气，不用别人的这些狗概念，自己就不会写代码了吗？&lt;/p&gt;
&lt;p&gt;没有什么 redux，自己就不会管理自己的属性了吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;他说：「模板混代码里这种 PHP 宗教行为就别提了」，想必他在说 JSX. JSX 刚开始出来就充满争议，但人们最终会发现，JSX 是函数式 GUI 开发最易读写的方案。实际上，他完全可以选择不使用 JSX，这样去写代码：&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Component &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘div’&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘p’&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‘hello world’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;‘p’&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ‘&lt;span class=&quot;token constant&quot;&gt;I&lt;/span&gt; am Randy’&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是，这位网友大概更愿意读这样的代码：&lt;/p&gt;
&lt;pre class=&quot;language-jsx&quot;&gt;&lt;code class=&quot;language-jsx&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Component &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;		&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;hello world&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;		&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;I am Randy&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token plain-text&quot;&gt;&lt;br /&gt;	&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;觉得这样的写法恶心，多数是因为不知道 JSX 这个语法糖的背后是什么。&lt;/p&gt;
&lt;p&gt;事实上没有人阻止任何人不用 JSX, 或者看看 Flutter 就大概知道没有 JSX 的 React 会是什么样子。&lt;/p&gt;
&lt;p&gt;作为补充，这是希望 Flutter 引入 JSX 的相关讨论：&lt;a href=&quot;https://github.com/flutter/flutter/issues/15922&quot;&gt;Consider JSX-like as React Native · Issue #15922 · flutter/flutter · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;至于提到的 Redux 和 Vuex, 证明这位网友根本不知道 EventEmitter 和 Reactive 的区别。这里就不展开讨论了。&lt;/p&gt;
&lt;p&gt;为什么我们宁愿用 JSX 这种折中方案也不愿意放弃函数式编程，是因为声明式(Declarative) 是编写 GUI 最好的方法。复杂的 GUI 应用包含复杂的状态，人脑在处理复杂的状态绝对不比计算机在行，我们尽可能地把这些状态交给计算机做，函数式编程就是我们实现这个目标的工具。&lt;/p&gt;
&lt;p&gt;Elm 的作者写过一篇名叫 &lt;a href=&quot;https://elm-lang.org/assets/papers/concurrent-frp.pdf&quot;&gt;Concurrent FRP&lt;/a&gt; 的论文，讲述了函数式响应式编程 (Functional Reactive Programming) 在 GUI 开发中的历史背景和应用。&lt;/p&gt;
&lt;p&gt;那些喜欢说「jQuery 一把梭」的网友，要么遇到的业务很简单，要么是在自虐。我见过写外挂用易语言一把梭的，但没听说过 Adobe 写 PhotoShop 用 Visual Basic 一把梭。&lt;/p&gt;
&lt;p&gt;有些人，能接受 Maven, Gradle 的不完美，也知道什么场景应该用什么技术栈，但一旦开始写点前端代码，就认为应该有一个神一样的、完美的、还没有学习成本的构建工具，然后 Twitter, V2EX 抱怨一番，却不愿意认真学一学前端这个领域的知识。&lt;/p&gt;
&lt;p&gt;不要妄想有一个睡醒就突然会用的构建工具。说实话，Webpack 不需要任何配置就能用，再不行试试号称 zero configuration (零配置) 的 &lt;a href=&quot;https://parceljs.org/&quot;&gt;Parcel&lt;/a&gt;, 用 TypeScript, 引入 CSS /  LESS / SASS 通通不需要配置，跑起来就行。但那又如何呢，那些不愿意学习又想出活的网友们不懂的不是运行 &lt;code&gt;webpack dev&lt;/code&gt; 这个命令，而是根本不懂这个命令背后解决的是什么问题。&lt;/p&gt;
&lt;p&gt;一个人要锤子锤个钉子，结果大家都说雷神的锤子很牛逼。这个人听了，上来就要用雷神的锤子，结果拿都拿不起来。然后网上发个贴：「根本不懂为什么雷神要搞个这么重的锤子，给爷整蒙了都」。底下评论：「我工具锤一把梭！」楼下再附和：「雷神搞这个锤就是为了装逼」。&lt;/p&gt;
&lt;p&gt;奉劝各位，把抱怨转化成求知，没有一个领域是不需要学习成本的，不管是做技术还是技术以外的领域，是分工和市场经济让各位觉得一切理所当然，然而像磨刀这样看上去简单的动作，也不是每个人都能磨好一把刀。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2019 年终总结：慢慢变成别人眼中「食古不化」的「怪人」</title>
    <link href="https://lutaonan.com/blog/2019-summary/"/>
    <updated>2020-01-01T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2019-summary/</id>
    <content type="html">&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;2019 年 3 月我来到杭州，在蚂蚁金服开始了新的工作。这是我第一次在广东省外的地方生活。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/hang.jpg?x-oss-process=style/80&quot; alt=&quot;杭州的公路&quot; /&gt;&lt;/p&gt;
&lt;p&gt;新的环境，新的工作，对我来说是一个很大的挑战。挑战不在于如何适应一个新的环境，而在于在一个技术基建完备的环境里，如果业务难关不是技术可以解决的，那我的价值在哪里？在这个方面，我让很多对我抱有期望的人失望了。&lt;/p&gt;
&lt;p&gt;「我的价值是什么」是我不断寻找答案的命题，我不满足只作为一个消费者活在世上。只有作为生产者创造自己独特的价值，才让我觉得自己是这个世界的一员。&lt;/p&gt;
&lt;p&gt;我创造了很多，但好像只有写博客算是对别人来说稍微有价值的东西。现代的人又不怎么喜欢认真地看文字了，写好一篇文章的阅读量也不比同样内容的一个视频高。就连我一个关注了很久的独立博客博主，也转了型做视频。&lt;/p&gt;
&lt;p&gt;「写博客」似乎已经是一件看上去「食古不化」的事，而我竟然越来越「食古不化」了。有时候到一家餐厅，被告知没有餐牌，只能扫码点餐，我会反问，「如果我没有手机呢？」。&lt;/p&gt;
&lt;p&gt;我想，如果旁边正好有一位比我年轻十岁的客人听到我这样问，他心中也许会暗想，「x, 这个食古不化的傻x」。&lt;/p&gt;
&lt;p&gt;今年下半年我又因为不能忍受国内社交网络的反智内容和评论，微信和微博都变成了只写的状态，除非收到消息，微信几乎不怎么打开。此举极大地改善了我的心理健康。但在别人眼里，就是一个不合群的怪人。&lt;/p&gt;
&lt;p&gt;告别 2019，我就 25 岁了。这是一个不算年轻，也不算不年轻的岁数。如果开始「食古不化」是变老的征兆，那么我已经开始变老了。但如果不懒惰、不犬儒、不圆滑、不反智就是年轻，那么我将会永远年轻下去。&lt;/p&gt;
&lt;h2 id=&quot;%E6%95%B0%E6%8D%AE&quot; tabindex=&quot;-1&quot;&gt;数据&lt;/h2&gt;
&lt;h3 id=&quot;%E5%8D%9A%E5%AE%A2&quot; tabindex=&quot;-1&quot;&gt;博客&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/tg_image_2920303564.jpeg?x-oss-process=style/80&quot; alt=&quot;博客数据&quot; /&gt;&lt;/p&gt;
&lt;p&gt;今年博客的 UV 比上一年多了 10, 000. PV 比上一年多了 40, 000. &lt;a href=&quot;https://lutaonan.com/blog/one-year-of-bulking&quot;&gt;《健身一年》&lt;/a&gt; 问率最高。&lt;/p&gt;
&lt;p&gt;博客没有广告，所有收入来源于读者自发赞赏，今年收到的赞赏总共有约 200 元人民币。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/tg_image_1589983487.jpeg?x-oss-process=style/80&quot; alt=&quot;读者来信&quot; /&gt;&lt;/p&gt;
&lt;p&gt;共收到 11 封咨询信和很有心的感谢信。&lt;/p&gt;
&lt;h3 id=&quot;%E9%9F%B3%E4%B9%90&quot; tabindex=&quot;-1&quot;&gt;音乐&lt;/h3&gt;
&lt;p&gt;今年做了 6 首翻唱，上传在 &lt;a href=&quot;https://www.youtube.com/channel/UCFQUVJ0_ZGzvuX6GHl_cqsQ&quot;&gt;YouTube&lt;/a&gt; 和 &lt;a href=&quot;https://space.bilibili.com/20931693&quot;&gt;Bilibili&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/tg_image_79326384.jpeg?x-oss-process=style/80&quot; alt=&quot;YouTube 首页&quot; /&gt;&lt;/p&gt;
&lt;p&gt;播放量最高的是《奉献》和《黄昏》。&lt;/p&gt;
&lt;h3 id=&quot;%E9%98%85%E8%AF%BB&quot; tabindex=&quot;-1&quot;&gt;阅读&lt;/h3&gt;
&lt;p&gt;今年读的书里有以下几本想推荐给大家：&lt;/p&gt;
&lt;p&gt;《学会提问：批判式思维指南》（&lt;a href=&quot;https://book.douban.com/subject/20428922/&quot;&gt;豆瓣&lt;/a&gt; | &lt;a href=&quot;https://lutaonan.com/go/shop/critical-thinking&quot;&gt;购买&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&amp;lt;p class=&amp;quot;text-sm&amp;quot;&amp;gt;这本书提到了几个常见的逻辑谬误，以及如何去看待别人的观点，如何得出自己思考过的结论。这本书没有教你应该相信谁，而是不应该相信谁。&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;《非暴力沟通》（&lt;a href=&quot;https://book.douban.com/subject/3533221/&quot;&gt;豆瓣&lt;/a&gt; | &lt;a href=&quot;https://lutaonan.com/go/shop/nonviolent-communication&quot;&gt;购买&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&amp;lt;p class=&amp;quot;text-sm&amp;quot;&amp;gt;
&amp;lt;a href=&amp;quot;&lt;a href=&quot;https://lutaonan.com/blog/nonviolent-communication&quot;&gt;https://lutaonan.com/blog/nonviolent-communication&lt;/a&gt;&amp;quot;&amp;gt;我的书评&amp;lt;/a&amp;gt;
&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;《颓废与沉默》（&lt;a href=&quot;https://book.douban.com/subject/26575643/&quot;&gt;豆瓣&lt;/a&gt; | &lt;a href=&quot;https://lutaonan.com/go/shop/tui-fei-yu-chen-mo&quot;&gt;购买&lt;/a&gt;）&lt;/p&gt;
&lt;p&gt;&amp;lt;p class=&amp;quot;text-sm&amp;quot;&amp;gt;这本书结合中国发生的实例解释了中国存在的「犬儒主义」，和它产生的原因和影响。&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%B6%88%E8%B4%B9&quot; tabindex=&quot;-1&quot;&gt;消费&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kindle Oasis&lt;/strong&gt; ( &lt;a href=&quot;https://lutaonan.com/go/shop/kidle-oasis&quot;&gt;购买&lt;/a&gt; ) 替换了我的 Kindle Paperwhite. 手感很好，放裤袋很轻松。是我今年买得最值的产品。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;黑卡 3&lt;/strong&gt; ( &lt;a href=&quot;https://lutaonan.com/go/shop/rx100m3&quot;&gt;购买&lt;/a&gt; ) 替换了我的黑卡 1, 有可以旋转的屏幕，自己拍视频的时候轻松多了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;iPad Pro&lt;/strong&gt; ( &lt;a href=&quot;https://lutaonan.com/blog/ipad-pro-11-review&quot;&gt;我的评测&lt;/a&gt; ) 替换了我的 iPad mini 2. 主要用来看微信读书，睡前浏览各个咨询网站。最后悔是没有买蜂窝版。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E6%AF%8F%E5%A4%A9%E9%83%BD%E7%9C%8B%E7%9A%84%E5%86%85%E5%AE%B9&quot; tabindex=&quot;-1&quot;&gt;每天都看的内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.v2ex.com/&quot;&gt;V2EX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hacker News&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://theinitium.com/&quot;&gt;端传媒&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Podcast (睡前听)&lt;/li&gt;
&lt;li&gt;Feedly (只订阅一些独立博客)&lt;/li&gt;
&lt;li&gt;YouTube&lt;/li&gt;
&lt;li&gt;Twitter&lt;/li&gt;
&lt;li&gt;Instagram&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E6%94%BE%E7%A9%BA%E7%9A%84%E6%97%B6%E5%80%99%E7%9C%8B%E7%9A%84%E5%86%85%E5%AE%B9&quot; tabindex=&quot;-1&quot;&gt;放空的时候看的内容&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sspai.com/&quot;&gt;少数派&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://dgtle.com/&quot;&gt;数字尾巴&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%85%B3%E4%BA%8E-2020&quot; tabindex=&quot;-1&quot;&gt;关于 2020&lt;/h2&gt;
&lt;p&gt;创造更多价值吧。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>为了你爱的人，读一读《非暴力沟通》</title>
    <link href="https://lutaonan.com/blog/nonviolent-communication/"/>
    <updated>2019-12-25T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/nonviolent-communication/</id>
    <content type="html">&lt;p&gt;我和父母的关系很糟糕，在小时候，我们之间的「交互」方式大部分是命令、教训，严重的时候甚至打一顿。我很讨厌被命令去做家务。&lt;/p&gt;
&lt;p&gt;成年以后，即使脱离了原生家庭，但无论是工作伙伴之间的合作，还是处理亲密关系，都偶尔会出现矛盾，形成无效的沟通，甚至产生情绪。&lt;/p&gt;
&lt;p&gt;很幸运我读到了&lt;a href=&quot;https://lutaonan.com/go/shop/nonviolent-communication&quot;&gt;《非暴力沟通》&lt;/a&gt;这本书，让我发现我在日常接触到的沟通中，多少隐藏着无形的暴力。&lt;/p&gt;
&lt;p&gt;全书围绕非暴力沟通的四个要素进行讲解：&lt;strong&gt;观察、感受、需要、请求&lt;/strong&gt;。如果沟通没有这些要素，那么这些沟通最终的结果很可能是情绪化的收场，又或者成为了压死骆驼前的每一根稻草，总有一天爆发。&lt;/p&gt;
&lt;p&gt;在一段亲密关系中，我们很容易听到或自己说到过这样的话：「你怎么每次都这样」。这样的一句话，很容易使对方产生抵触情绪，导致情绪化的争吵。因为这句话也只是单纯的情绪发泄和评价，不能指望用这样情绪化的沟通去解决实际存在的问题。它缺少了非暴力沟通的四个要素。&lt;/p&gt;
&lt;p&gt;如果读完《非暴力沟通》，你可能再也不会说出「你怎么每次都这样」这样的话。你会先说出你的&lt;strong&gt;观察&lt;/strong&gt;：在这个月，你已经是第 3 次这样做了。然后说出你的&lt;strong&gt;感受&lt;/strong&gt;：我觉得你这样做让我觉得你不是一个靠谱的人。再说出你的&lt;strong&gt;需要：&lt;/strong&gt; 我想要一个靠谱的另一半而不是这样的人。最后说出你的&lt;strong&gt;请求&lt;/strong&gt;：你可以不再这样了吗？&lt;/p&gt;
&lt;p&gt;很多人没有区分「观察」和「评论」，像有人常说「那个产品经理真是个脑残」，这是一种评论。评论对于沟通是没有帮助的，他只会让别人厌恶，抵触。我们应该说出具体的观察：那个产品经理做的大部分需求都会改很多次，而且功能上线后用户基本都是负面反馈。&lt;/p&gt;
&lt;p&gt;我们也常常忽略、或者故意隐藏了自己的感受和需要。在沟通中，让对方清楚自己的感受和需要是很重要的。最常见的就是在亲密关系当中，一方总会把自己的感受和需要埋在心中自己消化，另一方事实上并不知道对方的感受，潜移默化就造成了关系破裂的危机。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;暴力的根源在于人们忽视彼此的感受与需要，而将冲突归咎于对方。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;非暴力沟通的第四个要素：请求，也很重要。对方即使清楚你的感受和需要，但不一定知道应该怎么做。恋爱中，一方需要陪伴，那么应该直接说出具体的请求：工作日每晚至少花两个小时在一起。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我们将自己想要的回应讲得越清楚，就越有可能得到理想的回应。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在工作中「请求」同样重要。如果在会议中，发言的人在最后不明确说出想要得到与会人员怎么样的反应，只问大家「有什么想说的」，那很可能大家就没有什么想说的。但如果明确地问：「对于这个方案，大家有没有想到可能存在的缺点？」，那么就更有可能得到你想要的回应。&lt;/p&gt;
&lt;p&gt;但如果不说出感受和需要，直接说出请求，就会像一种命令。例如我小时候母亲让我做家务的时候，对我只有一句话：「快去做清洁！」。对我来说是一种不得不服从的命令，服从只是因为她是我母亲，而不是她的感受和她的需要，会让我十分抵触。&lt;/p&gt;
&lt;p&gt;除了非暴力沟通的四个要素，书里最后也提到了充分表达感激的重要性。对别人表达感激也有三个要素：说出对我们有益的行为；我们哪些需要得到了满足；我们是什么样的心情。&lt;/p&gt;
&lt;p&gt;这就是为什么对于我来说，比起别人说「你真牛逼」，我更愿意看到博客读者来信告诉我，我的哪篇文章的哪一个点，让他得到了什么样的启发。&lt;/p&gt;
&lt;p&gt;有一次我在看 React Conf, 很喜欢其中一位讲师，在 Twitter 上提到了他，他说「That means a lot to me」, 我意识到，不能吝啬表达自己的感激。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/1577254096918-bdc4d633-9aa3-4621-b2b7-cce0cd8586c3.png?x-oss-process=style/80&quot; alt=&quot;Twitter 截图&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我想，如果在我的成长环境中，我的父母也掌握了非暴力沟通的技巧，我们彼次都懂得表达彼此的观察、感受和需要。也许不至于让我对原生家庭有那么多负面的情绪。&lt;/p&gt;
&lt;p&gt;所以，为了你爱的人，应该读一读&lt;a href=&quot;https://lutaonan.com/go/shop/nonviolent-communication&quot;&gt;《非暴力沟通》&lt;/a&gt;。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>录翻唱需要哪些设备</title>
    <link href="https://lutaonan.com/blog/how-to-record-cover/"/>
    <updated>2019-12-15T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/how-to-record-cover/</id>
    <content type="html">&lt;p&gt;有朋友问到如果也想录一些翻唱，需要哪些设备。在此写一篇设备选择指南。&lt;/p&gt;
&lt;p&gt;整个录音的流程是这样的：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/Untitled%20%28Draft%29-1%203.jpg?x-oss-process=style/80&quot; alt=&quot;录音流程&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E8%BD%AF%E4%BB%B6&quot; tabindex=&quot;-1&quot;&gt;软件&lt;/h2&gt;
&lt;p&gt;无论是否需要录制乐器，软件都是必不可少的，也就是我们常说的 DAW (Digitle Audio Workstation). DAW 的作用是把录音进行编辑、混音，生成音频文件。&lt;/p&gt;
&lt;p&gt;常见的 DAW 有 Cubase, FL Studio, Logic Pro, 等等。各个 DAW 都有各自的特点。一般来说都有 Free Trial, 自己用用看再选择也不迟。&lt;/p&gt;
&lt;p&gt;推荐用 Mac 的朋友先用 Garageband 玩一段时间，因为它是免费的，但是功能对于录翻唱是很够用的。等进阶的时候再买 Logic Pro. 两者切换成本很低。&lt;/p&gt;
&lt;p&gt;我的头几个翻唱录音用的也是用 Garageband, 到后来才买了 Logic, 如 &lt;a href=&quot;https://www.bilibili.com/video/av54378371&quot;&gt;《奉献》&lt;/a&gt; 就是用 Garageband 做的。&lt;/p&gt;
&lt;p&gt;就录音来说，对比 Garageband, Logic Pro 最好的地方在于一条录音音轨可以保存多条录音，然后再选取不同的片段组合。如果用 Garageband, 同一条音轨录第二次会直接覆盖掉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/DSC02813.JPG?x-oss-process=style/80&quot; alt=&quot;Logic Pro&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如果预算不多，那么就用 Garageband 好了。如果要买 Logic Pro, 可以试试 &lt;a href=&quot;https://www.apple.com/hk-zh-hiEd/shop/product/BMGE2Z/A/pro-app-%E6%95%99%E8%82%B2%E5%A5%97%E8%A3%9D&quot;&gt;Apple 的 Pro App 教育套装&lt;/a&gt;，1000 出头就能有 Logic Pro + Final Cut Pro, 这两个软件单独买各自都要 1000 多了。&lt;/p&gt;
&lt;h2 id=&quot;%E7%A1%AC%E4%BB%B6&quot; tabindex=&quot;-1&quot;&gt;硬件&lt;/h2&gt;
&lt;h3 id=&quot;%E9%BA%A6%E5%85%8B%E9%A3%8E&quot; tabindex=&quot;-1&quot;&gt;麦克风&lt;/h3&gt;
&lt;p&gt;单纯是录伴奏 + 人声，成本是最低的。硬件只要买一个麦克风就够了。所以先讲讲麦克风怎么选。&lt;/p&gt;
&lt;p&gt;麦克风分两种，一种是动圈麦克风，一种是电容麦克风。各自的原理可以自行 Google. 简单来说，动圈的优点是不贵、耐操、敏感度没有电容的高，适合在相对嘈杂的场合使用。而电容的灵敏度高，适合安静的场合用。&lt;/p&gt;
&lt;p&gt;电容麦克风一般需要幻象供电 (Phantom) 才能使用，这就意味着要用电容麦克风，同时也要搭配一个能幻象供电的设备（例如音频介面）。&lt;/p&gt;
&lt;p&gt;不过像 &lt;a href=&quot;https://lutaonan.com/go/shop/blue-yeti&quot;&gt;Blue Yeti&lt;/a&gt; 这种爆款电容麦克风是个例外，它是电容麦克风，但只要插 USB 就可以用了。&lt;/p&gt;
&lt;p&gt;所以，如果你预算有限，环境相对不太安静，那就选动圈。我自己用的动圈是&lt;a href=&quot;https://lutaonan.com/go/shop/sm-58&quot;&gt;舒尔 SM58&lt;/a&gt;, 我买这支动圈是因为我看很多现场用的都是这支。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/DSC02811.JPG?x-oss-process=style/80&quot; alt=&quot;舒尔 SM58&quot; /&gt;&lt;/p&gt;
&lt;p&gt;要听 SM58 的效果，可以听听我&lt;a href=&quot;https://www.bilibili.com/video/av19612030&quot;&gt;和朋友录的一个即兴视频&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;如果预算还行，也追求很细腻的录音效果，就选电容。不想买音频介面但想用电容，就买上面提到的 Blue Yeti.&lt;/p&gt;
&lt;p&gt;如果也有打算用有幻象供电的音频介面，那可以买我现在在用的 &lt;a href=&quot;https://lutaonan.com/go/shop/rode-nt1&quot;&gt;RODE NT1&lt;/a&gt;. 我的翻唱都是用 RODE 录的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/DSC02803.JPG?x-oss-process=style/80&quot; alt=&quot;RODE NT1&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如果需要录人声和乐器，那么就必须要买音频介面了。&lt;/p&gt;
&lt;h3 id=&quot;%E9%9F%B3%E9%A2%91%E4%BB%8B%E9%9D%A2&quot; tabindex=&quot;-1&quot;&gt;音频介面&lt;/h3&gt;
&lt;p&gt;音频介面是什么呢。虽然他叫 Audio interface, 但它实际上可以理解为是一个 Adapter, 外界的各种音频输入要转换成软件可以识别的信号，就要靠这个音频介面去完成。&lt;/p&gt;
&lt;p&gt;像吉他、麦克风、键盘等等乐器的输入都要接到一个音频介面，音频介面再接到电脑，然后用 DAW 把声音都录下来。&lt;/p&gt;
&lt;p&gt;入门级的音频介面最主要是要选择多少个输入和输出，这也取决于你要录多少乐器。&lt;/p&gt;
&lt;p&gt;例如，如果只需要接一个麦克风，那么只要一个输入就够了。但如果既要录麦克风，又要接一支吉他，那么就需要两个输入。&lt;/p&gt;
&lt;p&gt;我自己用的是 &lt;a href=&quot;https://lutaonan.com/go/shop/scarlet-2i2&quot;&gt;Scarlet 2i2&lt;/a&gt;, 两个输出两个输入，带 48V 的幻象供电。但我一般只用一个输入，就是麦克风输入。键盘不用走音频介面，直接插 USB. 吉他也是麦克风直接录的。输出倒是需要两个，一个输出到监听音箱，一个输出到监听耳机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/DSC02821.JPG?x-oss-process=style/80&quot; alt=&quot;Scarlet 2i2&quot; /&gt;&lt;/p&gt;
&lt;p&gt;如果你想直接在 iPhone 或 iPad 录音，可以用 Roland 的 &lt;a href=&quot;https://lutaonan.com/go/shop/go-mixer&quot;&gt;GO MIXER&lt;/a&gt;, 这个我之前也买过，把 SM58 接到 GO MIXER 然后接手机，这样去录全民 K 歌。后来不玩这种 App 了就再也没用过这个 MIXER.&lt;/p&gt;
&lt;p&gt;这些硬件的设备其实都可以在闲鱼买二手的，没有太大必要买全新，尤其是音频介面。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB&quot; tabindex=&quot;-1&quot;&gt;延伸阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=o2Q0l5xbZfw&quot;&gt;《一次搞懂，在家做音樂需要的基本配備！》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=SSIuZxqVWKE&quot;&gt;如何買你的第一支麥克風？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>博客改版及 Tailwind CSS 实践</title>
    <link href="https://lutaonan.com/blog/what-is-tailwindcss-and-how-did-i-apply-it-on-my-blog/"/>
    <updated>2019-11-12T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/what-is-tailwindcss-and-how-did-i-apply-it-on-my-blog/</id>
    <content type="html">&lt;p&gt;如您所见，本博客在前不久进行了微小的改版，改版的目的是做一个可以承载更多元内容的版式，如无意外，在未来的不久，我会增加「摄影」和「乐评」两个新的版块。&lt;/p&gt;
&lt;p&gt;但本文想要讨论的是 &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind CSS&lt;/a&gt; 这个框架，我用 Tailwind CSS 重写了整个博客的 UI, 减少了 90% 的 CSS 代码，开发时间加起来只有短短数小时，就完成了这个 Mobile First 的 Redesign (如果这也算 design 的话).&lt;/p&gt;
&lt;p&gt;传统的 CSS 框架 —— 如 &lt;a href=&quot;https://bulma.io/&quot;&gt;Bulma&lt;/a&gt; 之流，会预设很多组件样式，例如你只需给 &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; 一个 &lt;code&gt;btn&lt;/code&gt; 的 class name, 你就能得到一个好看的 button. 但 Tailwind 不同，它没有提供任何的预设样式，&lt;/p&gt;
&lt;p&gt;所以 Tailwind CSS 声称自己为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A utility-first CSS framework for rapidly building custom designs.&lt;/p&gt;
&lt;p&gt;Instead of opinionated predesigned components, Tailwind provides low-level utility classes that let you build completely custom designs without ever leaving your HTML.&lt;/p&gt;
&lt;p&gt;—— Tailwind CSS 官网&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可以看出，Tailwind CSS 的目的不是直接把设计过的东西给你，而是帮助你更快地实现你的设计。我想大家或多或少也有对流行 UI 框架审美疲劳的感受，Tailwind CSS 就是为此而设的。&lt;/p&gt;
&lt;p&gt;为了解释 utility-first 的含义，我想了很久 utility 如何翻译比较信达雅，但我没有想到。所以下面我将通过亲身体验来解释 utility-first 这一词。&lt;/p&gt;
&lt;p&gt;一直以来我很怕写 CSS, 一是我没有什么设计天赋，我只有审美天赋 —— 我知道什么是好看，但不知道怎么做才会好看。二是写 CSS 很无聊 —— 为了给一个元素定位，我需要给 HTML 元素命名，然后到样式文件写一堆无聊又重复的 CSS, 但又不想用现有框架写好的设计。 最怕的是写响应式的页面，一想到 media query 我就很头疼。&lt;/p&gt;
&lt;p&gt;写自己博客的 CSS，时常遇到多个元素的样式有些交集：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;foo&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	字体颜色是黑色，需要加粗且文本居中&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;footer&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	字体颜色是灰色，需要加粗且文本居中&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;遇到这种情况，我有以下选择：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 css 文件里给 &lt;code&gt;.foo&lt;/code&gt; &lt;code&gt;.footer&lt;/code&gt; 都写上 &lt;code&gt;font-weight: bold; text-align: center;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;直接给这两个 div 写 inline css &lt;code&gt;font-weight: bold; text-align: center;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;给 &lt;code&gt;font-weight: bold; text-align: center;&lt;/code&gt; 单独写成一个 class, 应用到两个 div 上&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些选择我都不喜欢，我更喜欢像这样：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.text-center&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token selector&quot;&gt;.font-bold&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token property&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; bold&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;foo text-center font-bold&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	字体颜色是黑色，需要加粗且文本居中&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;footer text-center font-bold&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;	字体颜色是灰色，需要加粗且文本居中&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我喜欢像这样把一些常用的 CSS 原子化，这样可以直接通过 class name 复用到任何的元素。这些原子化的通用的 class 我们可以称为 utility. Tailwind CSS 提供的就是一些 utility, 这就是 utility-first 的含义。&lt;/p&gt;
&lt;p&gt;在我博客首页有一个这样的导航：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/%E6%88%AA%E5%B1%8F2019-11-12%E4%B8%8B%E5%8D%887.59.44.png&quot; alt=&quot;首页导航&quot; /&gt;&lt;/p&gt;
&lt;p&gt;HTML 结构如下：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;nav&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;navItem.title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;navItem in $themeConfig.navs&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;hover:text-gray-900 text-center&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;navItem.url&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ navItem.title }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ navItem.alias }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;nav&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 Tailwind CSS, 我不必费神给几个 div 命名，也不用给 div 写一堆 flex 布局，Tailwind CSS 提供了 flex 而已要用到的预设：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;nav&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;flex flex-col sm:flex-row w-full justify-center p-8&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:key&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;navItem.title&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-for&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;navItem in $themeConfig.navs&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;mt-6 sm:mt-0 sm:ml-6 sm:mr-6 text-gray-600&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;hover:text-gray-900 text-center&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;:href&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;navItem.url&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ navItem.title }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;text-center text-sm font-serif&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ navItem.alias.toUpperCase() }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;nav&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果你没看过 Tailwind CSS 的文档，你可能对这些 class 比较模糊，在这里我按顺序稍作解释：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;flex&lt;/code&gt;: 声明这是一个 flex&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flex-col&lt;/code&gt;: 声明 &lt;code&gt;flex-direction&lt;/code&gt; 为 &lt;code&gt;column&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;justify-center&lt;/code&gt;: 声明 &lt;code&gt;justify-content&lt;/code&gt; 为 &lt;code&gt;center&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p-8&lt;/code&gt;: padding 为 8 个单位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mt&lt;/code&gt;: margint-top / &lt;code&gt;ml&lt;/code&gt;: margin-left / &lt;code&gt;mr&lt;/code&gt;: margin-right&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;几个 class 就能完成 flex 布局。&lt;/p&gt;
&lt;p&gt;你还会注意到有 &lt;code&gt;hover:text-gray-900&lt;/code&gt;, 这代表在 hover 的时候，color 为 gray.&lt;/p&gt;
&lt;p&gt;这个导航在小屏幕时会变成竖向：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/nav-demo.gif&quot; alt=&quot;响应式导航&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在上面的代码可以看到，这是通过 &lt;code&gt;sm:flex-flow&lt;/code&gt; 实现的，意思是当屏幕大小超过 &lt;code&gt;sm&lt;/code&gt; 时，就用 &lt;code&gt;flex-flow&lt;/code&gt;. 在 Tailwind CSS 的 &lt;a href=&quot;https://tailwindcss.com/docs/responsive-design&quot;&gt;Responsive utility&lt;/a&gt; 里，预设了 &lt;code&gt;sm&lt;/code&gt;, &lt;code&gt;md&lt;/code&gt;, &lt;code&gt;lg&lt;/code&gt;, &lt;code&gt;xl&lt;/code&gt; 几个大小。这个 utility 减少了非常多的响应式设计代码量。&lt;/p&gt;
&lt;p&gt;除了自己博客的例子，我特意到 dribbble 随便搜了一个设计来实现：&lt;/p&gt;
&lt;p&gt;&amp;lt;img alt=&amp;quot;A singup form&amp;quot; class=&amp;quot;sm:w-2/3&amp;quot; src=&amp;quot;&lt;a href=&quot;https://gbstatic.djyde.com/blog/%E6%88%AA%E5%B1%8F2019-11-12%E4%B8%8B%E5%8D%887.27.31.png&quot;&gt;https://gbstatic.djyde.com/blog/截屏2019-11-12下午7.27.31.png&lt;/a&gt;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;br /&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;iframe height=&amp;quot;265&amp;quot; style=&amp;quot;width: 100%;&amp;quot; scrolling=&amp;quot;no&amp;quot; title=&amp;quot;tailwind-signup-form&amp;quot; src=&amp;quot;&lt;a href=&quot;https://codepen.io/djyde-1474473388/embed/RwwYPEv?height=265&amp;amp;theme-id=default&amp;amp;default-tab=html,result&quot;&gt;https://codepen.io/djyde-1474473388/embed/RwwYPEv?height=265&amp;amp;theme-id=default&amp;amp;default-tab=html,result&lt;/a&gt;&amp;quot; frameborder=&amp;quot;no&amp;quot; allowtransparency=&amp;quot;true&amp;quot; allowfullscreen=&amp;quot;true&amp;quot;&amp;gt;
See the Pen &amp;lt;a href=&#39;&lt;a href=&quot;https://codepen.io/djyde-1474473388/pen/RwwYPEv&quot;&gt;https://codepen.io/djyde-1474473388/pen/RwwYPEv&lt;/a&gt;&#39;&amp;gt;tailwind-signup-form&amp;lt;/a&amp;gt; by Randy
(&amp;lt;a href=&#39;&lt;a href=&quot;https://codepen.io/djyde-1474473388&quot;&gt;https://codepen.io/djyde-1474473388&lt;/a&gt;&#39;&amp;gt;@djyde-1474473388&amp;lt;/a&amp;gt;) on &amp;lt;a href=&#39;&lt;a href=&quot;https://codepen.io/&quot;&gt;https://codepen.io&lt;/a&gt;&#39;&amp;gt;CodePen&amp;lt;/a&amp;gt;.
&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;Tailwind CSS 满足了我几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以方便地做到响应式设计&lt;/li&gt;
&lt;li&gt;丰富的预设，如字体大小，预设颜色&lt;/li&gt;
&lt;li&gt;不用再想 class name&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第二点很重要，也是为什么使用 Tailwind CSS 可以很容易做到好看的设计。读过 &lt;a href=&quot;https://refactoringui.com/book/&quot;&gt;Refactoring UI&lt;/a&gt; 这本小书里面提到，Bad design 有时候是因为间距大小，字体大小，颜色的不统一导致的。如果没有一个固定的 Design system 规定了可以选用的这些参数，设计容易变得混乱。例如一个页面里面如果同时有 12px, 11px, 10px, 9px 大小的字，就会很难看。&lt;/p&gt;
&lt;p&gt;Tailwind CSS 的 utility 对大小都有预设，像字体大小有 &lt;code&gt;text-sm&lt;/code&gt;, &lt;code&gt;text-md&lt;/code&gt;, &lt;code&gt;text-lg&lt;/code&gt; 等等，颜色有 &lt;code&gt;gray&lt;/code&gt;, &lt;code&gt;pink&lt;/code&gt;, &lt;code&gt;orange&lt;/code&gt; 等等（当然有可以自行扩展），这其实已经是一个很好的 Design system.&lt;/p&gt;
&lt;p&gt;但 Tailwind CSS 毕竟不是一个组件框架，开发现代 Web App 的时候，只有 CSS 显然是不够的。如果选择 Tailwind CSS, 那就代表很有可能很多 (React, Vue) 组件需要自己动手实现。&lt;/p&gt;
&lt;p&gt;另一个需要注意的地方是使用 Tailwind CSS 有一定的学习曲线，刚开始不可避免要不断翻文档，但是用她做一个页面之后基本就记住了，我的经验是用了一两天就不太需要看文档了。有点像学习 vim, 如果因为有一定的学习曲线所以错过这么好的东西，那未免太可惜了。&lt;/p&gt;
&lt;p&gt;强烈推荐对 UI 设计感兴趣的朋友读一读 &lt;a href=&quot;https://refactoringui.com/book/&quot;&gt;Refactoring UI&lt;/a&gt;, Refactoring UI 的两位作者，一个是 Tailwind CSS 的作者，一个是 Tailwind CSS Design system 的设计。&lt;/p&gt;
&lt;p&gt;如果觉得这本书太贵，那至少读一读这篇 &lt;a href=&quot;https://medium.com/refactoring-ui/7-practical-tips-for-cheating-at-design-40c736799886&quot;&gt;7 Practical Tips for Cheating at Design&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>为什么无法坚持写博客</title>
    <link href="https://lutaonan.com/blog/reason-why-your-blog-is-not-alive/"/>
    <updated>2019-11-05T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/reason-why-your-blog-is-not-alive/</id>
    <content type="html">&lt;p&gt;如果你被本文的标题吸引，那么你应该已经试过很多次雄心勃勃地开始选择你喜欢的静态网站生成器 (Static Site Generator), 然后精心挑选或者自行手写一个你钟意的主题，写下一篇题为 “Hello World” 的博客，宣称从今天起重新开始写博客。几个月后就再也不更新了。&lt;/p&gt;
&lt;p&gt;为什么你总是无法坚持写博客？和很多「为什么无法坚持做某事」的问题一样，我们得先弄清楚为什么要写博客。&lt;/p&gt;
&lt;p&gt;我听过很多人想建博客的理由是想把博客当成笔记本，记录自己学到的东西、遇到的问题和解决方法。这是一个让博客最终走向荒废的理由，因为你在笔记本就可以做到类似的事，除非你记录的问题有你自己独到的思考，否则网友们更愿意去看 StackOverflow.&lt;/p&gt;
&lt;p&gt;写博客的第一个意义是&lt;strong&gt;让陌生人通过博客了解到你是什么人、你在想什么、你做了什么&lt;/strong&gt;。不妨试想一下，如果你正准备找工作，一位素不相识的 HR 如果要了解你，光是一份简历就能让 HR 知道你的价值吗？如果你有一个精彩的博客，HR 也许能通过你的博客了解你对技术的属于自己的思考、你在业余时间在想的事情是什么。这比简历本身更像一份立体的简历。&lt;/p&gt;
&lt;p&gt;以下是一些你可以选择的题材：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;你对某个技术的看法&lt;/li&gt;
&lt;li&gt;你读了某本书的书评&lt;/li&gt;
&lt;li&gt;你职业之外的一些生活感悟和记录&lt;/li&gt;
&lt;li&gt;你的对于生活、职业的哲学思考&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这些题材的共同点是它们都是属于你的独特的内容。&lt;/p&gt;
&lt;p&gt;当然，这一切的前提是你本身需要有一定的表达欲，你才会想不断地去写博客。博客只是其中一个表达渠道。我自己是一个很有表达欲的人，我乐意分享我的想法，我的生活。然而，试图通过建立博客去培养表达欲不是一个行之有效的方法，这就像很多本身不喜欢读书的人试图通过 Kindle 培养自己的读书习惯，大多数都是失败收场。你应该是因为喜欢读书所以买 Kindle, 正如你应该是想表达你的东西所以你写博客。&lt;/p&gt;
&lt;p&gt;不是每个人都有表达欲，但很多有表达欲的人不敢表达，因为在担心一些不应该担心的问题。&lt;/p&gt;
&lt;h4 id=&quot;%E6%96%87%E7%AB%A0%E6%B2%A1%E6%9C%89%E6%B7%B1%E5%BA%A6&quot; tabindex=&quot;-1&quot;&gt;文章没有深度&lt;/h4&gt;
&lt;p&gt;除非你的博客的定位就是追求思想深度，否则不必苛求每篇文章都有所谓的深度，有时候即使是日常生活的小记也有其价值，读者能从中发现很多自己不知道的东西。例如 &lt;a href=&quot;https://www.justzht.com/all/&quot;&gt;JustZht&lt;/a&gt; 的 &lt;a href=&quot;https://www.justzht.com/2018-11-20/&quot;&gt;一些生活小记&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;记得多年前我刚开始写博客的时候知道了罗磊和 &lt;a href=&quot;https://luolei.org/&quot;&gt;罗磊的博客&lt;/a&gt;。虽然当时罗磊是一个前端工程师，但博客大多数文章都不是技术，而是一些数码产品和生活方式，例如 &lt;a href=&quot;https://luolei.org/shenzhen-marathon-2016/&quot;&gt;他跑马拉松的记录&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这些内容没有所谓的「深度」，但让我看到了不同的生活方式。每个人都有自己独特的生活方式，不妨把它分享出来让更多人从中获得借鉴。&lt;/p&gt;
&lt;h4 id=&quot;%E6%96%87%E7%AB%A0%E5%86%99%E4%B8%8D%E9%95%BF&quot; tabindex=&quot;-1&quot;&gt;文章写不长&lt;/h4&gt;
&lt;p&gt;并非写长文章才叫写博客，李如一的 &lt;a href=&quot;https://blog.yitianshijie.net/&quot;&gt;一天世界&lt;/a&gt; 也不见得每篇文章的篇幅都长，但内容有其独特的思维方式，也能引发思考。这就够了。&lt;/p&gt;
&lt;h4 id=&quot;%E6%B2%A1%E4%BB%80%E4%B9%88%E4%BA%BA%E7%9C%8B&quot; tabindex=&quot;-1&quot;&gt;没什么人看&lt;/h4&gt;
&lt;p&gt;写独立博客和写公众号不同，你不必追求「十万加」。你要追求的是一个陌生人只要进入一个网站就能知道你是什么人。你不靠写博客吃饭。人们总说 You are what you read, 当人们无法得知你在读什么的情况下，那么我更要说： You are what you write.&lt;/p&gt;
&lt;p&gt;文章写完，分享给你喜欢的圈子，论坛，回复一些评论。慢慢地就会在你的圈子积累一些读者。&lt;/p&gt;
&lt;h4 id=&quot;%E5%81%9A%E4%B8%8D%E5%88%B0%E4%B8%80%E7%9B%B4%E6%9B%B4%E6%96%B0&quot; tabindex=&quot;-1&quot;&gt;做不到一直更新&lt;/h4&gt;
&lt;p&gt;&lt;a href=&quot;https://imququ.com/&quot;&gt;JerryQu 的博客&lt;/a&gt; 已经两年没有更新，但两年后的现在依然可以说这是一个很好的博客。&lt;/p&gt;
&lt;p&gt;你的博客不是资讯网站，不必在意更新频率。&lt;/p&gt;
&lt;p&gt;希望本文可以引导各位潜在的博客作者决心建立自己的独立博客。&lt;strong&gt;独立博客有免于献媚的自由，有排版自由，有修改删除自己说了算的自由&lt;/strong&gt;。维护一个有意义的博客不是一件难事，用现成的平台或用框架，在网站主页写上你的个人简介，然后保有分享生活和想法的习惯，不限篇幅，不限频率（即使是一年一篇），按时续费域名，保持网站正常访问，&lt;/p&gt;
&lt;p&gt;记住，一个博客的死掉不是不再更新，而是无法访问。&lt;/p&gt;
&lt;h3 id=&quot;%E5%BB%B6%E4%BC%B8%E9%93%BE%E6%8E%A5&quot; tabindex=&quot;-1&quot;&gt;延伸链接&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/timqian/chinese-independent-blogs&quot;&gt;中文独立博客列表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>来自 2014 年给未来的我的一封信</title>
    <link href="https://lutaonan.com/blog/letter-from-few-years-ago/"/>
    <updated>2019-11-05T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/letter-from-few-years-ago/</id>
    <content type="html">&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/lett.jpeg&quot; alt=&quot;这封信的照片&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是一封 2014 年我写给未来的自己的信。当时在上大一，是上职业规划课时老师布置给我们的一个作业，写完我们就交给老师保存，他会在我们大学毕业后返还。&lt;/p&gt;
&lt;p&gt;老师通过微信联系我说有封信在他那里，并拍了这张照片（图为我用 Office Lens 处理后）。我早已忘掉我曾写过这封信，看完后我就全记起来了。&lt;/p&gt;
&lt;p&gt;记起来刚上大学时对未知的憧憬，记起来在教室听无聊的网页设计课，记起来退学那天给宿舍阿姨还了钥匙后坐上中巴回广州市区的时候听的那首《一路向北》。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我在 UC 做的前端工程化探索</title>
    <link href="https://lutaonan.com/blog/what-i-have-done-at-UC/"/>
    <updated>2019-09-27T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/what-i-have-done-at-UC/</id>
    <content type="html">&lt;p&gt;我在 2016 年初加入 UC 的国际业务部，负责为 UC News 搭建运营后台。随着前端团队人数越来越多，我开始推动团队的前端技术栈统一以及前端工程化，开发了一个叫 Cans 用于快速搭建中后台前端应用的框架。直到了 2019 年我离开 UC, Cans 仍然服务于 UC 的国际业务。&lt;/p&gt;
&lt;p&gt;本文主要记录了我如何从 UC News 运营后台孵化出这个内部框架，以及其背后的设计理念。虽然 Cans 没有开放源代码。但我认为相比这些工具的源码，那些我在开发这些工具背后的理念、思考，更有被分享的价值。也算作是对我在 UC 工作的一个总结。遂有此文。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;我们在做 UC News 运营后台的时候，面临的最大问题是：当有新的业务需要我们团队支撑开发一个新运营后台的时候，我们应该怎么做？&lt;/p&gt;
&lt;p&gt;这种情况在不断地发生。2017 年我们的 UC News 运营后台趋于成熟，业务需求响应的速度在不断提高。越来越多业务方问我们同一个问题：「我们 xxx 业务想有一个运营后台，我们可以快速接入吗？」&lt;/p&gt;
&lt;p&gt;如何让 UC News 运营后台的开发经验可以被快速地复制出去，帮助更多业务？在回答这个问题之前，我想先说说我是怎么设计 UC News 运营后台的前端工程以提高需求响应速度的。&lt;/p&gt;
&lt;p&gt;第一点是保证业务开发尽量不被构建环节干扰，只须关注业务逻辑本身。这一点很好保证，因为构建配置基本是不需要更改的。&lt;/p&gt;
&lt;p&gt;第二点是降低新页面接入的成本。所谓的成本指的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;页面绑定对应的路由&lt;/li&gt;
&lt;li&gt;在左侧菜单栏添加菜单项并指向对应的路由&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_185.JPG?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_186.JPG?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我把这两点变成配置项，可以直接在项目里的 routes 文件配置。这样新页面接入只需配置菜单项的标题和路由，以及对应的页面组件即可。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_E5C7A707793A-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;第三点是规范项目目录结构。这一点我在 &lt;a href=&quot;https://eggjs.org/&quot;&gt;Egg&lt;/a&gt; 上受到很大的启发。在内部，我们的 Node.js 系统都使用 Egg. 我借鉴 Egg 把项目配置、路由配置、应用启动代码等作了规范：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_15A76FD02171-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;要用这一套模式赋能更多不断冒出的新业务，首先要做的是统一。&lt;/p&gt;
&lt;p&gt;在社区上做开源软件和做公司内部的软件不同，前者通常需要考虑兼容性。处理兼容性的代价是越来越复杂的配置项。但做内部软件，则可以通过「统一」简化配置（甚至无需配置）。例如，两个业务如果分别使用 less 和 sass, 那么在新建项目时，两个业务都要各自配置。相反，如果早已约定所有业务都使用 less, 那么 less 的配置可以固化到统一的工具里，两个业务都不需配置。&lt;/p&gt;
&lt;p&gt;首先是技术栈的统一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;React&lt;/li&gt;
&lt;li&gt;组件库：Ant.Design&lt;/li&gt;
&lt;li&gt;构建工具：Webpack&lt;/li&gt;
&lt;li&gt;语言：TypeScript&lt;/li&gt;
&lt;li&gt;css 预编译：Less&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术栈的选型背后没有什么高深的思量，不过是这一套在 UC News 运营后台经过了考验：Ant.Design 的组件覆盖了 90% 的需求；纯 EcmaScript 写运营后台这种复杂应用是灾难，尤其在新人接手的时候；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;技术栈的统一带来的是构建配置可以全部收敛&lt;/strong&gt;，当然除了技术相关的工具，还有业务层面的工具可以统一收敛：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;构建产物发布到 cdn&lt;/li&gt;
&lt;li&gt;打点、错误监控的封装&lt;/li&gt;
&lt;li&gt;网络请求库统一&lt;/li&gt;
&lt;li&gt;i18n 方案统一&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;做好了这些统一的准备，我开始开发一个叫 Cans 的前端解决方案，它的宗旨是快速搭建中后台类的项目。&lt;/p&gt;
&lt;h2 id=&quot;%E6%A1%86%E6%9E%B6%E8%AE%BE%E8%AE%A1&quot; tabindex=&quot;-1&quot;&gt;框架设计&lt;/h2&gt;
&lt;p&gt;「开箱即用，没有多余的东西」是我从 &lt;a href=&quot;http://zeit.co/&quot;&gt;zeit.co&lt;/a&gt; 领会到的软件设计哲学。&lt;strong&gt;如果说一个框架设计得美，那么其实是说它用最简单且符合直觉的接口封装了最复杂的逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;和 next.js 一样，我希望开发者只要用 &lt;code&gt;cans start&lt;/code&gt; 这一条命令，就能开始开发一个页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_5861AF8C8CB1-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在最基本的应用，&lt;code&gt;cans start&lt;/code&gt; 的背后会做这样的工作：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_366CDF4D0EEB-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;也就是收集所有运行时将要用到的数据，然后生成一个入口 js 文件。&lt;/p&gt;
&lt;p&gt;另外，在构建中还引入了 tree shaking, code splitting (with react-loadable) 等等优化手段。&lt;/p&gt;
&lt;p&gt;构建时分析的应用数据，可以在运行时、页面中通过 import app 实例来获取：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_4F51DBF1C4FE-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这种注入机制是为了提供扩展性，为了通过这种扩展性建立「生态」，Cans 引入了 addon 机制，以一个打点 addon 为例：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_F7A689CCF2ED-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;开发者可以在 npm 发布以 &lt;code&gt;cans-addon-&lt;/code&gt; 为前缀的库贡献生态。&lt;/p&gt;
&lt;p&gt;Cans 自带了一些业务常用的 addon:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cans-addon-cookies
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;app.cookies.get&lt;/code&gt; 和 &lt;code&gt;app.cookies.set&lt;/code&gt; 读写 cookies&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cans-addon-storage
&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;app.storage&lt;/code&gt; 做离线数据持久化（如本地数据缓存）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;cans-addon-http
&lt;ul&gt;
&lt;li&gt;http 请求方法封闭&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;虽然中后台的布局千篇一律，但为了尽量覆盖所有定制化的需求，Cans 也开放了 theme, 开发者可以定制自己的主题，用 &lt;code&gt;app.theme()&lt;/code&gt; 引入。也可以在 npm 上贡献主题。像我们最常用的运营后台 theme：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/0653a32a-c51b-4a14-9bb3-a3298c151d87.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_44DD0DC7FA9F-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;而在业务层，尽可能将可复用的业务组件封装出去，让更多业务可以使用。如 &lt;a href=&quot;https://github.com/NewbeeFE/antd-data-table&quot;&gt;antd-data-table&lt;/a&gt; 这个业务组件，就是从 UC News 运营后台独立出来的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/what-i-have-done-at-uc/IMG_3BCAB3A24856-1.jpeg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;以上是 Cans 这个框架的大概模样, 或有其它细节，但不是本文的重点。&lt;/p&gt;
&lt;p&gt;在设计这个框架的时候，我无时无刻在考虑的是如何使开发者要写的代码越来越少，同时开放的接口是要符合开发者直觉的。就像「建立一个页面就是创建一个页面文件然后运行 &lt;code&gt;cans start&lt;/code&gt; 一样简单。&lt;/p&gt;
&lt;p&gt;几年前我读了《乔布斯传》，使我对用户体验有了极致的追求，也把这种追求带到了软件开发。这种体验不是一句 Simple is better 就可以说明的。你在同时面对一堆电路板和一台 Macintosh 的时候可能才会体会到所谓的「科技与人文的十字路口」，但，软件设计同样有这样的十字路口，它可能出现在一份完整、漂亮的文档（像 Vue）, 可能出现在一个屏蔽了所有复杂细节 (and it just works!) 的命令（像 next.js）, 可能出现在它的小而美，可以接入到任何地方。&lt;/p&gt;
&lt;p&gt;后来蚂蚁金服发布了 Umi, 比 Cans 做得更全面，但两者的思路都如出一辙。我想这证明了这套模式背后的价值所在。最近看到&lt;a href=&quot;https://www.yuque.com/preview/yuque/0/2019/pdf/84184/1569318486837-37eeba0d-ebc1-452a-9f6a-a6a02cd27726.pdf&quot;&gt;《Umi 架构、生态和未来》&lt;/a&gt; ，让我更确信当初的想法和 Umi 在做的是契合的。推荐各位在下一个项目可以试试 Umi.&lt;/p&gt;
&lt;p&gt;记得有一次面试的时候，我提到我主要是做一些前端基建的工作，面试官问我，觉得什么样的前端基建是做得好的基建？我回答说，&lt;strong&gt;如果我做的基建可以让同事少加班，那么我做的基建就是好的&lt;/strong&gt;。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>回顾了一些读者来信</title>
    <link href="https://lutaonan.com/blog/letters-from-reader/"/>
    <updated>2019-09-21T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/letters-from-reader/</id>
    <content type="html">&lt;p&gt;从 2014 年开始写博客以来，因为不设评论区，我收到不少读者的 Email 来信。透过 Email, 来信的人比评论区直接评论要更严谨一些。来信中的大部分是请教问题，其它则是一些感谢的话。&lt;/p&gt;
&lt;p&gt;几天前我购买了一块软木板挂在自己的房间，想到可以把一些有意思的读者来信打印出来钉到软木板上。于是在收件箱整理了 2014 年至今 5 年来收到的所有读者来信。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/Snapseed%208.jpg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/Desktop.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;其中我发现一封 2015 年的已经被我淡忘的邮件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/Desktop%20HD.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是一位在国外当老师的妈妈，特意来信想为她的儿子寻问关于编程的问题。当时我回信尽可能地写了很多浅薄的意见和经验分享，后来就再没有通信。这位母亲让我感动。&lt;/p&gt;
&lt;p&gt;时隔几年再看来往的信件，无论是提到的这位母亲，还是其它特意发来感谢的读者，他们让我收获到的是，我写的文字确实帮助了一些人；五年来我坚持写独立博客是有意义的；这些来信让我意识到我活在世上还是有一点微不足道的贡献。所以我最开心的是看到来信里面提到的，我对读者的影响是什么。&lt;/p&gt;
&lt;p&gt;对我来说，有没有活下去的勇气，取决于我在世界上有没有创造价值。这些读者来信是我写博客收获的最宝贵的财富。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以这些人呢，不管是什么借口，最终选择了去做恶心的成年人社会中的一个恶心的人，最可气的是他们之后还产生了幻觉，说这就是“成熟”。于是又过来毒害年轻人，跟他们说，你看，我年轻的时候也像你这样，现在我这叫成熟，你这叫幼稚。&lt;/p&gt;
&lt;p&gt;我现在看到很多我的同龄人变成这样，很多人都是我小时候的好朋友，也曾经充满了理想，充满了美好的这些东西，然后相信自己可以改变世界，最后却变成了这种恶心的人。&lt;/p&gt;
&lt;p&gt;我回家吃饭心情好就敷衍一下，有时候心情不好就忍不住当场戳穿他们。我说：“你看你们这帮兔崽子，年轻时候我们在一块儿聊，都说要改变世界，现在你，你改变个屁了。”然后他们就有点不好意思，说：“哎呀，行了，老罗，咱们那时候不是幼稚吗？谁能改变世界？谁也改变不了世界。”我就跟他们说：“你别客气了，你已经改变这个世界了，因为你变成了一个恶心的人，这个世界多了一个恶心的人，因此它变得恶心了一点点。”&lt;/p&gt;
&lt;p&gt;每一个生命来到世间，都注定改变世界，这是你的宿命，你别无选择。你要么把世界变得好一点，要么把世界变得坏一点。&lt;/p&gt;
&lt;p&gt;你如果走进社会，为了生存或是为了什么不要脸的理由， 变成了一个恶心的成年人社会中的一员，那你就把这个世界变得恶心了一点点。 如果你一生耿直，刚正不阿，没做任何恶心的事情，没有做任何对别人造成伤害的事情，一辈子拼了老命勉强把老婆、孩子、老娘，把身边的这些人照顾好了，没有成名，没有发财，没有成就伟大的事业，一生正直，最后梗着脖子到了七八十岁死掉了，你这一生是不是没有改变世界？你还是改变世界了，你把这个世界变得美好了一点点。因为你，这个世界又多了一个好人。&lt;/p&gt;
&lt;p&gt;—— 罗永浩&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>爱情是愿意为你放弃寻新鲜</title>
    <link href="https://lutaonan.com/blog/newness/"/>
    <updated>2019-09-16T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/newness/</id>
    <content type="html">&lt;p&gt;昨天在回杭的飞机上看完《Newness》, 一部探讨开放性关系的电影。男女主角都喜欢新鲜感，最后因为约炮堕入爱河，但很快开始感到关系平淡和厌倦，于是尝试开放性关系. 各自一番经历后最终决定放弃自由，认真经营这段感情。&lt;/p&gt;
&lt;p&gt;我很喜欢探讨这种两性哲学问题，因为我在看待两性关系中有些犬儒主义 —— 我不相信人性，不相信忠诚，世界上充满诱惑。更愿意相信大多数的婚姻是一场交易。&lt;/p&gt;
&lt;p&gt;当两人初试开放性关系时，遇到一位专家在谈论「外遇」和「开放性关系」的成因，她说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When I go to look for someone else, it’s not always because I wanna get away from you, it’s because I wanna get away from the person that I have myself become. And it’s not that I want to find somebody else, but I want to find another self.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当我开始想寻找另外一个人的时候，不是因为我想离开你，而是想逃离这个状态的我。我想寻找的不是另一个人，而是另一个我。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我想，这就是除了厌倦、诱惑之外，外遇的核心原因 —— 无法接受这个安定的自己。&lt;/p&gt;
&lt;p&gt;有意思的是，在片中，男主角对开放性关系的底线，是只有自己可以令女主角高潮。所以每次女主角回家，他都会问女主角 Did you come (你高潮了吗)? 后来，女主角被一位成熟、事业有成的大叔深深吸引，她在他身上得到高潮后，男主角才感到他们的这段关系，已经彻底崩坏。&lt;/p&gt;
&lt;p&gt;片尾，男女主角决定承受平淡、怨怼，回到对方身边。因为在各自经历过后，更加清楚彼此为何在一起。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/p2512608863.jpg?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;*图片来自 &lt;a href=&quot;https://movie.douban.com/photos/photo/2512608863/&quot;&gt;https://movie.douban.com/photos/photo/2512608863/&lt;/a&gt; *&lt;/p&gt;
&lt;p&gt;或许最可靠稳固的关系就是双方愿意为对方失去那个原本的自己，而且是亲身经历告诉他们为何值得这样牺牲。&lt;/p&gt;
&lt;p&gt;正如片中的两性专家所说，「开放性关系只是一个过程，千万不要把它作为你们的终点」。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of it not as the destination, but the layover.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
  
  <entry>
    <title>未来属于声明式编程</title>
    <link href="https://lutaonan.com/blog/declarative-programming-is-the-future/"/>
    <updated>2019-07-18T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/declarative-programming-is-the-future/</id>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%B7%A8%E7%A8%8B?oldformat=true&quot;&gt;声明式编程&lt;/a&gt; （Declarative Programming）是一种编程范式。现实世界中，我们大部分编码都是命令式的。&lt;/p&gt;
&lt;p&gt;举个最常见的例子，对于用 JavaScript 来构建 UI, React 是声明式的。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 普通的 DOM API 构建 UI&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; div &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;textContent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; div&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;p&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// React 构建 UI&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; h &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;craeteElement&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;UI&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;div&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hello world&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;所有的 DSL (HTML, XML, SQL) 都是声明式的，你写出一条 SQL 语句，只是为了告诉数据库你要什么，然后数据库就会给你对应的数据，而不是通过数据库的 API 去取。&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; Products &lt;span class=&quot;token keyword&quot;&gt;WHERE&lt;/span&gt; name&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Alipay&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Apple 在今年 (2019 年) 也推出了 Swift UI, 在 WWDC 的 Swift UI 相关的 Session 里也&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2019/216/&quot;&gt;多次提到声明式 UI 开发的威力&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;声明式编程的潜力在于：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解放人力成本，你只要「声明」你要做什么，具体怎么做，由运行时解决。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;函数式编程就是声明式编程的一种，在函数式编程里的&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E5%B0%BE%E8%B0%83%E7%94%A8?oldformat=true&quot;&gt;尾递归&lt;/a&gt;性能，就取决于运行时，而不是靠程序员去手动优化。React 里你只要描述你的 UI, 接下来状态变化后 UI 如何更新，是 React 在运行时帮你处理的，而不是靠程序员优化 diff 算法。&lt;/p&gt;
&lt;p&gt;我们可以认为 Serverless (尤其是函数计算) 在运维领域获得了声明式的好处 —— 我们定义好了函数，我们只要告诉平台我们需要调用这个函数，那么如何进行计算资源分配、如何对代码做分布式部署，都不需要程序员考虑。&lt;/p&gt;
&lt;p&gt;运行时帮你完成工作，除了可以节省人力成本外，还降低了程序员出错的概率 —— 因为写的代码越少，出错的概率就越小。人是最不可靠的，我们应该尽量把工作交给计算机。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「声明」是「描述」而不是真正「执行」&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在纯函数式编程语言里面，一切都是声明式的，是纯 (Pure) 的，没有副作用（Side Effect）的。&lt;/p&gt;
&lt;p&gt;Haskell 是一个纯函数式的语言，像在控制台输出文本这种方法（&lt;code&gt;putStrLn&lt;/code&gt;）就是一种副作用。在 Haskell 里 &lt;code&gt;putStrLn &amp;quot;Hello World&amp;quot;&lt;/code&gt; 本身不会真正地输出 “Hello World“, 而是返回一个 IO 类型，来说明他是一个副作用。但它如何被执行，取决于运行时。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://elm-lang.org/&quot;&gt;Elm&lt;/a&gt; 和 Haskell 一样，副作用也只是返回一种类似 Haskell 中的 IO 类型。在 Elm 中叫做 Cmd.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/F5AF0D75-30A2-46DD-B66F-9FDEFFC10B27.png?x-oss-process=style/80&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;以上说的这些，可能太过抽象。所以我用前端的同学们应该都知道的 redux-saga 对此作更具象的解释。也可以解答为什么我虽然不喜欢 Redux, 但认为 redux-saga 是一个的很不错的库。因为他利用 redux 的 middleware 机制和 generator 巧妙地实现了类似 Haskell 的 IO.&lt;/p&gt;
&lt;p&gt;下面我将用 &lt;a href=&quot;https://redux-saga.js.org/docs/basics/DeclarativeEffects.html&quot;&gt;官方文档的例子&lt;/a&gt; 做解释。&lt;/p&gt;
&lt;p&gt;比如，以下是一个有副作用的函数:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; call &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;redux-saga/effects&#39;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; products &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/products&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;// ...&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显然，&lt;code&gt;Api.fetch()&lt;/code&gt; 是副作用，它会发送网络请求。但是，在 redux-saga 里面，你不应该直接执行这个函数，而是使用 &lt;code&gt;call&lt;/code&gt; 告诉 redux-saga —— 你要执行 &lt;code&gt;Api.fetch&lt;/code&gt; , 参数为 &lt;code&gt;/products&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;所以，事实上这个函数没有被命令式地被执行，而是由 redux-saga 决定如何执行。&lt;/p&gt;
&lt;p&gt;如果你在外部直接调用 &lt;code&gt;fetchProducts()&lt;/code&gt;, 你会得到一个 Generator Iterator. 然后通过 &lt;code&gt;next()&lt;/code&gt; 得到你 yield 的值。所以你可以这样去测试你的程序：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; iterator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchProducts&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// expects a call instruction&lt;/span&gt;&lt;br /&gt;assert&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;deepEqual&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  iterator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Api&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;fetch&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/products&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;fetchProducts should yield an Effect call(Api.fetch, &#39;./products&#39;)&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是说，你要测试的是「你有没有告诉程序你要执行的副作用，以及执行的参数是什么」。和命令式编程不同，因为命令式的程序在你执行函数时会真实地执行这个 &lt;code&gt;Api.fetch&lt;/code&gt;，你必须用测试框架里类似 &lt;code&gt;mockFn&lt;/code&gt; 的手段去 mock 这个函数进行测试。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fetchProducts()&lt;/code&gt; 只有在 Redux 环境里，才会真正地执行副作用（在这里就是 Api.fetch 发送的网络请求）。&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;声明式的编程是非常易于测试的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可视化编程是一种声明式编程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们探索可视化编程，是因为我们一直期望通过拖拽就能完成开发，其实就是期望我们完成任务仅仅需要通过声明，而不是写命令式的代码。当然这是一种理想的状态。&lt;/p&gt;
&lt;p&gt;DSL 是最常见的声明式编程形式。我一直在布道 GraphQL, 因为它把网络请求变得声明式了：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;query {
	posts {
		id, title, content
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把网络请求变成声明式的好处有很多，其中一个就是它可以被放到各种各样的环境被执行。想象一下，我们可以打造一个可视化的应用搭建工具，在命令式编程的场景下，我们如果要做出如「点击按钮发送请求，得到响应后触发另一个 UI 更新」，就需要编写命令式的代码：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;onClickButton&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;// 手动发送请求&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;	&lt;span class=&quot;token comment&quot;&gt;// 手动更新 UI&lt;/span&gt;&lt;br /&gt;  table&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;dataSource &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; result&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果是 GraphQL, 我们可以把每一条 GraphQL 语句单独看作一个对象，他可以被任何组件触发，它的结果也可以被任何组件订阅。这样一来，在可视化的搭建工具里，程序员要做的是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;（声明式地）编写 GraphQL 查询语句&lt;/li&gt;
&lt;li&gt;（声明式地）为组件（比如某个按钮）绑定 onClick 事件为触发某条查询语句&lt;/li&gt;
&lt;li&gt;（声明式地）为组件（比如某个表格）绑定某条查询语句的响应值对应哪些组件的属性值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当然现实世界的应用不是那么简单，但已经是跨出了很大一步。&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;未来为什么属于声明式编程，因为我们在不断地努力提高开发效率，声明式编程显然是提效的最佳手段。React, Flutter, SwiftUI, GraphQL 的出现是最好的证明。最近听到内网太多人在提 Serverless, 我想说，&lt;strong&gt;提升开发效率，我们应该去想如何尽量让开发者声明式地编写代码，而不是只去想我们在 Serverless 上能做什么。&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>井底之蛙的一片天空</title>
    <link href="https://lutaonan.com/blog/to-hongkong-people/"/>
    <updated>2019-06-17T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/to-hongkong-people/</id>
    <content type="html">&lt;p&gt;有次和朋友提到移民的想法，他说，为什么不考虑日本呢？我的回答是，我对日本没有特别的情感。朋友说他正相反。然后他问道：难道你的童年没有看日本动画吗？&lt;/p&gt;
&lt;p&gt;我的童年除了阅读，大部分信息的获取来源于电视机。我从电视机看过的日本动画不少 —— 在 CCTV 少儿频道看《四驱兄弟》，在 TVS (南方卫视) 看《哆啦 A 梦》，在华娱卫视《通灵王》、《军曹》，在本港台看《游戏王》，在翡翠台又看了不计其数的，就不一一列举。&lt;/p&gt;
&lt;p&gt;我从这些动画片里感受不出日本文化，一是因为都是中文的配音，二是基本上我看的都是虚构类作品，无法从中了解到日本的文化生活。只有翡翠台偶尔播出一些配音的日本真人电视节目，让我了解到日本的街道和风景是如此模样，但仅此而已。&lt;/p&gt;
&lt;p&gt;不过我却很能理解我的那位朋友，因为我对另一片土地 —— 香港 —— 有一样的感受。&lt;/p&gt;
&lt;p&gt;电视机把我和香港的距离拉得很近。白天有「卡通片」，傍晚有儿童节目，每晚六点半，可以看《六点半新闻报道》，知道香港、国际在发生的事。7点半后，有《东张西望》看娱乐新闻。紧接下来就是八点档和九点档的电视剧。&lt;/p&gt;
&lt;p&gt;我是看香港电视剧和电影、听「广东歌」长大的。聊起亚视的「柒事」，我们一样会大笑。现在不看电视，但还有 YouTube. 走在香港街头，我一个广东人，和香港人又有什么太大的区别呢。&lt;/p&gt;
&lt;p&gt;最大的区别可能是，我很羡慕香港人。香港人可以有不同的政见，可以自由表达自己的观点，有权发声争取自己（或别人）应有的权利，可以大声对别人讲：「香港系有言论自由咖」！不用担心「讲错嘢」。而我不能。&lt;/p&gt;
&lt;p&gt;香港不能失去这些。我愿意在这样的地方生活。香港是我的精神家园。&lt;/p&gt;
&lt;p&gt;撇开身份认同，在政治上，香港回归早已经是国际社会公认的。我自己作为中国人，一直为中国有这样的香港感到庆幸。&lt;strong&gt;因为这代表中国人还能有另一种作为中国人的方式。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;而我，很惭愧，虽同讲广东话，但在内地，也只不过是一只知道自己是井底之蛙的井底之蛙罢了。&lt;/p&gt;
&lt;p&gt;王小波说「井底之蛙也拥有一片天空」，对我来说，这片天空就是香港。&lt;/p&gt;
&lt;p&gt;衷心祝福香港。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我想得到它，因为它是好的</title>
    <link href="https://lutaonan.com/blog/want-it-cuz-it-is-right/"/>
    <updated>2019-06-13T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/want-it-cuz-it-is-right/</id>
    <content type="html">&lt;p&gt;王小波在《跳出手掌心》里有这么一段话，初读时使我似醍醐灌顶：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我上大學時，有一次我的數學教授在課堂上講到：我現在所教的數學，你們也許一生都用不到，但我還要教，因為這些知識是好的，應該讓你們知道。這位老師的胸襟之高遠，使我終生佩服。我還要說，像這樣的胸襟，在中國人文知識分子中間很少見到。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;把「知识」换成「&lt;a href=&quot;https://zh.wikipedia.org/zh/%E6%99%AE%E4%B8%96%E5%83%B9%E5%80%BC&quot;&gt;普世价值&lt;/a&gt;」，我认为道理同样成立：&lt;/p&gt;
&lt;p&gt;我们追求普世价值，是因为普世价值是好的，是对的，只要你是人类，你就应该拥有他。如果有人不幸失去，那么就应该帮助他。&lt;/p&gt;
&lt;p&gt;令人难过的是，由于一系列客观条件，一部分人无法对此感同身受。普世价值和民族无关，和国籍无关，它属于全人类。一旦能意识到一点，那么这些人就很容易能识破一些延用了近半个世纪的可笑的借口和谎言，他们的被害妄想症也理应会被治愈。&lt;/p&gt;
&lt;p&gt;很遗憾，我得不到它，我本应该能为此不断地写，不断地写，但我不能。这让我难过了很多年，一直到现在。&lt;/p&gt;
&lt;p&gt;愿不在意的人能一直不在意，以免遭受这种难过。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>为你写的一首诗</title>
    <link href="https://lutaonan.com/blog/a-poem-for-you/"/>
    <updated>2019-06-12T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/a-poem-for-you/</id>
    <content type="html">&lt;p&gt;我喜欢你&lt;/p&gt;
&lt;p&gt;从那年的某天&lt;/p&gt;
&lt;p&gt;我突然遇到你&lt;/p&gt;
&lt;p&gt;但他们说&lt;/p&gt;
&lt;p&gt;不要谈论你&lt;/p&gt;
&lt;p&gt;因为她不喜欢你&lt;/p&gt;
&lt;p&gt;所以你是禁忌 你是克星&lt;/p&gt;
&lt;p&gt;你只会带来麻烦&lt;/p&gt;
&lt;p&gt;他们请我不要谈论你&lt;/p&gt;
&lt;p&gt;我说你没有错 喜欢你也没有错&lt;/p&gt;
&lt;p&gt;错在她不喜欢你&lt;/p&gt;
&lt;p&gt;他们劝我私奔吧&lt;/p&gt;
&lt;p&gt;去一个大家都喜欢你的地方&lt;/p&gt;
&lt;p&gt;但她是我妈妈&lt;/p&gt;
&lt;p&gt;我如何离开她&lt;/p&gt;
&lt;p&gt;他们劝我离开你吧&lt;/p&gt;
&lt;p&gt;即使没有你 生活如常&lt;/p&gt;
&lt;p&gt;多年后&lt;/p&gt;
&lt;p&gt;我偶尔提起你&lt;/p&gt;
&lt;p&gt;他们请我不要谈论你&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>博客近期的变化</title>
    <link href="https://lutaonan.com/blog/nearly-blog-change/"/>
    <updated>2019-06-11T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/nearly-blog-change/</id>
    <content type="html">&lt;h3 id=&quot;%E5%9B%BE%E7%89%87-cdn-%E8%BF%81%E7%A7%BB%E5%88%B0%E4%BA%86%E9%98%BF%E9%87%8C%E4%BA%91&quot; tabindex=&quot;-1&quot;&gt;图片 CDN 迁移到了阿里云&lt;/h3&gt;
&lt;p&gt;从上个月开始，博客的图片全部无法显示，原因是新浪微博开始防盗链了。&lt;/p&gt;
&lt;p&gt;起初选择使用新浪微博的图床，一方面是因为不用花钱，另一方面是因为觉得自己的博客没有多少访问量，也就不折腾 CDN 了。然而这一两年我意识到，我认真写下的文字也被不少人在认真看待。趁着这个契机，就把博客的图片全部迁移到稳定的 CDN 上。&lt;/p&gt;
&lt;p&gt;我选择了&lt;a href=&quot;https://lutaonan.com/link/aliyun&quot;&gt;阿里云 OSS + CDN 的方案&lt;/a&gt;，我用 grep 把博客里所有的新浪图床图片找了出来，然后批量下载下来，上传到 OSS 上。&lt;/p&gt;
&lt;p&gt;比较麻烦的是国内的 CDN 域名需要备案，除此之外，就是阿里云的一条龙服务 —— 域名可以绑定到 CDN，CDN 可以直接关联 OSS。体验还算不错。&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%A8%E7%AB%99-cloudflare&quot; tabindex=&quot;-1&quot;&gt;全站 Cloudflare&lt;/h3&gt;
&lt;p&gt;Coding Page 的 Pages 服务在香港的腾讯云，抽风是家常便饭，无法忍受。于是接入了 Cloudflare, 现在你访问的这里就是经过 Cloudflare 加速的页面。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>人生是不断取舍的过程</title>
    <link href="https://lutaonan.com/blog/everything-is-about-trade-off/"/>
    <updated>2019-04-03T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/everything-is-about-trade-off/</id>
    <content type="html">&lt;p&gt;如果问工作以来我悟出的最重要的观念是什么，那就是，人生是一个不断取舍的过程。&lt;/p&gt;
&lt;p&gt;我们总是在作自己未来的规划和目标的时候说，我想要什么，而忽略了问自己一个问题，「我愿意为此舍弃点什么」。我们逃避了残酷的事实 —— 我们每天只有 24 小时，我们什么都想要，但这是不可能的。&lt;/p&gt;
&lt;p&gt;意识到这一点，有利于我们做很多的决策，而且对很多让你感到可惜的事都释怀了。&lt;/p&gt;
&lt;p&gt;有人总是会在年初列下自己的读书清单，但直到年底，发现自己一本都没有读完。这是很多人懊恼和焦虑的来源 —— 为什么我总是无法履行自己的规划？&lt;/p&gt;
&lt;p&gt;过去我总会把原因归咎于没有做好时间管理，但后来我顿悟了，在列下读书清单时，并没有问自己这样的问题 —— 你愿意为读书带来的精神收益，而舍弃点什么？&lt;/p&gt;
&lt;p&gt;如果你在制定任何规划时都这样问自己，那么，你就会在每一次决策前明确这一点：这件事于你而言到底有多重要？如果阅读于你而言比看美剧重要，你就要作出取舍：把你看美剧的时间，花在阅读上。&lt;/p&gt;
&lt;p&gt;如果你认为做得到，那么就让它正式成为你的规划。如果你做不到，那么就不要让它成为你的规划。何必为自己制定一个无法完成的计划呢？它除了为你带来无意义的焦虑，无一用处。&lt;/p&gt;
&lt;p&gt;宁愿看美剧而放弃阅读并不可耻，活得明白是最重要的。只要这是你权衡后作出的取舍，那么你就不会为此而感到焦虑。&lt;/p&gt;
&lt;p&gt;我在&lt;a href=&quot;https://lutaonan.com/blog/one-year-of-bulking&quot;&gt;《健身一年》&lt;/a&gt;里提到，一年前我下定决心开始健身，当时我问自己：我能为健身舍弃什么？&lt;/p&gt;
&lt;p&gt;健身需要耗费每周四天每次 2 小时的时间，这些时间我可以用来写代码，做音乐，阅读。我愿意舍弃他们吗？&lt;/p&gt;
&lt;p&gt;经过权衡后，我决定舍弃他们。于是我获得了一些健身的成果，同时我再也不为放弃了大量的阅读、写代码、做音乐的时间而焦虑。因为我早就知道，如果我想要获得健身的成果，这些是必须放弃的。&lt;/p&gt;
&lt;p&gt;不必为「我没有时间 xxx」而感到可惜，因为你没时间做的事，不过是在为你更想做的事让路而已。（除非你把时间都花在偷懒上）&lt;/p&gt;
&lt;p&gt;每个人有不同的活法，对待事件的优先级也不尽相同。只要认识到「吾生也有涯」的局限，你就可以从每一年底的「责怪自己没有做到什么」转变成「为自己做到了什么而感到高兴」。人生因此也变得简单得多 —— 你只要保证自己不是在虚度光阴即可。&lt;/p&gt;
&lt;p&gt;就像即使我现在惧怕婚姻，若是将来某一天也选择了婚姻，那一定是比起婚姻让我失去的，我更想得到婚姻给我带来的。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>现代的 React</title>
    <link href="https://lutaonan.com/blog/modern-react/"/>
    <updated>2019-03-08T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/modern-react/</id>
    <content type="html">&lt;p&gt;我一直很想写一本关于 React 的小书，因为我看到很多刚入门前端或刚开始使用 React 的开发者，对 React 有一些误解。也许是因为 JSX, 让很多人误以为 React 是一种黑魔法 —— 竟然能在 JS 文件里写 HTML! 还有很多围绕 React 的问题，像「状态管理」，就让很多人焦头烂额了。也正是因为 JSX, 让很多人依然用模板的思维去写 React.&lt;/p&gt;
&lt;p&gt;但实际上，如果你理解 React 解决问题的方式的本质，你会发现 React 没有那么难。我写这本小书的主要目的，就是想让还觉得 React 难用的开发者们知道，React 很简单。&lt;/p&gt;
&lt;p&gt;React 是一种构建 UI 的思想，关于 &lt;a href=&quot;https://github.com/reactjs/react-basic&quot;&gt;React 的思想&lt;/a&gt;，我觉得已经是老生常谈了。在所有从本质层面讲解 React 的文章或书里，总不免提到这样的公式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UI = f(state)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;意思就是，UI 是基于状态的一个函数返回值。这也是 Sebastian (React 设计者) 设想的理想状态。直到当我们真正拿 React 来写 UI 的时候，却发现我们很难遵循这个公式——组件的内部状态需要依靠 Class. 而写 Class 是导致 React 使用者困惑的重要原因。&lt;/p&gt;
&lt;p&gt;用 Class 实现内部状态同时也带来了另一个问题——我们怎么复用这些逻辑？常见的做法就是使用 &lt;a href=&quot;https://medium.com/merrickchristensen/function-as-child-components-5f3920a9ace9&quot;&gt;Function as Child Component&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;先不说 Function as Child Component 容不容易被初学者理解, 光是它带来的嵌套问题，就已经足够我们烦恼了——可以想像我们只能用 callback 写 JavaScript 的时代。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;MyForm&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;DataFetcher&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Actions&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;actions&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Translations&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;translations&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Styles&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;styles&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;form styles&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;styles&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;input type&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text&quot;&lt;/span&gt; value&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;button onClick&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;actions&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;submit&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;translations&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;submitText&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;button&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;form&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;                &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;              &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Styles&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Translations&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;Actions&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;DataFetcher&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;还有，我们应该怎么解决组件之间的状态共享问题？Redux? MobX? 还是其它状态管理工具？&lt;/p&gt;
&lt;p&gt;React 应该是简单直接的，但越来越多人「谈 React 色变」，正是由于以上的（或者以上没有提到的）问题，认为 React 复杂，难学。很多关于 React 的文章和书都花了不少篇幅来介绍这些解决问题的「设计模式」。&lt;/p&gt;
&lt;p&gt;但随着 React 的不断迭代，有了 Context API, 有了 Hooks API, 一切都变得简单了。我们可以抛开种种「模式」，真正用「函数式」的思维去构建 UI. 这也是标题想表达的意思 —— 我们应该使用「现代」的 React, 去避免不必要的学习成本。&lt;/p&gt;
&lt;p&gt;和著名的《设计模式》一样，很多「设计模式」是为了弥补面向对象的缺陷而出现的。React 通过自身 API 的完善，使我们能少写更多不必要的代码，少学习很多不必要的「模式」。&lt;/p&gt;
&lt;p&gt;我的目的不是在教你怎么用各种 React 相关的库，而是想让读者知道，我们在解决什么样的问题？我们解决问题的方法是什么？别人的库是怎么解决的？&lt;/p&gt;
&lt;p&gt;这个专栏会陆续发布循序渐进的文章。如果你完全没有接触过 React, 那么读完这个专栏后，你就完全能驾驭了 React 了，而且是用优雅的方式去驾驭他。你会发现，&lt;strong&gt;写 React 就是写函数那么简单，只不过这个函数的返回值是 Virtual DOM 罢了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;初学者们，请不必因为不懂所谓的「模式」而感到惭愧，尽情享受技术发展带来的红利吧。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;这是我在小专栏付费连载的&lt;a href=&quot;https://xiaozhuanlan.com/modern-react&quot;&gt;《Modern React》&lt;/a&gt;的前言，目前正在限时打折，有兴趣的朋友可以订阅。&lt;/p&gt;
&lt;p&gt;之所以选择连载的方式，是因为我想要通过读者的反馈去决定我接下来连载的内容。欢迎读者们积极地来信反馈。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>健身一年</title>
    <link href="https://lutaonan.com/blog/one-year-of-bulking/"/>
    <updated>2019-01-14T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/one-year-of-bulking/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;本文不提供训练计划
本文不提供饮食计划&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;lt;img class=&amp;quot;small&amp;quot; src=&amp;quot;&lt;a href=&quot;https://s2.ax1x.com/2019/05/07/EsOH9s.jpg&quot;&gt;https://s2.ax1x.com/2019/05/07/EsOH9s.jpg&lt;/a&gt;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;我在&lt;a href=&quot;https://lutaonan.com/blog/2018-summary&quot;&gt;《2018 年终总结》&lt;/a&gt;里提到了我健身的成果，在这篇文章里，我将分享我健身的过程，以及身体上、心智上的一些成长。&lt;/p&gt;
&lt;h2 id=&quot;%E6%8E%A5%E8%A7%A6%E5%81%A5%E8%BA%AB%E7%9A%84%E7%BB%8F%E5%8E%86&quot; tabindex=&quot;-1&quot;&gt;接触健身的经历&lt;/h2&gt;
&lt;p&gt;说来惭愧，我第一次接触健身是 2015 年。当时刚出来工作，有点闲钱，看到镜子里的那只瘦猴，决定开始去健身房增肌。于是在知乎搜索了很多关于增肌的回答，选了住处附近的一家健身房，就开始瞎练了，没有计划，也不知道怎么做计划。&lt;/p&gt;
&lt;p&gt;那时我身高 165, 体重 46kg. 想做卧推，空杆（20kg）都推不起；想做划船，动作做不好。这时候在健身房确实很大压力，什么都做不好，还怕占着别人地方。&lt;/p&gt;
&lt;p&gt;这样坚持了 2 个月，没什么效果。自然就放弃了。过了一段时间，我决定花钱请一个私教，重新开始我的增肌计划。那时已经是 2016 年了，我买了 10 节私教课。商业健身房私教的惯用套路——先去跑步机热身，然后教我做些动作。&lt;/p&gt;
&lt;p&gt;10 节课下来我没学到什么东西，因为教练只告诉你做什么动作，怎么做，有什么注意的，却没有讲为什么。除了上课，我也在 YouTube 看很多关于健身的视频。坚持了 3 个月左右，没太大的效果，又一次放弃了。&lt;/p&gt;
&lt;p&gt;之后很长一段时间，偶尔 YouTube 会根据我的用户画像给我推荐一些健身类的视频，我每次看到都觉得很羞愧——我无法面对这个坚持不下去的自己。我那里常常想，如果我当初坚持下来了，那么我已经有很大变化了吧。&lt;/p&gt;
&lt;p&gt;虽然我很矮，但是说实话，我很少因为我的身材自卑，除了限制了我追女生的范围以外，我的身高没有给我带来什么不好的事。但是我总是隐约地觉得自己很孱弱，我觉得我不能保护我喜欢的人，不能给人安全感。夏天穿衣服像一个毒友似的。这些倒是我比较在意的。&lt;/p&gt;
&lt;p&gt;导火线是 2017 年年底，我在某个停车场被一个保安言语暴力（过程不表），我十分生气，当时我想：是不是因为我看上去太弱了，所以这个保安敢这么对我说话？如果我强壮一些，或许就不需要和傻x讲道理了。我自己都缺乏安全感，怎么让别人有安全感呢。&lt;/p&gt;
&lt;p&gt;回到家我想了很久，决定认真对待健身这件事。**我问自己一个最重要的问题：我能为健身付出多少时间？**如果我每周训练 4 天，那么我将会大量减少自己业余的代码时间和玩音乐的时间，我是否能接受？&lt;/p&gt;
&lt;p&gt;当然，我最后选择了接受，于是才有了今天的一点点成果。&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%B3%E4%BA%8E%E8%AF%B7%E6%95%99%E7%BB%83&quot; tabindex=&quot;-1&quot;&gt;关于请教练&lt;/h2&gt;
&lt;p&gt;和前两次不同的是，我不再选择商业健身房，而是去找一些更专业些的以授课为主的健身工作室。恰好当时看中的一家工作室在做活动，很优惠，就买了 10 节课，开始了我的第三次健身...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;为了避免广告嫌疑，就不说是哪家工作室了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以我的经历，工作室和商业健身房比，私教的价格没有相差太多，买的课少（10节以内）可能相差 100 左右。买得多一些，差距就明显了。但是我是宁愿多花 100 上 10 节我能学到东西的课，也不想便宜 100 块上 10 节没有意义的课。&lt;/p&gt;
&lt;p&gt;严谨地说，在商业健身房遇到靠谱教练的概率比在工作室要低得多。「靠谱」体现在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对健身的热情&lt;/li&gt;
&lt;li&gt;丰富的理论知识&lt;/li&gt;
&lt;li&gt;能和客户建立真正的有效关系&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;至于可不可以不请教练，我觉得天下间没有什么是不可以的。很多人一直自己练也练得很好。自己练的风险主要在于，你可能需要花更长的时间去探索正确的动作，也可能出现受伤的情况。所以我觉得请不请教练，是看你愿不愿意花钱规避这些风险罢了。&lt;/p&gt;
&lt;p&gt;我自己主张的是有条件就尽量找教练（前提是靠谱的教练），因为&lt;strong&gt;我分析自己之前放弃的最大的原因就是不相信自己的训练&lt;/strong&gt;，我不知道自己的动作到底有没有效。新手最大的问题是没有什么感受度——你根本感受不到自己的背部肌肉，怎么知道自己划船有没有划对呢。有教练的最大好处，就是他知道你有没有做对。这样就就不会怀疑自己是不是做了无用功了。&lt;/p&gt;
&lt;p&gt;应该买多少节课呢。我当时买了 30 节课（做活动买的 10节 + 之后买的20节），后来我觉得 20 节课其实就足够了。我的训练频率是一周 4 练，上到 20 节课的时候，我基本已经可以自己独立训练了，也能感受得到自己的肌肉。最后 10 节课我都是专门让我教练辅助我练习我的弱项深蹲的。&lt;/p&gt;
&lt;p&gt;最后关于跟着教练训练很重要的一点是，根据教练为你制定的训练计划去做没有问题，&lt;strong&gt;但你一定要自己理解这个训练计划&lt;/strong&gt;，不要天天无脑地教练说做什么就跟着做，**多问教练为什么要这样安排？这样安排的好处是什么？同样是练这个肌群的动作，这个动作和另外一个动作有什么区别？**时刻提醒自己，这是你自己的训练，教练不是你的秘书（除非你这辈子都一直请教练），想想看，离开教练了以后，你能不能制定适合自己的计划？你从教练身上学到了什么东西？&lt;/p&gt;
&lt;p&gt;我从我的教练身上学到的除了基本的动作模式以外，还学到的是，不要让客观条件限制了你的训练。训练动作不是死的，不是说没有平板凳、没有杆，就不能练胸了。多看看你现在有什么，能不能用现有的东西，去创造一个新的训练方式（即使效果不是最好的）。这是建立在你真正了解你的肌群是怎么工作的基础下才能做到的。所以我自己在业余的时间，也会去了解解剖学方面的知识。&lt;/p&gt;
&lt;p&gt;当你在工作室上完课了，再转到费用更低的商业健身房也不迟。&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%B3%E4%BA%8E%E9%A5%AE%E9%A3%9F&quot; tabindex=&quot;-1&quot;&gt;关于饮食&lt;/h2&gt;
&lt;p&gt;「三分练，七分吃」，这句话都被说滥了。我个人觉得饮食比训练难太多了。特别是我这种所谓的「怎么吃都不胖」的瘦子。&lt;/p&gt;
&lt;p&gt;其实根据观察，很多瘦子说的「怎么吃都吃不胖」，主要的原因还是吃太少，只是&lt;strong&gt;以为自己吃很多&lt;/strong&gt;。像我，没健身的时候，对食物是很任性的——想吃就吃，不想吃就算了。我甚至认为人不应该浪费时间去吃饭，因为不吃也不会饿。吃饭的时候，一盘子的饭，我吃半盘就觉得太饱了，觉得自己吃了很多东西。但我后来观察那些稍胖的人吃饭，饭量起码是我的几倍。&lt;/p&gt;
&lt;p&gt;健身以后，每天得强迫自己加餐，鸡蛋、坚果、鸡胸肉等等。刚开始训练的时候，我牛奶是买一升的那种，每天一升。&lt;/p&gt;
&lt;p&gt;我不是专业的营养师，但我可以在这里科普一下，健身的时候应该怎么安排饮食。&lt;/p&gt;
&lt;p&gt;不同的训练目的有不同的饮食方案：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增肌：维持热量冗余&lt;/li&gt;
&lt;li&gt;减脂：维持热量缺口&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里所说的热量，指的是一个人正常活动时所消耗的热量（&lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E5%9F%BA%E7%A1%80%E4%BB%A3%E8%B0%A2%E7%8E%87&quot;&gt;BMR&lt;/a&gt;）。所以从数学上来看，增肌和减脂都是很简单的——了解自己的 BMR, 然后针对需求调节自己的热量摄入。&lt;/p&gt;
&lt;p&gt;如何控制呢？从控制提供热量的三个元素入手：脂肪、蛋白质、碳水化合物。&lt;/p&gt;
&lt;p&gt;我不打算在这里大开篇幅去讲怎么去计算，因为 Google 一下你马上就知道怎么算了。我想说的是，&lt;strong&gt;一定要计算你的摄入量&lt;/strong&gt;。例如增肌，如果你不去估算你自己今天吃有大概多少的热量，那么 99% 你是吃不够的。&lt;/p&gt;
&lt;p&gt;肌肉合成需要蛋白质，所以增肌要保证足够的蛋白质摄入。关于摄入多少，众说纷云。我自己是按照自己体重（kg）乘以 2 换算成克 (g) 为单位的量。例如，体重是 50kg 时，每天至少需要摄入 50 x 2 = 100g 的蛋白质。然后用什么食物去满足这个量，就是你自己的决定了。&lt;/p&gt;
&lt;p&gt;关于更详细的饮食计划，可以看看卓叔的 &lt;a href=&quot;https://zhuanlan.zhihu.com/p/21374019&quot;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;%E5%85%B3%E4%BA%8E%E8%9B%8B%E7%99%BD%E7%B2%89&quot; tabindex=&quot;-1&quot;&gt;关于蛋白粉&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;能不能喝？有没有副作用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;能。没有（除非你的肾本来就有病变）。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;喝多少？是不是每天都要喝？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面已经提到了，你需要计算你每天要摄入多少热量。如果通过三餐或补餐你还是吃不够，那就用蛋白粉（或增肌粉）补够。蛋白粉不是药物，是补剂。这是很简单的数学问题。&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%B3%E4%BA%8E%E8%AE%AD%E7%BB%83&quot; tabindex=&quot;-1&quot;&gt;关于训练&lt;/h2&gt;
&lt;p&gt;我的训练计划是每周 4 练：腿（+胸）、胸（+背）、背（+胸）、肩。&lt;/p&gt;
&lt;p&gt;我不打算在这里详细列出我正在使用的训练计划，也不会教你怎么制定计划（这应该是你教练的任务），而是分享我一直训练以来的一些小经验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;深蹲、硬拉、卧推这三大项是必须学习的，无论是健力还是健美，三大项都是基础。我在商业健身房练了这么久，没有亲眼目睹有教练教深蹲的。所以还是那句话，有条件，尽量选择健身工作室。&lt;/li&gt;
&lt;li&gt;如果你是瘦子，没有太大的必要去做有氧。除非你对心肺能力有要求。&lt;/li&gt;
&lt;li&gt;多做自由力量。固定器械除了安全，对新手没有多大的好处。卧推都没学会，就别去夹胸了。&lt;/li&gt;
&lt;li&gt;学习卧推时，瘦子可能（反正我当初是）连空杆（20kg）都推不稳，建议可以找更轻的杆（我们当时工作室有粉红色的 8kg 的杆）去训练，再慢慢地增加重量。&lt;/li&gt;
&lt;li&gt;记住，新手期，大重量不是你的目标，你的目标是熟悉动作模式。&lt;/li&gt;
&lt;li&gt;新手期，没有必要特别去练你的小肌群，例如手臂（肱二头、三头），手臂的力量会随着三大项成绩的提升而慢慢提升。&lt;/li&gt;
&lt;li&gt;刚开始背部没有感觉，可以选择相对简单一点的动作，例如反向划船。也可以选择感受度高一点的动作，对我自己来说，练背最有感受度的动作是哑铃单臂划船、对握引体向上、固定轨迹的高位下拉。&lt;/li&gt;
&lt;li&gt;关注一下你的关节活动度。这是很多人忽略的。可以问问你的教练，对你的关节灵活度做一个测试。活动度如果不足，要做一些针对性的动作解决一下。不然会一定程度影响训练。我的肩关节活动度受限就很影响我的训练。&lt;/li&gt;
&lt;li&gt;健身先健脑，健身是一门复杂的学问（营养学、解剖学、运动生理学），像你做其它事一样，不断地学习，才会越做越好。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;还有很重要的一点是：&lt;strong&gt;一定要对自己的训练做记录。&lt;/strong&gt; If you don&#39;t mesure it, how can you improve it? 记录你计划里的所有动作，重量、组数、做完后的感受（这很重要，下一次训练是否增加重量需要参考上一次的感受，比如，如果累的程度是 10，这一次训练完的程度是多少？）。&lt;strong&gt;如果没有训练记录，那么你到健身房可以做的动作只有——闲逛。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每一次踏入健身房，你的目标就是，能不能比上一次训练推更大的重量。如果不能，分析自己在哪个环节出了问题——吃不够？还是睡不够？然后去修正自己的问题——睡不够，那就早点睡；吃不够，就吃更多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我很害怕健身房里其它人的目光，怎么办？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其实没有什么人在意你。大家的目光一般是在漂亮的女性，或练得很好的人身上的。我自己在健身房里见瘦子，我的脑回路是这样的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;啊，我以前也是这样的&lt;/li&gt;
&lt;li&gt;很期待看到他坚持下去之后的变化&lt;/li&gt;
&lt;li&gt;他需不需要帮助呢&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;%E6%80%8E%E4%B9%88%E9%80%89%E5%81%A5%E8%BA%AB%E6%88%BF&quot; tabindex=&quot;-1&quot;&gt;怎么选健身房&lt;/h2&gt;
&lt;p&gt;一般来说，健身工作室的设备不会有太大的问题。如果你去找商业健身房，要考虑的因素有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;地理位置。这是最重要的，选一个在你能接受的范围内的。我现在去的健身房，从公司骑车要 10 分钟左右。&lt;/li&gt;
&lt;li&gt;进去先直奔自由力量区：有没有足够的哑铃？有没有足够的杠铃片？最重要的，**有没有自由深蹲架？**没有深蹲架基本可以走了。&lt;/li&gt;
&lt;li&gt;有没有可以让你做硬拉的区域？有的健身房是有一个硬拉区域的（或者在深蹲架里也可以硬拉）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;%E5%85%B3%E4%BA%8E%E5%9D%9A%E6%8C%81&quot; tabindex=&quot;-1&quot;&gt;关于坚持&lt;/h2&gt;
&lt;p&gt;怎么去坚持健身？这是很多人问的问题。&lt;/p&gt;
&lt;p&gt;首先是问自己，为什么开始健身？找到你的源动力。对我自己来说，源动力就是想变得强壮，遇到傻x的时候能自信地面对。&lt;/p&gt;
&lt;p&gt;其次，一定要设立一个目标。而且必须是一个明确的目标。别说什么「我的目标是身体健康」，定一个可以量化的目标。我最初给自己的目标就是：2018 年底至少要体重要达到 60kg (当然我失败了)。如果没有一个可以量化的目标，在你没有爱上健身这个运动之前，你很容易会放弃的。&lt;/p&gt;
&lt;p&gt;然后是不要和别人宣称你在健身，这对你的训练没有任何帮助，甚至会被嘲讽。更加不要傻到在朋友圈打卡——&lt;strong&gt;在你没有取得成果之前，没有人在意你的过程&lt;/strong&gt;。打卡的唯一收获只会是更多人把你屏蔽了。&lt;/p&gt;
&lt;p&gt;当你健身了一段时间，在吃、睡、练三件事都做好的基础上，第三个月绝对会有明显的效果，这是新手的福利期。很快会有人问你，咦？你是不是健身了，怎么壮了那么多（这是我健身 4 个月左右的时候听得最多的一句话）。这时你获得了成就感，享受了健身给你带来的改变，使你继续坚持下去。一直到坚持半年了，你会发现，健身渐渐地变成了你生活中的一部份。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当健身成为了你的一种生活方式时，哪有什么坚持不坚持。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我很多次洗澡脱光衣服看到自己身体的变化，都很感谢一年前的我坚持下来了。我再也不用对自己说「如果我当时...」&lt;/p&gt;
&lt;p&gt;如果你说，「我很想健身，但是我没时间啊！」&lt;/p&gt;
&lt;p&gt;据我观察，很多人所谓的没有时间，是不愿意花时间在健身上面而已。一天只有 24 个小时，除去上班的时间，我的时间很少，但为了健身，我减少了我写代码和玩音乐的时间，这是我付出的代价。&lt;strong&gt;如果你不愿意留你最多 2 小时的时间给健身，只能说明健身这件事在你的生活里优先级不够高罢了&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不愿意把时间花在健身上面并不可耻，这再正常不过了。每个人有每个人的生活方式。如果你用「没有时间」作为借口，那么你相当于在说，我们这些健身的，都是闲得慌的。&lt;/p&gt;
&lt;h2 id=&quot;%E7%9B%B8%E5%85%B3%E9%93%BE%E6%8E%A5&quot; tabindex=&quot;-1&quot;&gt;相关链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/link/gainer&quot;&gt;我喝的增肌粉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/link/protein&quot;&gt;我喝的蛋白粉&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/link/belt&quot;&gt;我用的腰带&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>本博客的赞助渠道</title>
    <link href="https://lutaonan.com/blog/donation/"/>
    <updated>2019-01-10T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/donation/</id>
    <content type="html">&lt;p&gt;你可以通过以下几种赞助渠道表达对我的支持，支持我不断地更新下去：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/my-zsxq&quot;&gt;加入我的知识星球&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;订阅我的&lt;a href=&quot;https://xiaozhuanlan.com/djyde&quot;&gt;付费专栏&lt;/a&gt; （付费专栏完全同步我的博客内容，但不排除之后会有独家内容）&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://patreon.com/djyde&quot;&gt;成为我的 Patron&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然，不捐款你也不会失去什么。你还是可以免费读到我的所有博客内容。&lt;/p&gt;
&lt;p&gt;感谢通过各种渠道捐赠过我的所有人。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2018 年终总结</title>
    <link href="https://lutaonan.com/blog/2018-summary/"/>
    <updated>2019-01-07T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2018-summary/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;大人热爱数字。如果你跟他们说你认识了新朋友，他们从来不会问你重要的事情。他们从来不会说：“他的声音听起来怎么样？他最喜欢什么游戏？他收集蝴蝶吗？”&lt;/p&gt;
&lt;p&gt;他们会问：“他多少岁？有多少个兄弟？他有多重？他父亲赚多少钱？”只有这样他们才会觉得他们了解了他。&lt;/p&gt;
&lt;p&gt;如果你对大人说：“我看到一座漂亮红砖房，窗台上摆着几盆天竺葵，屋顶有许多鸽子……”那他们想象不出这座房子是什么样子的。你必须说：“我看到一座价值十万法郎的房子。”他们就会惊叫：“哇，多漂亮的房子啊！”&lt;/p&gt;
&lt;p&gt;—— 《小王子》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2018 对我自己来说，是灰心的一年。这一年除了和往年一样的焦虑以外，也没有做成什么我认为了不起的事。很大的原因是我对技术失去了信心。&lt;/p&gt;
&lt;p&gt;小时候，我最大的理想是「用技术改变世界」，但我早在我的 &lt;a href=&quot;https://lutaonan.com/blog/2017-summary/&quot;&gt;2017 年终总结&lt;/a&gt; 里提到：「技术并不是那么重要，它只不过是一种手段而已」。今年我更加确信这一点，我们做技术的人，永远只能间接地改变世界。一个可以改变人们生活方式的产品，技术虽是不可缺少的部份，但也不是起决定性作用的部分。&lt;/p&gt;
&lt;p&gt;于我而言这是灾难性的信仰崩塌。&lt;/p&gt;
&lt;p&gt;有时夜里我也会反思，是不是对自己的要求太高了，又或者是，我太想向别人证明自己，害怕自己变得平庸。而在今年，我意识到自己真的变得平庸了，所以我把他称为灰心的一年。&lt;/p&gt;
&lt;p&gt;而今年最主要的心态变化，则是随着年龄的增长和财富的积累，我不免也会想到未来的现实生活。婚姻、家庭、置业，等等。我觉得这些东西不能带给我快乐，它们不是我想要的。但是为什么每一个人都要「善意」地提醒我，你应该这样，应该那样呢。我不买房，便错么？成年人的眼里，为什么都只有所谓的「保值」、「升值」呢。&lt;/p&gt;
&lt;p&gt;我们总说大人们不关心孩子们快不快乐，只关心孩子们的成绩。原来大人们也不关心大人们快不快乐啊。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B7%A5%E4%BD%9C&quot; tabindex=&quot;-1&quot;&gt;工作&lt;/h2&gt;
&lt;p&gt;今年除了支撑了几个业务的后台管理系统以外，主要在思考的东西是如何利用 GraphQL 帮助开发者更轻松地应对中后台管理系统的开发。&lt;/p&gt;
&lt;p&gt;在内部做了很多基建以后我有一个感悟，我们做基建的初衷是提高开发者的效率，但是实际上，影响开发者效率的因素，很大程度是开发者本身。基建能做的很有限。举例来说，Redux 这么一个「简单」的库，却有很多人用不好。在项目里，很多可以简单实现的地方，由于编程水平、经验、对库/框架的了解程度等等条件的不足，开发者就把简单的问题复杂地解决了。&lt;/p&gt;
&lt;p&gt;即使给人一台最好的单反，也不一定拍得出最好的照片——因为重点还是镜头背后的那颗脑袋。&lt;/p&gt;
&lt;p&gt;所以在新的一年，我的目标是多输出一些理论层面的东西。&lt;/p&gt;
&lt;h2 id=&quot;%E6%B6%88%E8%B4%B9&quot; tabindex=&quot;-1&quot;&gt;消费&lt;/h2&gt;
&lt;p&gt;2018 年依然是没有节制地消费，不过买的东西已经不多了（该买的都买过了）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把 Yamaha 的电子琴换成了 Korg Kross1&lt;/li&gt;
&lt;li&gt;搬到了一个 43 平米的一房一厅&lt;/li&gt;
&lt;li&gt;买了 TASCAM 录音笔&lt;/li&gt;
&lt;li&gt;买了 Scarlett 2i2 音频介面 （用来录些 cover）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（不得不提欧德堡全脂牛奶是大概一周一箱...）&lt;/p&gt;
&lt;h2 id=&quot;%E8%BE%93%E5%87%BA&quot; tabindex=&quot;-1&quot;&gt;输出&lt;/h2&gt;
&lt;p&gt;今年尝试性地做了一集技术的短视频内容：&lt;a href=&quot;http://www.bilibili.com/video/av36543409&quot;&gt;《解读 The State of JavaScript 2018》&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E7%94%9F%E6%B4%BB&quot; tabindex=&quot;-1&quot;&gt;生活&lt;/h2&gt;
&lt;p&gt;2018 年我做了决定，我的生活不再是 80% 的 coding time 了，我把更多的时间，花在了别的地方——音乐、健身、读书。这是一个巨大的变化，因为在以前，代码几乎是我生活的全部。&lt;strong&gt;我意识到，如果我稍微放下一点点的代码时间，生活里还可以拥有更多有趣的东西。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%81%A5%E8%BA%AB&quot; tabindex=&quot;-1&quot;&gt;健身&lt;/h3&gt;
&lt;p&gt;&amp;lt;img class=&amp;quot;small&amp;quot; src=&amp;quot;&lt;a href=&quot;https://gbstatic.djyde.com/assets/006tNc79ly1fyy4u0ie1bj30pa0pan1o.jpg&quot;&gt;https://gbstatic.djyde.com/assets/006tNc79ly1fyy4u0ie1bj30pa0pan1o.jpg&lt;/a&gt;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;健身可以说是 2018 年唯一一件做成了的事情。我从 2018 年 1 月份开始健身，每周训练 3-4 天，控制饮食。直到现在刚好整整一年，达到了从 46kg 到 54 kg 的变化。&lt;/p&gt;
&lt;p&gt;如果问我是怎么坚持下来的，我认为无论是坚持什么，都是：因为相信，所以咬着牙坚持试试，坚持了一段时间后，它就成了你的一种生活方式。&lt;strong&gt;当它成为了你的一种生活方式的时候，就无所谓坚持和不坚持了&lt;/strong&gt;。就像你不会去问别人是怎么「坚持」看美剧的一样。&lt;/p&gt;
&lt;p&gt;关于更多我健身的经验，我会在之后单独写一篇文章分享。&lt;/p&gt;
&lt;h3 id=&quot;%E5%BE%B7%E5%B7%9E%E6%89%91%E5%85%8B&quot; tabindex=&quot;-1&quot;&gt;德州扑克&lt;/h3&gt;
&lt;p&gt;今年学会了德州扑克，和朋友打了很多场。我非常喜欢这个扑克游戏，他让我更了解我的牌友，更重要的是，在牌局里，我意识到了自己的缺点：冒进、喜欢承受高风险高回报、贪婪、充满侥幸心理。每次打完，通过回顾自己的打法，我更加了解我自己，我会反思：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;是不是贪婪让我失去了我的筹码？&lt;/li&gt;
&lt;li&gt;下一次我再遇到相同的情况时，我如何控制自己的欲望？&lt;/li&gt;
&lt;li&gt;我应该付出多少的筹码，才是一次价值下注，才能击败我的对手？&lt;/li&gt;
&lt;li&gt;面对失败时，我是否能做到及时止损，调整心态？&lt;/li&gt;
&lt;li&gt;当我读到对方的牌有 80% 的概率是比我强的时候，我是否可以克服自己的侥幸心理而不去跟注？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;德州扑克结合了运气、心理、概率、演技，它不仅是人与人之间的博弈，也能让你有不妥协于运气的机会——你拿一手烂牌，仍然能打好（当然，运气有时候也会打败你，本来在转牌时胜利在望，河牌却是别人的翻身之牌）。&lt;/p&gt;
&lt;p&gt;我还转载排版了世界扑克巡回赛（WPT）总决赛冠军老邱的小传记 &lt;a href=&quot;https://randyloop.gitbooks.io/the-legend-of-david-chiu/content/&quot;&gt;《赌士列传: 老邱传奇》&lt;/a&gt;。相信你可以通过这篇传记感受到德州扑克的魅力。&lt;/p&gt;
&lt;h2 id=&quot;%E5%8D%9A%E5%AE%A2%E6%88%90%E7%BB%A9&quot; tabindex=&quot;-1&quot;&gt;博客成绩&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79ly1fyy7f777sfj31im0cead2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在这一年收到了挺多的读者来信，向我询问建议，我都尽量抽时间一一回复。还有一些文章收到的打赏留言里提到的因为我的文章而有所收获，让我知道我写的博客的确有他的价值所在。&lt;/p&gt;
&lt;h2 id=&quot;%E5%85%B3%E4%BA%8E-2019&quot; tabindex=&quot;-1&quot;&gt;关于 2019&lt;/h2&gt;
&lt;p&gt;希望把生活过得更有趣一些。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2018 香港流行音乐推介</title>
    <link href="https://lutaonan.com/blog/2018-cantonpop-list/"/>
    <updated>2018-12-19T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2018-cantonpop-list/</id>
    <content type="html">&lt;p&gt;「香港乐坛已死」已经不是什么新鲜的论调，这句话也经常被用于伪装自己对当代流行音乐颇有研究。作为一个港乐爱好者，我对此一直持相反的意见。港乐没死，但它的确从大众变成小众了。&lt;/p&gt;
&lt;p&gt;「&lt;a href=&quot;https://blog.yitianshijie.net/2018/12/03/pop-and-nostalgia/&quot;&gt;流行文化产品是时代气息的显影&lt;/a&gt;」，显然，当代粤语片区大多数人们变得不再需要粤语流行歌曲，他们比以前有更多选择，例如综艺、韩国流行文化等等。当然也和当代人接触信息的媒介有很大的关系，毕竟如果消费者可以满足于连「俗气芭乐」都不如的《学猫叫》，那么又何必费钱费心思去做更具音乐性的音乐作品呢。&lt;/p&gt;
&lt;p&gt;当粤语片区的年轻一代人「抛弃」了电视机，加上国内串流音乐服务的版权问题，粤语流行文化在国内就很难传播进来了。如果不是主动接触它，关注它，粤语流行歌曲几乎没有机会进入你的耳朵。唯一的机会是香港艺人参加国内的音乐类综艺节目，但为了照顾观众，唱起了国语，发行的也是国语唱片。&lt;/p&gt;
&lt;p&gt;不发国语唱片的新生代香港音乐人自然更难被发现，但港乐从旋律、编曲、填词都不输中国大陆（以及台湾地区）的流行音乐。下面是一个歌单，这些歌是我心目中 2018 年发行的粤语歌曲中最好的。听完这些歌，你就可以大概清楚目前港乐的发展状况。它是真的不如其它的流行音乐吗？&lt;/p&gt;
&lt;p&gt;（如果你用 PC 访问这篇文章，在这里会有一个 Spotify 播放器，播放这一整个歌单）&lt;/p&gt;
&lt;p&gt;&amp;lt;iframe class=&amp;quot;spotify&amp;quot; src=&amp;quot;&lt;a href=&quot;https://open.spotify.com/embed/user/randyloop/playlist/2A5YT9MzHZw0AilWIu80iW&quot;&gt;https://open.spotify.com/embed/user/randyloop/playlist/2A5YT9MzHZw0AilWIu80iW&lt;/a&gt;&amp;quot; width=&amp;quot;300&amp;quot; height=&amp;quot;80&amp;quot; frameborder=&amp;quot;0&amp;quot; allowtransparency=&amp;quot;true&amp;quot; allow=&amp;quot;encrypted-media&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《心之科学》 容祖儿&lt;/strong&gt; 作曲：&lt;strong&gt;Howie@DearJane &amp;amp; 林家謙&lt;/strong&gt; / 填词：&lt;strong&gt;黃偉文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《小问题》 AGA&lt;/strong&gt; 作曲：&lt;strong&gt;AGA&lt;/strong&gt; / 填词：&lt;strong&gt;陳詠謙&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《未来见》 RubberBand&lt;/strong&gt; 作曲：&lt;strong&gt;RubberBand&lt;/strong&gt; / 填词：&lt;strong&gt;Tim Lui&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《恐怖情人》 许廷铿&lt;/strong&gt; 作曲：&lt;strong&gt;雷頌德&lt;/strong&gt; / 填词：&lt;strong&gt;林夕&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《无期》 AGA&lt;/strong&gt;  作曲：&lt;strong&gt;AGA&lt;/strong&gt; / 填词：&lt;strong&gt;林夕&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《哪儿》 小尘埃&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《仙乐处处飘》 小尘埃&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《挥挥手》 JW&lt;/strong&gt; 作曲：&lt;strong&gt;Eye Fung&lt;/strong&gt; / 填词：&lt;strong&gt;陳詠謙&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《荣辱战争》 林奕匡&lt;/strong&gt; 作曲：&lt;strong&gt;林奕匡&lt;/strong&gt; / 填词：&lt;strong&gt;陳詠謙&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《人妻的伪术》 谢安琪&lt;/strong&gt; 作曲：&lt;strong&gt;雷頌德&lt;/strong&gt; / 填词：&lt;strong&gt;林夕&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《睡前服》 小肥&lt;/strong&gt; 作曲：&lt;strong&gt;小肥&lt;/strong&gt; / 填词：&lt;strong&gt;Tim Lui&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《天才儿童 1985》 张敬轩&lt;/strong&gt; 作曲：&lt;strong&gt;伍樂城&lt;/strong&gt; / 填词：&lt;strong&gt;黃偉文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《重阳》 邓小巧&lt;/strong&gt; 作曲：&lt;strong&gt;林家謙、謝國維&lt;/strong&gt; / 填词：&lt;strong&gt;黃偉文&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《百年树木》 张敬轩&lt;/strong&gt; 作曲：&lt;strong&gt;伍卓賢&lt;/strong&gt; / 填词：&lt;strong&gt;林若寧&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《风尘三侠》 小肥/侧田/6号@RubberBand&lt;/strong&gt; 作曲：&lt;strong&gt;李偉@RubberBand&lt;/strong&gt; / 填词：&lt;strong&gt;林寶&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;《如何从夏天活过来》 黄妍&lt;/strong&gt; 作曲：&lt;strong&gt;黄妍&lt;/strong&gt; / 填词：&lt;strong&gt;黄妍&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我在学校学到的东西</title>
    <link href="https://lutaonan.com/blog/things-i-learnt-at-school/"/>
    <updated>2018-10-04T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/things-i-learnt-at-school/</id>
    <content type="html">&lt;p&gt;今年身边的朋友陆陆续续毕业出来工作了，偶尔有机会的时候会聚在一起聊聊，然后谈到各自的就业情况。我发现有很多朋友还不知道自己想从事的职业是什么，因此也不知道自己未来会怎么样，先做着现在能做的。&lt;/p&gt;
&lt;p&gt;因为我的经历特殊，有人也会对我开玩笑说真不知道读书有什么用，还不如早点出来工作。我知道以我朋友的受教育程度来说，这肯定只是玩笑，他们不可能是「读书无用论」者，所以我也会附和着笑。&lt;/p&gt;
&lt;p&gt;虽然这只是句玩笑话，但是确实令我回顾了一下我从我的在校生涯中得到了什么东西。&lt;/p&gt;
&lt;p&gt;我首先想到的是英语。我的小学是从一年级开始就有英语的课程，所以我接触英语的时间很早。我自认小学四年级以前我还是个很乖的学生，上课认真听讲，作业按时完成。所以我的语数英成绩都很不错。从小培养了「语感」，使得我一直以来可以低障碍地读写英文。这对我的编程学习、职业生涯都有很大的意义。懂英文让我可以亲自融入整个开源社区、技术社区，可以直接在 YouTube 听别人在 Conference 的 Talks, 吸取别人的思想。而不是等别人翻译过来。我认为能低障碍地读写英语是技术人成长很重要的条件。&lt;/p&gt;
&lt;p&gt;尽管我对现阶段的英语教育方式仍然存疑，我还是认为在基础教育里，英语是必不可少的。&lt;/p&gt;
&lt;p&gt;我的价值观和人生观，是我于在校生涯之中建立的。不过不要误会，这些都不是学校的课程直接赋予我的，而是&lt;strong&gt;学校这个「象牙塔」，让我可以有充分的时间去读书、学习和思考&lt;/strong&gt;。我虽然在班上是「差生」，但我敢说我是最爱学习和读书的。这句话要是被我当年的老师看到，估计他要笑个半死，但这是事实，不可否认。我在学校不用供车供房工作赚钱，我可以把一整天的时间花在读书上，&lt;strong&gt;我在我读的所有书里懂得了我应该成为一个什么样的人&lt;/strong&gt;、我应该努力让自己拥有什么样的品格才能算是一个「好人」。&lt;/p&gt;
&lt;p&gt;另外，我很多技术书籍都是在学校读的，比如《JavaScript 高级程序设计》，我读了很多遍。不是我自己想读那么多遍，而是当时我带回学校的就只有这一本书，我一个月才回家一次。那一个月我只能天天都读他。这本书我每读一遍都有新的发现。&lt;/p&gt;
&lt;p&gt;出来工作以后我还能像这样把一本好书读这么多遍又读这么认真吗？可以，但是很难了。&lt;/p&gt;
&lt;p&gt;我高中的时候，最喜欢上语文课。语文课本选的文章其实挺好的，比如说有《棋王》，以及很多《古文观止》里面的文言散文。偶尔发个新试卷，我也很开心，因为一张语文试卷有两篇阅读理解。我高中读的很多书，都是在试卷里和练习册里发现的，新的练习册一发下来，我就把所有的阅读理解都看一遍，看到哪篇我觉得不错的，我就看是节选哪本书，然后就去图书馆借回来。另外，写作文大概是我在学校里唯一的思考输出的方式了，因此我很珍惜每次写作文的机会，我把自己的所思所想全写进文章，以至于每次都很低分，因为离题万里。我的语文老师对我很包容，他知道我想什么，我很感谢他。&lt;/p&gt;
&lt;p&gt;有人会说，你把学校说得那么好，你自己怎么就辍学了呢。&lt;/p&gt;
&lt;p&gt;我认为，一个人在结束学校生涯以前，必须先弄清楚两个问题。一个是，**在离开学校以后，你在社会上是以一个什么样的角色存在？**另一个是，**你是否已经为迎接这个角色做好了充分准备？**学校的意义就是给你时间想清楚问题一，然后给你条件完成问题二。&lt;/p&gt;
&lt;p&gt;我在学校里，早已弄明白了这两个终极问题。我在社会上，将会以软件工程师的角色存在，并且我已经有能力胜任这个职位。往小的说，我能为我所在的公司创造价值，往大的说，我要为整个社区作出贡献。所以（在一所不怎么样的）大学对我来说已经不那么重要了，我希望早点投身社会创造价值。&lt;/p&gt;
&lt;p&gt;很多人就是因为在学校的时候从来不思考这两个问题，所以是「光着身」离开学校的。你是想创造价值，还是想做着不喜欢的工作然后满足于 &lt;a href=&quot;https://wiki.mbalib.com/wiki/%E5%A5%B6%E5%A4%B4%E4%B9%90%E7%90%86%E8%AE%BA&quot;&gt;奶头乐&lt;/a&gt; ，其实都由你自己决定。&lt;/p&gt;
&lt;p&gt;以上，就是我在学校学到的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;延伸阅读&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/37e022fa5f34&quot;&gt;《科学的方法， 公正的态度，果断的决心》--- 竺可桢&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>一个阅读源代码的技巧</title>
    <link href="https://lutaonan.com/blog/trick-for-reading-source-code/"/>
    <updated>2018-09-14T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/trick-for-reading-source-code/</id>
    <content type="html">&lt;p&gt;昨天和朋友聊到阅读开源代码，我分享了自己一个读代码的技巧，就是从第一个 commit 开始读。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/0069RVTdgy1fv921gu1dtj31kw0z3aei.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/0069RVTdgy1fv927o4mqtj31kw0xz11u.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;从第一个 commit 读源码的好处是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;学习别人从零开始建立项目的步骤&lt;/li&gt;
&lt;li&gt;一个项目经过漫长的演进后，有很多代码是为了解决特殊场景（或者 bug）而写的，这些代码对于理解核心逻辑来说，是一种干扰。&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>Serlina: 渐进式的 React 服务器渲染框架</title>
    <link href="https://lutaonan.com/blog/announcing-serlina/"/>
    <updated>2018-08-13T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/announcing-serlina/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;副标题: 《可能是最适合 Egg 的 React Serverside-rendering 方案》&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上一周周末我花了些时间来完成了一个 React serverside-rendering 框架——&lt;a href=&quot;https://github.com/djyde/serlina&quot;&gt;Serlina&lt;/a&gt;. 在此想通过这篇文章讲讲 Serlina 框架本身，以及我为什么要开发她。&lt;/p&gt;
&lt;p&gt;(下文中 React Serverside-rendering 均简称为 &amp;quot;SSR&amp;quot;)&lt;/p&gt;
&lt;h2 id=&quot;%E8%B5%B7%E5%9B%A0&quot; tabindex=&quot;-1&quot;&gt;起因&lt;/h2&gt;
&lt;p&gt;最直接的起因是我们在内部有一个 React base 的项目的首页希望做服务器渲染，我参考了一些方案，如 Next.js, Fusion.js 等等。我很喜欢 Next.js, 我从他刚发布的时候就在持续关注，我认为他已经是最完美的 SSR 方案。&lt;/p&gt;
&lt;p&gt;但是当我试图把 Next.js 接入到我们的服务器端 (&lt;a href=&quot;https://eggjs.org/&quot;&gt;Egg.js&lt;/a&gt; base) 时，我发现 &lt;a href=&quot;https://github.com/eggjs/egg/issues/328&quot;&gt;由于 Next.js 需要控制 http context&lt;/a&gt;, 导致无法兼容 Egg 程序。&lt;/p&gt;
&lt;p&gt;我认为 Next.js 的核心应该可以脱离 http context. 只需要完成构建配置、renderToString 这些脏活，然后把渲染后的 HTML String 返回即可。于是我浏览了 Next.js 的代码，试图寻找类似 &lt;code&gt;nextjs/core&lt;/code&gt; 的东西，然而并没有。Next.js 是一个完整的 Web Framework.&lt;/p&gt;
&lt;p&gt;于是我开始设计一个理念是&lt;strong&gt;脱离服务器实现&lt;/strong&gt;的 SSR 框架，并取名为 Serlina. 她和 Next.js 拥有同样友好的开发体验，唯一不同之处是，她不关心服务器实现。&lt;/p&gt;
&lt;h2 id=&quot;%E6%9C%80%E7%AE%80%E5%8D%95%E7%9A%84%E4%BE%8B%E5%AD%90&quot; tabindex=&quot;-1&quot;&gt;最简单的例子&lt;/h2&gt;
&lt;p&gt;安装依赖&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm i serlina react react-dom --save
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建一个应用目录&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;├── index.js&lt;br /&gt;├── page&lt;br /&gt;│   └── page1.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编写一个 React 页面&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// page/page1.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;Hello Serlina&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后是服务器的实现&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// index.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Serlina &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;serlina&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// 初始化 Serlina&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; serlina &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Serlina&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;baseDir&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;serlina&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writeHead&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;text/html&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/page1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token comment&quot;&gt;// 渲染页面&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rendered &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; serlina&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;page1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;          res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rendered&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;string&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;works!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;        res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;8090&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过以上的例子，Serlina 有两个最主要的 API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prepare()&lt;/code&gt; 用于做构建准备&lt;/li&gt;
&lt;li&gt;&lt;code&gt;render()&lt;/code&gt; 用于渲染 React 页面, 得到 HTML string.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上的例子也表达了 Serlina 的核心思想——她处理了 React 服务器渲染的一切脏活，然后把处理好的东西交给你自己去渲染到客户端。&lt;/p&gt;
&lt;p&gt;这就是「渐进式」的意思：你可以在某些地方用她，也可以在某些地方不用她。你可以只在某个路由里面使用 serlina.render() 去渲染。这有点像是一个模板引擎。&lt;/p&gt;
&lt;h2 id=&quot;%E5%9C%A8-egg-%E4%B8%AD%E4%BD%BF%E7%94%A8&quot; tabindex=&quot;-1&quot;&gt;在 Egg 中使用&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/serlina-community/egg-serlina&quot;&gt;egg-serlina&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我之所以认为 Serlina 是最适合 Egg 的 SSR 方案，是因为我认为 Next.js 是最好的 SSR 方案。而 Serlina 把 Next.js 的体验带到了 Egg, 那么她应该就是最适合 Egg 的 SSR 方案。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;以下内容非 Egg 用户可以跳过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;npm i egg-serlina react react-dom --save
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;exports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;serlina &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&#39;/page1&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;page1&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;配置了用 Serlina 渲染的页面后，页面会在 &lt;code&gt;getInitialProps&lt;/code&gt; 里得到 egg 的 ctx:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// {app_root}/client/page/page1.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Page1&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;React&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getInitialProps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; ctx &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token comment&quot;&gt;// ctx is egg `ctx`&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; ctx&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;service&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getData&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;props&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%B8%B8%E8%A2%AB%E9%97%AE%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98&quot; tabindex=&quot;-1&quot;&gt;常被问到的问题&lt;/h2&gt;
&lt;h3 id=&quot;%E5%92%8C-next.js-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB&quot; tabindex=&quot;-1&quot;&gt;和 Next.js 有什么区别&lt;/h3&gt;
&lt;p&gt;关于这个问题，上文已经说得很清楚了。另外，Serlina 并不是要取代 Next.js, 而是希望在某些场景，能成为一种合适的选择。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>多研究些问题，少谈些框架</title>
    <link href="https://lutaonan.com/blog/think-deeper/"/>
    <updated>2018-07-16T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/think-deeper/</id>
    <content type="html">&lt;p&gt;当我问应聘者「你有什么问题想问」的时候，大多数应聘者会问我前端应该怎么学。我每次都会很真诚地按照面试过程对他们的了解尝试给他们一些建议。从多次的交流当中，我倒是慢慢地了解到了前端领域里很多普遍的问题。&lt;/p&gt;
&lt;p&gt;前端有很多不同的框架和库。 我上大一的时候，有一门课叫网页设计，前几个课时教 HTML, 又教一个课时 CSS, 再教一个课时 JavaScript. 然后是 jQuery. 当时我很气愤，学生连 DOM 是什么都还没搞清楚，就要他们用 jQuery，这不是误人子弟吗。我后来想明白，学校大概已经把 jQuery 看作是饭碗了。&lt;/p&gt;
&lt;p&gt;把库和框架看作饭碗是无可厚非的， 我们不能苛刻地要求所有程序员都对软件开发抱有发自内心的热爱。但是急功近利地学习框架，绝对是举步维艰的。胡适说「多研究些问题，少谈些主义」，在编程上，我认为需要多研究些问题，少谈些框架。&lt;/p&gt;
&lt;p&gt;框架是我们达到目的的便捷手段，我们使用 React, 更要知道为什么使用它？&lt;a href=&quot;https://lutaonan.com/blog/react-and-the-way-building-web-ui/&quot;&gt;它的本质是什么&lt;/a&gt;？它解决了什么问题？所谓「格物致知」，不「格物」，如何「致知」呢？&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2017 年终总结</title>
    <link href="https://lutaonan.com/blog/2017-summary/"/>
    <updated>2018-01-03T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2017-summary/</id>
    <content type="html">&lt;h2 id=&quot;preface&quot; tabindex=&quot;-1&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;我的 2017 过得很平淡，可能是因为出来工作已经是第二年了。&lt;/p&gt;
&lt;p&gt;今年比较特别的是身边的朋友都大四了，参加了一些毕业拍照。大家都陆陆续续地开始找工作，面试。偶尔在朋友圈看到朋友拿到 offer, 也会替他们感到开心。&lt;/p&gt;
&lt;p&gt;有很多朋友开始请教我一些出来工作的经验，面试的技巧、offer 怎么选择、租房的经验等等。被问到这些问题的时候我也会很开心。因为以前上学的时候，学业成绩不好，我在班上除了搞搞笑，对身边的同学来说并没有多大的「用处」。&lt;/p&gt;
&lt;p&gt;4 月份的时候上台拿了 16 年的优秀新人奖，但是 17 年整一年没有做出很出色的成绩。慢慢失落地发现在很多事情上，技术并不是那么重要，它只不过是一种手段而已。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3migpdnvj30tx0txaf6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在年底，和 @EGOIST 一起创办了 &lt;a href=&quot;https://stickeroverflow.org/&quot;&gt;StickerOverflow&lt;/a&gt;. 成功地让国内的开发者能买到高质量的技术贴纸。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3n2vutcoj30u00u0nah.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;今年想得比较多的是应该如何用自己的能力去帮助更多的人。想过去做培训，想过回大学给以前班的人开个交流会，想过写书。最后都搁置了，因为我后来发现，「助人」有时是一件很一厢情愿的事。&lt;/p&gt;
&lt;p&gt;除了技术外，这一年有很多新的尝试，上台唱歌纪念张国荣，参加了唱歌的比赛，做了一期&lt;a href=&quot;http://music.163.com/#/djradio?id=350672104&quot;&gt;音乐电台节目&lt;/a&gt;。在新的一年，还想尝试去经营一个音乐博客，让更多人发现被忽略的优秀粤语流行音乐和歌手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3mgojgc1j30qo0xcafi.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%8D%9A%E5%AE%A2%E6%88%90%E7%BB%A9&quot; tabindex=&quot;-1&quot;&gt;博客成绩&lt;/h2&gt;
&lt;p&gt;今年博客的 PV 和 UV 都小幅度降低了，原因是今年下半年文章写得很少。因为花了不少时间在比写文章更有趣的事情上。&lt;/p&gt;
&lt;p&gt;博客没有广告，但还是会有人因为读文章而受到启发给我赞赏，今年一共收到 ￥136 的赞赏。更开心的是收到了一些真诚的交流邮件。&lt;/p&gt;
&lt;h3 id=&quot;pv%2Fuv&quot; tabindex=&quot;-1&quot;&gt;PV/UV&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn2ebqiqbhj31kw0jvn2k.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;PV: &lt;strong&gt;33,247&lt;/strong&gt; (去年 &lt;strong&gt;49,406&lt;/strong&gt;), UV: 12,172 (去年 &lt;strong&gt;15,800&lt;/strong&gt;)&lt;/p&gt;
&lt;h3 id=&quot;%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F&quot; tabindex=&quot;-1&quot;&gt;操作系统&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn2ec5tdhoj31f00hedhz.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E6%9D%A5%E6%BA%90&quot; tabindex=&quot;-1&quot;&gt;来源&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn2ehoxfhzj316y0ks771.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E7%94%A8%E6%88%B7%E8%AE%BF%E9%97%AE%E7%9A%84%E6%97%B6%E6%AE%B5&quot; tabindex=&quot;-1&quot;&gt;用户访问的时段&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn2ek8wd91j30j60v43zv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E8%AE%BE%E5%A4%87&quot; tabindex=&quot;-1&quot;&gt;设备&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn2ekpdlnwj30iu0v4q4x.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%B6%88%E8%B4%B9&quot; tabindex=&quot;-1&quot;&gt;消费&lt;/h2&gt;
&lt;h3 id=&quot;%E7%94%B5%E5%AD%90%E4%BA%A7%E5%93%81&quot; tabindex=&quot;-1&quot;&gt;电子产品&lt;/h3&gt;
&lt;h4 id=&quot;iphone-8&quot; tabindex=&quot;-1&quot;&gt;iPhone 8&lt;/h4&gt;
&lt;p&gt;把很喜欢的 iPhone SE 退役了，因为跑 iOS11 耗电快，性能不够。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3mzigtncj31ja17uaqe.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;sony-%E9%BB%91%E5%8D%A1-1&quot; tabindex=&quot;-1&quot;&gt;SONY 黑卡 1&lt;/h4&gt;
&lt;p&gt;为了方便写数码产品评测，入手了黑卡 1 代。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3n6gqyzaj30u00u0gqv.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;ds216j%2Fds218%2B&quot; tabindex=&quot;-1&quot;&gt;DS216j/DS218+&lt;/h4&gt;
&lt;p&gt;上半年用 DS216j，因为性能满足不了，年底换成了 DS218+. 关于 NAS 的使用，可以参考&lt;a href=&quot;https://lutaonan.com/blog/synology-ds216j-exp/&quot;&gt;这篇文章&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3n2gyl48j31kw16o19e.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;yamaha-p115-%2F-yamaha-np12&quot; tabindex=&quot;-1&quot;&gt;Yamaha P115 / Yamaha NP12&lt;/h4&gt;
&lt;p&gt;因为要学习 Keyboard，入手了 Yamaha P115 电钢来入门。P115 是全配重的，手感很好，但是重量大，不便携。为了可以携带出去户外表演，于是又入了轻一半重量的 61 键的 NP12。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3mz45nepj31kw16oqew.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3mym8w5vj30u00u2481.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;nintendo-switch&quot; tabindex=&quot;-1&quot;&gt;Nintendo Switch&lt;/h4&gt;
&lt;p&gt;买了 Switch, 圆了掌机梦，玩了《塞尔达传说》和《奥德赛》。因为便携，吃灰率要比 PS4 低。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3n20mksej31kw16mu07.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;dji-spark&quot; tabindex=&quot;-1&quot;&gt;DJI Spark&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tKfTcgy1fn3n6wgqt5j31d81d8ndh.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92&quot; tabindex=&quot;-1&quot;&gt;新年计划&lt;/h2&gt;
&lt;p&gt;2018 年的计划是多写写代码，多玩玩音乐，读更多书，换一间大些的房子，买一辆车。&lt;/p&gt;
&lt;p&gt;有次和朋友聊天，她说，你知道自己想要做什么，又能把它做到，还能靠它养活自己。你千万不能变得世俗啊，如果你也变得世俗，我会觉得这个世界，真的就是那样了。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我的地下刊物</title>
    <link href="https://lutaonan.com/blog/my-underground-publication/"/>
    <updated>2017-08-25T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/my-underground-publication/</id>
    <content type="html">&lt;p&gt;一个月前一位初中朋友 Bunny 发了一篇 &lt;a href=&quot;https://mp.weixin.qq.com/s/tfzlzCEQJuIQDS-Djbg8CA&quot;&gt;《年少的文字》&lt;/a&gt;，讲起了初中的我们搞地下刊物的事，让我想起了那段时间这本刊物的一些点滴。&lt;/p&gt;
&lt;p&gt;这份刊物叫《新视觉》。当年要做这份刊物，是因为那段时间，我读了很多民国时期的文学作品，还读了李开复的那本《世界因你而不同》，使我开始对政治、教育有了不一样的看法。&lt;/p&gt;
&lt;p&gt;当时的我认为文字只有背负了政治的责任，才能称得上文学。所以看不起很多「当代文学」。我对当代文学的定义是 —— 1990 年以后出现的文学。&lt;/p&gt;
&lt;p&gt;班里一个女性朋友很喜欢郭敬明，我却对此嗤之以鼻。于是我给我朋友传教似地讲了很多诸如为什么我们需要关心政治、我们应该读些什么书、我们需要什么样的教育等等这样的话题。但是她不以为然，认为我越俎代疱。&lt;/p&gt;
&lt;p&gt;我想，我应该做一份刊物，来传达我的理念。因为「不识字的上人的当，识字的的上印刷品的当」。&lt;/p&gt;
&lt;p&gt;就这样，我拿了一沓我们学校标准的信签纸，开始做了起来。我把这份刊物叫做《新视觉》，是源于白话文运动时，陈独秀所创的《新青年》。我认为这份刊物的目标，是为了提倡新思想，以摘抄严肃文学作品的形式，启发班上的同学，应该从现在起，去寻找自己的目标，自己想要的是什么，未来想做的是什么。而不是把所有时间，都花在试卷和娱乐上。&lt;/p&gt;
&lt;p&gt;为了传达这份理念，我在首期的《新视觉》的第一页，认真地誊写了 Robert Frost 那首诗 —— The Road Not Taken.&lt;/p&gt;
&lt;p&gt;我现在已经记不清当时摘抄了哪些具体的文字了，只记得抄过王小波、李敖、韩寒、胡适等等。&lt;/p&gt;
&lt;p&gt;这份全手写的刊物开始在班上互相传阅，并不是因为内容深刻，而是因为形式新鲜罢了。我为了这份刊物可以维持下去，「聘请」了上文提到的女同学作为编辑，也接受所有同学的来稿。&lt;/p&gt;
&lt;p&gt;接受同学的来稿后，刊物渐渐成了班级的一部分，甚至每一期都会有人催我「出版」。当时的「出版」形式，则是收集来稿，用钉书机装钉成册。&lt;/p&gt;
&lt;p&gt;同学的来稿很有意思，有人开始做起了小说连载。而我还是做一些摘抄，顺便构思一些虚构类的讽刺文章。同时 Bunny 开始把手写的刊物改革成了真正的印刷品——每周回家录入然后打印出来。&lt;/p&gt;
&lt;p&gt;因为刊物带有媒体属性，班级上一些事件也会被刊登到里面去。例如校运会，我们做了一份校运会特刊，报道了校运会的情况、现场照片。&lt;/p&gt;
&lt;p&gt;虽然刊物在班上火了，但我并不是太开心，因为这本刊物慢慢偏离了我的初衷。我向 Bunny 提出要做一本《新视觉》的子刊物，就叫做「16 度」(我们是 16 班)，把小说连载、读者来信这些内容都放到里面，《新视觉》只做严肃文学。&lt;/p&gt;
&lt;p&gt;于是 Bunny 开始打造《16 度》，而我继续负责《新视觉》。发展到后来，《16 度》其实有很多地方和《最小说》变得很相似，是同学们饭后的话题、减缓考试压力的地方。很多人在上面连载小说。不生产的内容的，也会来留言，说自己对某篇文章的读后感。而这份带有意识形态的《新视觉》很快就没有再连续出版下去了。&lt;/p&gt;
&lt;p&gt;以上是我对这份刊物仅剩的几乎所有回忆，手写的稿早就在初中一次搬课室的过程中丢失了。谁会想到这些东西未来会被这样津津乐道呢。这确实是一个遗憾。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiw9q3a4rvj30hs07e753.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;从手写改革到印刷的头几期&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiw9rbi9otj30hs0aqwfq.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;校运会特刊的「发布会」&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiw9ryihc9j30hs0by0up.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;校运会，「小编」们的一次合照&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>养猫随想</title>
    <link href="https://lutaonan.com/blog/cat-capriccio/"/>
    <updated>2017-08-20T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/cat-capriccio/</id>
    <content type="html">&lt;p&gt;我是个很怕负责任并且不感性的人，养一只猫对我来说，是一种很大的责任。&lt;/p&gt;
&lt;p&gt;传闻说猫的智商相当于 2～3 岁的小孩，所以我会把养她当作是在养我的小孩，每个月要花钱换猫砂，去超市要顺便买些罐头，偶尔也想去宠物店看看有什么好玩的玩具。养猫和养小孩的区别，我想大概就在于前者的过程中不需要担负教育的责任。教育很难。&lt;/p&gt;
&lt;p&gt;我外甥女今年刚好是 3 岁，有时候我也觉得和猫很像：见到什么都要摸摸看，甚至打翻。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiql519bi7j31kw16owiy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;对于猫打翻东西，一般来说，主人都会生气。但是我想，3 岁的小孩打翻了东西，其实是监护人的责任。既然家里多了这个不懂事的小孩，易打翻的东西就不该让她碰到。出现事故，自己要先反思。&lt;/p&gt;
&lt;p&gt;她不会完全信任我，她吃东西，我路过，她有时还是会立刻跑开。帮她滴清耳液的时候，她看到我拿着瓶子也会跑开。但有时候我觉得她也很信任我，每次回家，不管她的时候她都要一直叫，非要爬过来腿上让我摸才停。养猫有趣的地方就是这里，你要向一种时刻保持警惕的生物身上获得信任。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiqjq2lx3rj30qo0zk458.jpg&quot; alt=&quot;来我家第二天，对我的第一次试探&quot; /&gt;&lt;/p&gt;
&lt;p&gt;第一次带她去医院打疫苗，在医院里我和几个素味谋面的猫主人狗主人竟然可以自然地打成一片，互相交流育宠经验，然后让自己的宠物见一见对方的宠物。大家都像妈妈们互相交流育儿经验似的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiql61x2ukj31kw23vtdy.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiql69t9fxj31kw23vgyo.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;有时候在路上看到走过的流浪猫，会想要不要把它养了，让她有个伴。但是想想，我确实还没有做好二胎的准备。&lt;/p&gt;
&lt;p&gt;前段时间发烧，在搞保险报销的时候，我想如果可以给宠物也买保险，我也会给她买一份。&lt;/p&gt;
&lt;p&gt;养一只猫不容易，何况养一个人。所以养猫之后，有时我会留意街上怀孕的路人，想她们是不是做好了准备，去承担这份责任呢。这需要一份勇气和担当，还有深思熟虑。&lt;/p&gt;
&lt;p&gt;鲁迅在《热风》里谈到孩子，他说，「中国的孩子，只要生，不管他好不好，只要多，不管他才不才。生他的人，不负教他的责任。虽然“人口众多”这一句话，很可以闭了眼睛自负，然而这许多人口，便只在尘土中辗转，小的时候，不把他当人，大了以后，也做不了人。」&lt;/p&gt;
&lt;p&gt;因此我很怕，我没有准备好，没有想好要怎么做教育。我要先把猫照顾好，才有信心去养一个人。&lt;/p&gt;
&lt;p&gt;以上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fiql4208ayj31kw11xtcw.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我的编程经历</title>
    <link href="https://lutaonan.com/blog/my-coding-road/"/>
    <updated>2017-05-12T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/my-coding-road/</id>
    <content type="html">&lt;p&gt;我接触编程的时间比较早，是 13 岁。我为什么记得是 13 岁，因为我六年级那年正好 13 岁，我是六年级开始编程的。&lt;/p&gt;
&lt;p&gt;很多人会问我，你是怎么会想到要编程的。其实是因为当时班上有一个和我很要好的同学，他在写 PHP。我小学上的是私立学校，每个教室讲台都配了一台用于播放教学  PPT 的电脑。有一天他告诉我他写了一个博客，用的是 PHP。然后在讲台的电脑打开了他博客的后台，改了几句 CSS, 博客的颜色就变了。我当时很震惊，觉得我自己也要学会。&lt;/p&gt;
&lt;p&gt;但是我没有去学 PHP，原因是 PHP 的书太贵了。我拿着我交学杂费的 20 块找零，到购书中心买技术书，最终找到了一本 19 块的《C 语言程序设计》，不是谭浩强的，是一本中专教材。&lt;/p&gt;
&lt;p&gt;当时的我对编程没有什么概念，对语言当然也没有概念。回到家，跟着书上的步骤，安装了 Turbo C, 写一些四则运算。&lt;/p&gt;
&lt;p&gt;入门编程最难的其实就是这个阶段，面对白字黑底的命令行，写的是代码，做的是数学题（算水仙化数，算 Fibonacci）。&lt;/p&gt;
&lt;p&gt;我是个数学不好的人，小学教到了除法以后，我的数学成绩就没上过 85 分。因为我花了很长的时间理解除法，到我理解了以后，教学进度已经很往后了。数学对程序员来说重要吗？我觉得很重要，因为数学决定了一个工程师的上限。但我实在太笨，无论如何也学不好。&lt;/p&gt;
&lt;p&gt;于是我对 C 语言开始失去兴趣，开始搞 GUI 了。&lt;/p&gt;
&lt;p&gt;我是 2009 年开始搞 GUI 的，那年刚上初一，读了李兴平的经历，备受鼓舞。李兴平是 hao123 的作者，2004 年的时候被百度收购了。我决心也要做一个网址导航。&lt;/p&gt;
&lt;p&gt;因为这个网址导航的目标，我正式接触了前端开发。从一本教 Dreamweaver 的书里面学了 HTML, 在 w3school 学了 DIV + CSS 布局。很快我就写出了第一个网址导航的 demo, 但是是静态的页面，里面所有的网址栏位都是自己手动编辑的。&lt;/p&gt;
&lt;p&gt;这段经历对我来说收获很大，因为通过编写一个网址导航，掌握了很多 HTML, CSS 的技巧。这些技巧是无法通过书本系统习得的。&lt;/p&gt;
&lt;p&gt;做技术不是照本宣科，因为&lt;strong&gt;语法是有限的，但是想象力和智慧是无限的&lt;/strong&gt;。举个例子，你可能从文档和书本上了解了 float 属性，但是只有当你开始写一个横向导航的时候，才会思考到，可以用 float 把 &lt;code&gt;ul&lt;/code&gt; 中的纵向的 &lt;code&gt;li&lt;/code&gt; 变成横向。&lt;/p&gt;
&lt;p&gt;另外一个例子是 TJ 的 &lt;code&gt;co&lt;/code&gt;. 可能大多数的人都知道 Generator, 但是 TJ 想到了基于 Generator 把异步写得像同步。这是一种想象力。所以为什么要读源码，因为语法是有限的，想象力是无限的。&lt;/p&gt;
&lt;p&gt;这使得我多年来一直保持一种习惯，来保持我的想象力。就是每当我看到一些有趣的网页效果的时候，都会先思考，如果我来写，我会怎么写。最后审查元素，看看我想的和具体实现是不是不同？如果不同，是不是别人的实现比我更好？是不是用到了开源库？如果没有，那么我是不是可以把这种效果封装起来？&lt;/p&gt;
&lt;p&gt;文档只会告诉你 border-radius 的特性，但是人们的想象力可以用其特性实现一个三角形。在人类的进化当中，是想象力使智人到达了食物链的顶端。在软件开发上，我认为是智慧和想象力使工程师达到卓越。&lt;/p&gt;
&lt;p&gt;在掌握了基本的网页开发技能以后，我的重心转移到了桌面软件的开发上。因为当时我错误判断了桌面软件的前景，认为桌面软件才是未来。所以我尝试了 Delphi, 因为 Delphi 而学习了 Pascal.&lt;/p&gt;
&lt;p&gt;其中一个很有趣的经历是我学过 Delphi 以后意外地得知了易语言。易语言号称中文开发，所有语句都是中文的。易语言内置的控件库非常丰富，是当时我被吸引的最重要的原因。&lt;/p&gt;
&lt;p&gt;学习了一段时间后，我开发了第一个上线到软件站的软件，叫做「网帝系统清理助手 2009」，至今还能 Google 出来。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNbRwgy1ffihstvr4cj30j50ej406.jpg&quot; alt=&quot;网帝系统清理助手&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我那时非常中二，成立了自己的虚拟软件工作室，取名「网帝」。这是一个充满抱负的名字，因为他的含义是「互联网帝王」。&lt;/p&gt;
&lt;p&gt;软件上线了以后，在各个软件站的下载量很不错，于是我又马不停蹄地开发了第二个软件，叫「网帝 QQ2009 去广告精灵」，用来去 QQ2009 里的广告的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNbRwgy1ffihwq5n5vj30cz0a3wfu.jpg&quot; alt=&quot;网帝 QQ2009 去广告精灵&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我那时候开始泡易语言的论坛，结识了很多论坛里的大牛，那时候称「大虾」。我记得有一个网名叫「凝逸」的版主，用易语言开发了一个叫「凝逸反病毒」的杀毒软件。我很震惊，因为我非常好奇杀毒软件的工作原理。于是我在他的帖子里询问，但是他没有回过我一次。&lt;/p&gt;
&lt;p&gt;我又通过自己的摸索，做了一个可以根据病毒库查找病毒、保护 IE 主页的杀毒软件，「极光反病毒」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNbRwgy1ffii37s8ejj30ik0emmym.jpg&quot; alt=&quot;极光反病毒&quot; /&gt;&lt;/p&gt;
&lt;p&gt;以上三个软件是我做桌面软件时的产出，当时还在读初一。做完极光反病毒的第一版后，我觉得这种反病毒太傻，要依赖特征库去匹配病毒。病毒稍微变种，就查不出来了。于是我想要做一个防御式的反病毒工具，根据文件的行为，来判断它是不是病毒。比如如果这个文件在不断复制自己，那么它肯定是病毒。&lt;/p&gt;
&lt;p&gt;易语言没有文件监控的 API, 我只好学习一个微软的亲生儿子，C#.NET 来做这件事。不过后来学到一半，由于学业压力，没有继续再做下去。&lt;/p&gt;
&lt;p&gt;2010 年年底有一部电影对我影响很大，讲 Zuckerberg 创立 Facebook 的经历，叫《社交网络》。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNbRwgy1ffify2ip6jj30bk0go40a.jpg&quot; alt=&quot;The Social Network&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这部电影我反复看了 7, 8 遍，我觉得用技术做出有很多人喜欢的产品太酷了，我很想成为这样的人，应该是我终身奋斗的目标。这部电影，直接导致我放弃了桌面软件开发，正式转向了 Web 开发。&lt;/p&gt;
&lt;p&gt;我的 PHP 就是这段时期学的，因为 Facebook 是用 PHP 写的。我买了一本蓝色封面的书，《PHP + MySQL 程序设计》。这本书的内容讲得头头是道，但是我一点都看不懂。我对 Web 开发除了网页设计以外一窍不通。结果我又去买了一本国产的书，《PHP 兄弟连》。&lt;/p&gt;
&lt;p&gt;这本书的作者是专门搞 PHP 培训的，讲得比较浅显易懂，成了我的救命宝典。从那本书里，我对 PHP Web 开发有了一个大概的了解，知道 LAMP 架构，知道一个完整的 Web 系统应该有哪些基本的部分，知道什么是模板引擎，更重要的是，开始接触 Linux。读完读那本《PHP + MySQL 程序设计》，犹如打通了任督二脉。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNbRwgy1ffiiwdpdj5j30w40saq8h.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;后来我用 PHP 做了一个我们校内的非常精简的社交平台，不是说我那时就开始崇尚极简，而是我的能力就到这了。于是脑抽风去找学校的副校长谈，结果副校长说这个不错，但是我们不主张校内建的讨论区。&lt;/p&gt;
&lt;p&gt;我深受挫败，然后就学 Python 去了。&lt;/p&gt;
&lt;p&gt;学 Python 是因为一个 Python Web 框架 Tornado. 看多了 PHP, 会觉得 Python 非常美。Tornado 本身也很美，尤其是路由的设计，和 &lt;a href=&quot;http://web.py/&quot;&gt;Web.py&lt;/a&gt; 一样美。我从此再也没写过 PHP。&lt;/p&gt;
&lt;p&gt;我没有用 Python 写过什么有效的产出，但是从学习 Tornado 的过程中，我了解了异步的概念。Tornado 是个异步 IO 的 Web 框架，这对我之后学习 Node.js 十分有帮助。&lt;/p&gt;
&lt;p&gt;整个初中大概就是这么过去的，初三那段时间是一段技术真空期，因为有升学压力，并且开始沉迷文学作品。&lt;/p&gt;
&lt;p&gt;升上高中以后是我技术上一个很重要的转折点，因为我鬼使神差地从一个成绩优异的学生，变成了一个老师眼中的差生。&lt;/p&gt;
&lt;p&gt;这对我来说意义非凡，因为我由此决定放弃学业，专攻编程。那时候 2011 年年底，刚好是 Node.js 最火的那一年。&lt;/p&gt;
&lt;p&gt;我是在那年开始读《JavaScript 高级程序设计》的。我并非毫无基础地读这本书，我在写网址导航的时候，已经读过几遍《JavaScript DOM 编程艺术》了。&lt;/p&gt;
&lt;p&gt;所以很多人到后来会问我，我想学前端，有什么书推荐？我都会给他推荐这两本书。先读完《JavaScript DOM 编程艺术》，再&lt;strong&gt;反复读&lt;/strong&gt;《JavaScript 高级程序设计》。为什么是强调反复读，因为就我来说，这本书，我每读一遍，都有新的收获。甚至工作以后遇到问题，我也会翻一翻这本书，重新复习里面的原理。&lt;/p&gt;
&lt;p&gt;和我接触过的人，不多不少都知道我是一个相信社区的人，因为我算是见证着 JavaScript 在社区发展的，一群人是怎么样通过社区创造生态的。没有社区，一切都不可能。&lt;/p&gt;
&lt;p&gt;所以我也积极参与到社区里面去。很多人害怕社区，认为自己的水平不够，其实是种错误的想法。参与社区不仅仅代表贡献代码。阅读源码，发表源码分析的文章，这是参与社区；阅读代码，动手修改 bug, pull request, 这是参与社区；不读代码，帮忙解决 issue, 这是参与社区；不读代码，关注一个项目的进展、规划、出谋划策、提意见，这也是参与社区。这样的水平要求高吗？&lt;/p&gt;
&lt;p&gt;学 Node.js, 我用 Express, MongoDB 写了一个可以提交 Chrome 插件的插件商城。这个项目对我自己的意义在于，整个产品都由我自己一手包办，部署、项目架构、数据库设计、文案，等等。一手包办的意义在于，我知道链条中的每一部分是怎么工作的，前端和后端是如何配合的，这使得我往后在团队合作的时候，和别人的沟通十分流畅。&lt;/p&gt;
&lt;p&gt;在高中的最后一个阶段，我学习了 Angular, 双向绑定那时在前端是一个新鲜事，颠覆了以往以手动操作 DOM 节点为核心的开发模式。那段时间印象最深刻的是，我花了大量时间，来把自己的思维从 MVC 的模式，转换到 MVVM 的模式。&lt;/p&gt;
&lt;p&gt;高考完的暑假，我入手了人生第一台 Android 手机 Nexus 5, 我开始学 Android 开发。在学 Android 开发以前，我是一个 Java 无脑黑。认为 Java 罗嗦，严格类型。但是从 Android 开发的经历，我对 Java 逐渐改观。很多在我看来的无意义的、罗嗦的代码里，换来的是工程上的健壮性，可维护性。我会思考，如果可以选，我愿意用 JavaScript 去写 Android 的 Application 层吗？我不愿意，因为 JavaScript 不适合。&lt;/p&gt;
&lt;p&gt;虽然我后来也上架了些 Android App, 但是学会辩证地看待每一门语言却是我学习 Android 最宝贵的财富。&lt;/p&gt;
&lt;p&gt;上完大一我就退学了，原因简单来说就是旷课太多。整个大一我进步很大，因为 Android 开发和前端开发我是并行学习的。退学以后，就开始了职业生涯。&lt;/p&gt;
&lt;p&gt;其实我没有想过我会以前端工程师的身份进入这个行业，因为我高考后是立志成为一名优秀的 Android 工程师的。前端于我而言，只是一个基本技能。但是找工作迫在眉睫，又不能拿我半桶水的水平去应聘 Android 开发。&lt;/p&gt;
&lt;p&gt;所以我的意思是，无论我现在的职位方向是什么，比如我现在是前端工程师，但我首先是一个软件工程师，其次才是前端工程师。语言只不过是你的工具而已。&lt;/p&gt;
&lt;p&gt;如果要我说我学习编程有什么技巧，我认为是首先要清楚，你想做的是什么。再去想，你用什么去做。&lt;/p&gt;
&lt;p&gt;最后再分享一些一路以来的点滴：&lt;/p&gt;
&lt;p&gt;我家人都是很传统的一代，不理解我学习编程最终能做出什么，他们主张先完成学业，再做这件事。但是我很清楚我自己的智商，不足以多线程处理不同的大领域，所以我顶着压力，努力地做出来他们能看出来的「成绩」，才能换来他们的理解。所以，如果你通过你的理性分析，坚持认为某件事情是对的，就努力的去做，不要放弃了以后看到另一个人做了你曾经想做的东西然后感慨当初应该怎么样怎么样。我尤其感谢我的父母，没有因为自己的不理解而采取强制措施阻止我沉迷计算机，例如拔网线。&lt;/p&gt;
&lt;p&gt;第二件事是我初中的时候读的是私立封闭式的学校，两周才能回家一趟。我当时是怎么学编程的呢？每次回到家，我都把要读的教学，存到我的 U 盘里。回到学校，趁老师不在的时候，就偷偷用讲台上读。在家里的时候，玩电脑时间被限制在 2 小时，我会用这两小时，把要读的教学，排版成 txt，然后放在 U 盘，插到电视上（当时的电脑可以播 txt），在电视上读 txt. 我的 Pascal 就是这么学的。&lt;/p&gt;
&lt;p&gt;相对于我那时的情况，其实大家能学习的时间和机会都要多得多，如果你真正热爱这一件事，我想，无论什么样的情况，你都能抽得出精力和时间，去使你自己变得更好。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>搭建自己的 Gitlab CI Runner</title>
    <link href="https://lutaonan.com/blog/gitlab-ci-runner/"/>
    <updated>2017-04-20T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/gitlab-ci-runner/</id>
    <content type="html">&lt;nav class=&quot;table-of-contents&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#preface&quot;&gt;Preface&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#ci-(continuous-integration)&quot;&gt;CI (Continuous Integration)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#ci-runner&quot;&gt;CI Runner&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#gitlab-runner-%E7%8E%AF%E5%A2%83&quot;&gt;Gitlab Runner 环境&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#%E5%AE%89%E8%A3%85-docker&quot;&gt;安装 Docker&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#%E6%8B%89%E5%8F%96-gitlab-runner-%E9%95%9C%E5%83%8F&quot;&gt;拉取 gitlab-runner 镜像&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#%E6%B7%BB%E5%8A%A0-gitlab-runner-container&quot;&gt;添加 gitlab-runner container&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#%E9%85%8D%E7%BD%AE%E7%94%A8%E4%BA%8E-runner-%E7%9A%84-docker-image&quot;&gt;配置用于 runner 的 docker image&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#%E6%9E%84%E5%BB%BA-docker-image&quot;&gt;构建 Docker Image&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#%E6%B3%A8%E5%86%8C-runner&quot;&gt;注册 Runner&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#faq&quot;&gt;FAQ&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#ci-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%87%BA%E7%8E%B0-error%3A-job-failed%3A-api-error-(404)%3A-repository-xxx-not-found%3A-does-not-exist-or-no-pull-access&quot;&gt;CI 运行时出现 ERROR: Job failed: API error (404): repository xxx not found: does not exist or no pull access&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/gitlab-ci-runner/#%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB&quot;&gt;延伸阅读&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/nav&gt;&lt;blockquote&gt;
&lt;p&gt;假定你已经有一台可用的，可联网的机器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;preface&quot; tabindex=&quot;-1&quot;&gt;Preface&lt;/h2&gt;
&lt;p&gt;这篇文章将介绍如何使用自己的机器来搭建用于 Gitlab CI 的 runner.  在搭建自己的 CI Runner 之前，需要先明确一些概念：&lt;/p&gt;
&lt;h3 id=&quot;ci-(continuous-integration)&quot; tabindex=&quot;-1&quot;&gt;CI (Continuous Integration)&lt;/h3&gt;
&lt;p&gt;CI 的全称是 Continuous Integration (持续集成)，是 extreme programming (极限编程) 的一部分。我们常用 CI 来做一些自动化工作，这种自动化工作会运行在一台集中的机器上，比如程序的打包，单元测试，部署等。这种构建方式避免了了打包环境差异引动的错误，并且通过 Gitlab 的 hook, 在代码提交的各个环节自动地完成一系列的构建工作。&lt;/p&gt;
&lt;h3 id=&quot;ci-runner&quot; tabindex=&quot;-1&quot;&gt;CI Runner&lt;/h3&gt;
&lt;p&gt;和第三方的 Travis CI, CircleCI 不同，&lt;strong&gt;Gitlab 本身并不提供机器&lt;/strong&gt;，只提供一个注册机器的接口。这些机器用于运行构建逻辑，在 Gitlab 中被称为 Runner.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fet5ffxwglj31ac0y2wj8.jpg&quot; alt=&quot;runners&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;gitlab-runner-%E7%8E%AF%E5%A2%83&quot; tabindex=&quot;-1&quot;&gt;Gitlab Runner 环境&lt;/h2&gt;
&lt;p&gt;在这里直接使用 Gitlab Runner 的官方 docker image:&lt;/p&gt;
&lt;h3 id=&quot;%E5%AE%89%E8%A3%85-docker&quot; tabindex=&quot;-1&quot;&gt;安装 Docker&lt;/h3&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -sSL https://get.daocloud.io/docker &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%8B%89%E5%8F%96-gitlab-runner-%E9%95%9C%E5%83%8F&quot; tabindex=&quot;-1&quot;&gt;拉取 gitlab-runner 镜像&lt;/h3&gt;
&lt;p&gt;因为众所周知的原因，国内 pull docker 镜像非常不稳定，所以在这里用 Daocloud 提供的镜像：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -sSL https://get.daocloud.io/daotools/set_mirror.sh &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; -s http://718dbf2d.m.daocloud.io&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; restart&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;拉取镜像：&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; pull gitlab/gitlab-runner:latest&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%B7%BB%E5%8A%A0-gitlab-runner-container&quot; tabindex=&quot;-1&quot;&gt;添加 gitlab-runner container&lt;/h3&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run -d --name gitlab-runner --restart always &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  -v /srv/gitlab-runner/config:/etc/gitlab-runner &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  -v /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;  gitlab/gitlab-runner:latest&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E9%85%8D%E7%BD%AE%E7%94%A8%E4%BA%8E-runner-%E7%9A%84-docker-image&quot; tabindex=&quot;-1&quot;&gt;配置用于 runner 的 docker image&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;虽然 Gitlab 支持多种 runner 运行方式，但本文建议使用 docker，因为使用 docker 较为灵活，一台机器可以创建多个 docker images 分别为不同的项目进行 CI, 但仍能保持环境隔离。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;配置 Docker image 最简单的方式是写 &lt;code&gt;Dockerfile&lt;/code&gt;, 比如可以用 Node.js 官方的 Docker image:&lt;/p&gt;
&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Dockerfile&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node:7.9.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于每个业务总会有各自的环境要求，比如应用依赖底层的库。这时可以通过 &lt;code&gt;Dockerfile&lt;/code&gt; 配置：&lt;/p&gt;
&lt;pre class=&quot;language-dockerfile&quot;&gt;&lt;code class=&quot;language-dockerfile&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# Dockerfile&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;FROM&lt;/span&gt; node:7.9.0&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token instruction&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;RUN&lt;/span&gt; apt-get update &amp;amp;&amp;amp; apt-get install -y &lt;span class=&quot;token operator&quot;&gt;\&lt;/span&gt;&lt;br /&gt;	package-foo&lt;/span&gt;&lt;br /&gt;	package-bar&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E6%9E%84%E5%BB%BA-docker-image&quot; tabindex=&quot;-1&quot;&gt;构建 Docker Image&lt;/h3&gt;
&lt;p&gt;写好 &lt;code&gt;Dockerfile&lt;/code&gt; 后，需要把它构建成 Image:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Dockerfile&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; build -t IMAGE_NAME &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build 完后，通过 &lt;code&gt;sudo docker image ls&lt;/code&gt; 查看 image 状态。&lt;/p&gt;
&lt;h3 id=&quot;%E6%B3%A8%E5%86%8C-runner&quot; tabindex=&quot;-1&quot;&gt;注册 Runner&lt;/h3&gt;
&lt;p&gt;接下来就可以注册 Runner:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; -it gitlab-runner gitlab-ci-multi-runner register&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;程序会要求你填写相关的信息，这些信息可以从 Gitlab 项目的 &lt;code&gt;Settings -&amp;gt; Runners&lt;/code&gt; 页面中找到：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fetavn7r0lj319u0os78u.jpg&quot; alt=&quot;Gitlab runner info&quot; /&gt;&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Please enter the gitlab-ci coordinator URL:&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# http://gitlab.alibaba-inc.com/ci&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Please enter the gitlab-ci token &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this runner:&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# 项目的 token&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Please enter the gitlab-ci description &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this runner:&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Runner 的 description&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Please enter the gitlab-ci tags &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this runner &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;comma separated&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# Runner 的 tag&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Whether to run untagged builds &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;true/false&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;:&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Please enter the executor: docker, parallels, shell, kubernetes, docker-ssh, ssh, virtualbox, docker+machine, docker-ssh+machine:&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# docker&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Please enter the default Docker image &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e.g. ruby:2.1&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;:&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# 填入构建 Docker image 时填写的 image 名称&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这时 runner 就会出现在 &lt;code&gt;runners&lt;/code&gt; 页面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/assets/006tNc79gy1fetbnh1e12j310008qdgs.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;faq&quot; tabindex=&quot;-1&quot;&gt;FAQ&lt;/h2&gt;
&lt;h3 id=&quot;ci-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%87%BA%E7%8E%B0-error%3A-job-failed%3A-api-error-(404)%3A-repository-xxx-not-found%3A-does-not-exist-or-no-pull-access&quot; tabindex=&quot;-1&quot;&gt;CI 运行时出现 &lt;code&gt;ERROR: Job failed: API error (404): repository xxx not found: does not exist or no pull access&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;这是由于 Gitlab 会默认从远程拉取 image，而我们的 image 是在本地构建的，所以需要对 gitlab-runner 进行配置，把 &lt;code&gt;pull_policy&lt;/code&gt; 设置为 &lt;code&gt;if-not-present&lt;/code&gt; 或 &lt;code&gt;never&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# 进入 gitlab-runner 的 bash 环境&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; -it gitlab-runner &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;# 编辑 config.toml&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;nano&lt;/span&gt; /etc/gitlab-runner/config.toml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑 &lt;code&gt;config.toml&lt;/code&gt; 中对应的 runner:&lt;/p&gt;
&lt;pre class=&quot;language-diff&quot;&gt;&lt;code class=&quot;language-diff&quot;&gt;[[runners]]&lt;br /&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; name = &quot;&quot;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; url = &quot;&quot;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; token = &quot;&quot;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; executor = &quot;docker&quot;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; [runners.docker]&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   tls_verify = false&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   image = &quot;nb-node&quot;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   privileged = false&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   disable_cache = false&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   volumes = [&quot;/cache&quot;]&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token inserted-sign inserted&quot;&gt;&lt;span class=&quot;token prefix inserted&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token line&quot;&gt;   pull_policy = &quot;if-not-present&quot;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token unchanged&quot;&gt;&lt;span class=&quot;token prefix unchanged&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token line&quot;&gt; [runners.cache]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB&quot; tabindex=&quot;-1&quot;&gt;延伸阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/install/docker.html&quot;&gt;Run GitLab Runner in a container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.daocloud.io/mirror#accelerator-doc&quot;&gt;配置 Docker 加速器&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&quot;&gt;Best practices for writing Dockerfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/runner/executors/docker.html#using-the-if-not-present-pull-policy&quot;&gt;Using the if-not-present pull policy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>做技术要自信</title>
    <link href="https://lutaonan.com/blog/do-have-faith-with-yourself/"/>
    <updated>2017-03-14T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/do-have-faith-with-yourself/</id>
    <content type="html">&lt;p&gt;我很久以前就把博客的评论直接去掉了，原因是大多数评论毫无营养，如果我发技术类的文章，评论都是「围观」，「膜拜」之类的内容。偶尔有人会通过微博私信问我技术，开头都是很客气，称呼我「大神」，然后声称自己很「菜」。总的来说，就是把自己的地位拉得很底，误以为这是一种谦虚。&lt;/p&gt;
&lt;p&gt;「大神」这类的称呼一开口，会把两个人的距离感拉得特别长，就像闰土叫了迅哥儿一声「老爷」。我没有觉得自己很厉害，反而是越学越自卑了。我总结了这些视我为「大神」的网友，不过是经验比我少一些， 或者思考的东西比我少一些而已。&lt;/p&gt;
&lt;p&gt;于是我回想自己刚接触编程的时候，也很喜欢逛 BBS， 看一些版块上有些许知名度的网友，发自己的新作品，心里很是羡慕，觉得他们技术很强，是无法触及的。我只能静静地看着，不断地思考他们做出来的功能是怎么实现的，然后翻书找。实在找不到，也会回回贴，发发站内信，请教一下实现的思路，不过基本是没有人会回复我的，因为那时年轻，提问的方式很蠢。渐渐地，我的经验也因为自己做的 side project 日积月累了出来，慢慢地也成了一些人口中的「大神」。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果说这其中的成长有什么秘诀，我认为是自信：遇到自己不懂的问题时，永远相信自己可以通过不断的学习和查阅资料得到解答，并使解决问题的经验成为自己的一部份。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;妄自菲薄会让人变懒，认为自己永远达不到别人的高度而放弃努力。很多人因为不自信，开始依赖别人，把自己活成配角，又苦恼自己不成长。我通常会建议他读一读《提问的智慧》，学会自己先思考问题。我从前也很害怕问比我富有经验的开发者问题，因为我害怕自己的提问很蠢。因此每次提问前，会先梳理好问题梗概，我做了什么去解决这个问题，最后才小心翼翼地把问题发出去。其实往往在梳理问题的过程中，自己就把问题想通了。&lt;/p&gt;
&lt;p&gt;所以做技术要自信，不要做伸手党，要多思考。开源不是所谓的「大神」才能参与的，你也可以参与，从读代码开始。每一个你眼中的「大神」都不是生下来就会编程，他们只是善于自己解决问题，并坚信自己能解决问题，最后成功解决问题。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>电脑键盘上的流行钢琴伴奏</title>
    <link href="https://lutaonan.com/blog/piano-on-computer-keyboard/"/>
    <updated>2017-02-19T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/piano-on-computer-keyboard/</id>
    <content type="html">&lt;p&gt;我在好几个月前入了一个 MIDI 键盘，自学了一段时间的流行钢琴伴奏(弹唱)和相关的乐理，但是由于工作和其它事情的原因，没有太多的时间练习指法，以至于仍然很难熟练地弹唱一首流行歌曲。&lt;/p&gt;
&lt;p&gt;我想，我要花很长时间来练习我的键盘指法，但是作为一个程序员，我对电脑键盘的键位了如指掌。于是我开始考虑把钢琴键盘移植到电脑键盘上。&lt;/p&gt;
&lt;p&gt;如果你 Google 一下 online piano 的关键词，你会搜出很多在 PC 上模拟钢琴键盘的 demo. 但是这些 demo 的出发点都是把钢琴键盘上每一个黑键白键都序列化地映射在电脑键盘上。这种程序演奏一下单音，弹首小星星还行，但是真的要在上面弹一首流行伴奏，几乎不可能。&lt;/p&gt;
&lt;p&gt;首先和弦是由几个不同音高的音组合成的，如果单纯把音序列化地映射到每个按键上，即使是最简单的三和弦，你都没有办法准确地在电脑键盘上同时按下 1 3 5 来弹出一个 C chord. 借鉴五笔输入法的设计，我设计出了通过按键映射和弦(chord)，以及对应的分解和弦(broken chord)的键盘布局方案，来降低演奏时对指法的要求，简化流行钢琴伴奏。&lt;/p&gt;
&lt;p&gt;利用这个周末，我已经把这个想法初步实现了出来，在这个初步版本里，已经实现了例如右手柱式和弦的几种转位、自动弹奏左手降两个八度的根音、分解和弦在键盘上的映射等等这些基本能力，通过这些能力已经可以玩一些简单的伴奏 pattern，比如常说的 151， 1531 等等。&lt;/p&gt;
&lt;h2 id=&quot;how-it-likes&quot; tabindex=&quot;-1&quot;&gt;How it likes&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/pciano-screenshot.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;在浏览器上面，我写了一个钢琴键盘排列，来展示当前所按到的音。&lt;/p&gt;
&lt;p&gt;为了证明这个东西真的能弹出伴奏，我特意录了一个用它来弹唱的视频，唱的是薛之谦的《绅士》：&lt;/p&gt;
&lt;p&gt;&amp;lt;video src=&amp;quot;&lt;a href=&quot;https://o86cdh9ph.qnssl.com/video/IMG_7722.mp4&quot;&gt;//o86cdh9ph.qnssl.com/video/IMG_7722.mp4&lt;/a&gt;&amp;quot; controls preload=&amp;quot;none&amp;quot;&amp;gt;&amp;lt;/video&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;why-it-works&quot; tabindex=&quot;-1&quot;&gt;Why it works&lt;/h2&gt;
&lt;p&gt;流行钢琴伴奏和古典钢琴不同，流行钢琴伴奏的重点在于节拍的掌握以及对和弦进行丰富。事实上许多流行歌曲都围绕一个相同的和弦进程（chord progression）来创作旋律，所以**一首伴奏好不好听，很大程度上取决于怎样用不同的 pattern 来丰富你的和弦进程而已。**除了一首歌的 Intro 外，基本可以用和弦去完成一首歌曲的伴奏。在这个前提下，用电脑键盘来弹奏流行钢琴也不是不可能的事。因为我可以通过按键映射和弦以及分解和弦。&lt;/p&gt;
&lt;h2 id=&quot;how-it-works&quot; tabindex=&quot;-1&quot;&gt;How it works&lt;/h2&gt;
&lt;p&gt;下图表示了初期版本的键位映射关系：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/IMG_7700.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CDEFGAB 分别是以 C major scale 为基础的和弦。比如按下 C 就会弹奏 &lt;code&gt;C&lt;/code&gt;, 按 A 则会弹奏 &lt;code&gt;Am&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Y P H J 分别是分解和弦的根音、五音、高八度一音和高八度三音。程序会根据当前弹奏的和弦自动分解并映射到这些按键上&lt;/li&gt;
&lt;li&gt;control, shift, space 分别对应三和弦的第一、第二转位以及低八度的第二转位&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;从技术上来说，我把 Piano Keyboard 转化成了程序里的数据结构，通过计算得出相应和弦的转位。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/pciano-code-snippet.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;%E5%B1%80%E9%99%90%E6%80%A7&quot; tabindex=&quot;-1&quot;&gt;局限性&lt;/h2&gt;
&lt;p&gt;电脑键盘比不上真钢琴或者 MIDI 键盘在于延音和力度都没有办法控制。脚踏板是钢琴的灵魂，因此用电脑键盘演奏有时会觉得一些位置非常单调、生硬，不够丰富，但又无能为力。&lt;/p&gt;
&lt;p&gt;&amp;lt;!--## 写在最后&lt;/p&gt;
&lt;p&gt;王小波的数学老师有一次对他说：「我现在所教的数学，你们也许一生都用不到，但我还是要教，因为这些知识是好的，应该让你产知道」。在我看来，学习总会有用，无论学的是什么，它总会在某一天派上用场。如果我没有学乐理，我写不出这样的程序来。另外，在写这个程序的过程中，我也后悔高中没有学好排列组合。--&amp;gt;&lt;/p&gt;
&lt;h2 id=&quot;play-it-now&quot; tabindex=&quot;-1&quot;&gt;Play it now&lt;/h2&gt;
&lt;p&gt;代码开源在 &lt;a href=&quot;https://github.com/djyde/Pciano&quot;&gt;https://github.com/djyde/Pciano&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;用电脑访问 &lt;a href=&quot;https://djyde.github.io/Pciano/&quot;&gt;https://djyde.github.io/Pciano/&lt;/a&gt; 即可&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>从 React 谈 Web UI 开发</title>
    <link href="https://lutaonan.com/blog/react-and-the-way-building-web-ui/"/>
    <updated>2017-01-01T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/react-and-the-way-building-web-ui/</id>
    <content type="html">&lt;p&gt;&amp;lt;blockquote class=&amp;quot;twitter-tweet&amp;quot; data-lang=&amp;quot;en&amp;quot;&amp;gt;&amp;lt;p lang=&amp;quot;en&amp;quot; dir=&amp;quot;ltr&amp;quot;&amp;gt;If using React makes u confused, it&#39;s time to think about what React actually is. It&#39;s a great DOM diff algorithm with component system.&amp;lt;/p&amp;gt;— Randy (@randyloop) &amp;lt;a href=&amp;quot;&lt;a href=&quot;https://twitter.com/randyloop/status/814663047541231616&quot;&gt;https://twitter.com/randyloop/status/814663047541231616&lt;/a&gt;&amp;quot;&amp;gt;December 30, 2016&amp;lt;/a&amp;gt;&amp;lt;/blockquote&amp;gt;
&amp;lt;component is=&amp;quot;script&amp;quot; async src=&amp;quot;&lt;a href=&quot;https://platform.twitter.com/widgets.js&quot;&gt;//platform.twitter.com/widgets.js&lt;/a&gt;&amp;quot; charset=&amp;quot;utf-8&amp;quot;&amp;gt;&amp;lt;/component&amp;gt;&lt;/p&gt;
&lt;p&gt;此前我在 Twitter 上这样表达过对 React 的理解，但是 Twitter 篇幅有限，所以在这篇文章里，我要做更详尽的阐述。&lt;/p&gt;
&lt;p&gt;我从前不喜欢 React, 是因为写 React 的 render function 不像写 template 一样方便，尤其是存在复杂的判断渲染的时候，Vue 的 template 一个 v-if 就搞定了。而在 React 里写，需要把这个判断写成 function, 然后条件判断 return 哪一个 view. 这是我最初对 React 的偏见所在之一。&lt;/p&gt;
&lt;p&gt;然而经过自己的实践和思考，加上阅读一些文章，我发现以前的想法是错的。我在使用 React 的时候，没有做到 Thinking in React. 从而对 React 产生了不解和困惑。&lt;/p&gt;
&lt;p&gt;有很多人把 React 当成框架来用，这是用不好 React 的根本原因。很少人认真思考 &lt;strong&gt;A JavaScript library for building User Interface&lt;/strong&gt; 背后的含义，把 React 用得一团糟。&lt;/p&gt;
&lt;p&gt;何谓 For Building User Interface? 意思就是，这个库仅仅是用于构建 UI 的，这是 React 本质要解决的问题。我甚至和很多人说，事实上 React 本身是不是 React 已经不重要了，重要的是我们写 UI 的思维。&lt;strong&gt;React 这个 library 本身仅仅是用来实现这个思维的手段&lt;/strong&gt;。React 提供的，是优秀的 DOM diff 算法，和一套 Component system。换成代码来说，也就是：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; View&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是 React building UI 的核心思想，所有的组件，就是接受 state, 返回一个 View. 这样看上去比较抽象，比如我们有一个 Clock 组件：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&lt;br /&gt;&amp;lt;div id=&#39;clock&#39;&gt;&lt;br /&gt;	&amp;lt;span&gt;It&#39;s now: &amp;lt;/span&gt;&lt;br /&gt;	&amp;lt;span&gt;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;time&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;lt;/span&gt;&lt;br /&gt;&amp;lt;/div&gt;&lt;br /&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Clock 是一个 function, 接受一个 time 参数，返回的是一串 HTML String. 在程序里，我们可以给一个 Interval, 每秒传一个当前的 time, 得到一个新的 HTML String, 然后 apply 到某个 DOM 上。&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  $app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerHTMl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Clock&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样的实现是能达到目的的，但是问题在于，每次 &lt;code&gt;innerHTML&lt;/code&gt; 时，整个 &lt;code&gt;#app&lt;/code&gt; 的 DOM 树会被重新渲染。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/plain-render-clock.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我们都知道，DOM 更新的花费是昂贵的。整个 DOM 树，实际上只是一个 &lt;code&gt;span&lt;/code&gt; 在不断变化，所以我们需要 DOM diff 算法来得知到底哪一个 DOM 节点才需要被更新，从而节省开销：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;Clock&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;clock&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;It&#39;s now&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;time&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;span&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Clock time&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; $app&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 React 里，把 props 传入，返回一个类似 HTML 的结构，然后 render 到指定的 DOM 节点上。这里 React 会算出哪个节点应该被更新：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/react-render-clock.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;我们这样手动去 setInterval 然后 render 未免有点傻，我们可以更改 state (也就是通常用到的 &lt;code&gt;setState&lt;/code&gt;) 自动地让 React 随着 state 的改变而重新 render. 这里的 time 就是一个 state. 这叫做 Reactive.&lt;/p&gt;
&lt;p&gt;Functional Programming 里有 Pure Function 的概念。Pure Function 之所以 Pure, 是因为不存在 side effect. 举个例子，我们写一个求和 function：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; b&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个求和函数就是一个 pure function. 因为函数内部没有对 input 做任何改变，并且返回一个新的值。我传 1 和 1，得到的永远是 2.&lt;/p&gt;
&lt;p&gt;Pure Function 的好处是利于维护和测试。要测试一个 Pure Function, 仅仅是传不同的值，预言对应的返回值。&lt;/p&gt;
&lt;p&gt;现在回头看 React 的 Component, 也可以算是一个 Pure Function——接收不同的 props, 然后 render 对应的 View. 上面 Clock 的例子，props 和返回的 View 是映射关系。&lt;/p&gt;
&lt;p&gt;光是 &lt;code&gt;state =&amp;gt; View&lt;/code&gt; 还不够，在构建 UI 的时候，我们希望 state 改变的时候，立即 rerender 整个 View, 也就是我们经常用到的 &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这样就很容易理解为什么我说 React 仅仅是实现构建 UI 思想的手段，因为构建 UI 的思想总结起来就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;State 是 Reactive 的 (比如 React 的 &lt;code&gt;setState&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;state =&amp;gt; View (依靠 DOM diff)&lt;/li&gt;
&lt;li&gt;View 组成 Component&lt;/li&gt;
&lt;li&gt;管理 state （依靠第三方的 state manager）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;无论是 React 还是 Vue, 大抵都是这样的思想。Vue 1 还不完全是，Vue 2 就更接近了，只是后者写法既可以写得像 template, 又可以写直接写 vdom.&lt;/p&gt;
&lt;p&gt;而开发者常常感到困难的地方实际上是上面的第 4 点——管理 state. &lt;strong&gt;写 React 写得痛苦，大部分原因是用把 library 当成 framework 去用&lt;/strong&gt;，把处理 state 的逻辑瞎写到 View 层中去，也就是所谓的 Dump Component.&lt;/p&gt;
&lt;p&gt;改变 state 是 side effect, 我们应该把它从 View 层中分离出去。我多次提到，&lt;strong&gt;View 层真正要做的，仅仅是根据 state 返回对应的 View&lt;/strong&gt;. state 的变化逻辑，应该在给 state manager 库去做，例如 Redux, Mobx. 下面我用 Mobx 作为例子：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/mobx-ticker.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://jsbin.com/fumerup/edit?js,output&quot;&gt;https://jsbin.com/fumerup/edit?js,output&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;如果没有接触过 Mobx 不用慌张，只需要知道，Mobx 的 Observable 变化时，被 observer 包装的 React 组件会重新渲染。使用 state manager, 明显地分离了 View 和 side-effect:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/state-effect-view.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;测试这样的程序，首先为 side effect 的逻辑做测试，再为 View 做测试。View 的测试在这里就十分简单了，给他传一个 store 实例，借助 &lt;a href=&quot;https://github.com/airbnb/enzyme&quot;&gt;enzyme&lt;/a&gt; 之类的 testing utilities 预言不同的 action 得到的返回 View.&lt;/p&gt;
&lt;p&gt;React 是 Reactive Programming 在 Web User Interface 上实现的手段，它只不过是一个库，提供了reactive render, component system 和降低开销的 DOM diff 算法. 把 React 换掉，只要不是手动操作 DOM, 其它的框架也不过大同小异。重要的是理解它背后的思想。说到底，前端开发在解决什么问题，用什么样的方式解决问题，在使用任何框架和库之前先把这两个问题思考明白，就不会认为前端难学了。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2016 年终总结</title>
    <link href="https://lutaonan.com/blog/2016-summary/"/>
    <updated>2016-12-28T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2016-summary/</id>
    <content type="html">&lt;h2 id=&quot;%E5%8D%9A%E5%AE%A2%E7%AF%87&quot; tabindex=&quot;-1&quot;&gt;博客篇&lt;/h2&gt;
&lt;p&gt;开篇讲讲这个博客这一年的「成绩」：&lt;/p&gt;
&lt;h4 id=&quot;%E8%AE%BF%E9%97%AE%E9%87%8F&quot; tabindex=&quot;-1&quot;&gt;访问量&lt;/h4&gt;
&lt;p&gt;因为今年年中进行过博客迁移，从 github pages 迁到了阿里云，还换了整个 blog platform. 所以新旧博客的统计要结合起来看。&lt;/p&gt;
&lt;p&gt;旧博客统计：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/old_blog.png&quot; alt=&quot;旧博客统计&quot; /&gt;&lt;/p&gt;
&lt;p&gt;新博客统计：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/new_blog.png&quot; alt=&quot;新博客统计&quot; /&gt;&lt;/p&gt;
&lt;p&gt;总计： PV &lt;strong&gt;49,406&lt;/strong&gt;，UV &lt;strong&gt;15,800&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;%E8%AE%BF%E9%97%AE%E8%AE%BE%E5%A4%87&quot; tabindex=&quot;-1&quot;&gt;访问设备&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/newblog_devices.png&quot; alt=&quot;访问设备&quot; /&gt;&lt;/p&gt;
&lt;p&gt;iPhone 用户仍然排第一，第二是小米。&lt;/p&gt;
&lt;h4 id=&quot;%E6%9D%A5%E6%BA%90%E6%B5%8F%E8%A7%88%E5%99%A8&quot; tabindex=&quot;-1&quot;&gt;来源浏览器&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/newblog_browser.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h4 id=&quot;%E6%96%87%E7%AB%A0%E6%8E%92%E8%A1%8C&quot; tabindex=&quot;-1&quot;&gt;文章排行&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/oldblog_post_trend.png&quot; alt=&quot;旧博客排行&quot; /&gt;&lt;/p&gt;
&lt;p&gt;上半年一个 Vue 和 Webpack 系列访问量比较大。下半年给自己的博客定位不是单纯的技术博客，访问量比较大的是关于退学的两篇文章。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/newblog_post_trend.png&quot; alt=&quot;新博客排行&quot; /&gt;&lt;/p&gt;
&lt;p&gt;坚持做独立博客很难，坚持写博客更难。我没有开公众号，因为开公众号会让我感到有压力，更会让我「为了推送而写文章」。也是因为赞同&lt;a href=&quot;http://coolshell.cn/articles/17391.html&quot;&gt;陈皓的观点&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E6%8A%80%E6%9C%AF%E7%AF%87&quot; tabindex=&quot;-1&quot;&gt;技术篇&lt;/h2&gt;
&lt;p&gt;今年因为工作原因，把大部分的精力花在了 React 上，Vue 反倒没什么机会写了。写 React 的过程中对 Thinking in React 有了不同的看法。我从前不喜欢 JSX, 不喜欢 &lt;code&gt;setState&lt;/code&gt;, 但是慢慢地开始思考 Functional Programming, Reactive Programming. 后来发现，React 是不是 React 已经不重要了，因为 React 只是实现它思想的手段，更重要的是在其背后的，UI Development 的观念 —— &lt;code&gt;(state) =&amp;gt; View&lt;/code&gt;。无论如何争论 Functional Programming，它的的确确改变了我对程序开发的想法，我开始追求 Pure Function，开始讲究函数的 side-effect. 我想下一年我还会对 FRP 做更深入的研究。关于这方面的感悟，我会单独写成文章。&lt;/p&gt;
&lt;p&gt;比较快乐的是在一些项目里使用了 TypeScript. 自己也写了&lt;a href=&quot;http://lutaonan.com/is-static-type-in-javascript-a-burden/&quot;&gt;文章&lt;/a&gt;，录了&lt;a href=&quot;http://www.bilibili.com/video/av6511223/&quot;&gt;视频&lt;/a&gt;, 来表达我对这个语言的看法。&lt;/p&gt;
&lt;p&gt;这一年参加了两个 Talk, 一个是珠三角技术沙龙，讲的是 Vue 和 Native. 另一个是 Node 地下铁，讲了 TypeScript. 关于技术分享，我在知乎有&lt;a href=&quot;https://www.zhihu.com/question/52777303/answer/136427221&quot;&gt;一篇回答&lt;/a&gt; 讲了我对国内技术分享会议的看法。希望我自己在接下来的一年能有更大的长进，然后用自己的行动去告诉大家技术分享应该怎么做。&lt;/p&gt;
&lt;p&gt;比较遗憾的是工作之后减少了写开源项目的时间，今年对开源社区最大的贡献就只有给一本&lt;a href=&quot;https://github.com/basarat/typescript-book&quot;&gt;TypeScript 书&lt;/a&gt; 贡献了些内容。&lt;/p&gt;
&lt;h2 id=&quot;%E5%B7%A5%E4%BD%9C%E7%AF%87&quot; tabindex=&quot;-1&quot;&gt;工作篇&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/gitlab.png&quot; alt=&quot;Gitlab Summary&quot; /&gt;&lt;/p&gt;
&lt;p&gt;从 3 月份入职，完成了一个项目的重构，帮助了一些还有些迷茫的朋友，用自己的热情感染了团队的技术氛围，是在这一年工作上让我自己感到满足的事情。&lt;/p&gt;
&lt;h2 id=&quot;%E8%AF%BB%E4%B9%A6%E7%AF%87&quot; tabindex=&quot;-1&quot;&gt;读书篇&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/25930025/&quot;&gt;&lt;strong&gt;Just for Fun: The Story of an Accidental Revolutionary&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux 创始人 Linus 的自传，记录了 Linus 的少年时期和 Linux 的诞生，之中还夹杂一些对开放源代码的观念。读完以后很受鼓舞，能像 Linus 一样是我做软件开发的终极目标。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26835090/&quot;&gt;&lt;strong&gt;Soft Skills: The software developer&#39;s life manual&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文名叫《软技能：代码之外的生存指南》。我很不喜欢这类教别人做人的书，但是受人推荐，还是读完了。&lt;/p&gt;
&lt;p&gt;书里有几个章节我印象比较深刻。比如谈到大公司、中等规模公司、创业公司之前的区别：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在大公司工作令人沮丧，因为他们感到他们个人的贡献无足轻重&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;为大公司工作的一个显而易见的事情就是成长机会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;结合自身条件和自己喜欢的工作环境进行职业选择，是需要深思熟虑的事情。&lt;/p&gt;
&lt;p&gt;书中还谈了个人品牌的打造，学历问题等等。都值得一读。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/1467587/&quot;&gt;&lt;strong&gt;The Art of UNIX Programming&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中文名是《UNIX 编程艺术》。万幸我用 macOS 也算是 UNIX 环境的重度用户，所以在读这本书的时候不会感到吃力。这本书实际上和 UNIX 源代码没有什么关系，讲的是 UNIX 下的程序（比如 grep），这些程序的设计哲学让我对软件有了新的思考。&lt;/p&gt;
&lt;p&gt;编写复杂软件又不至于把自己搞混乱的方法是降低软件整体的复杂度。软件本身的复杂度不会因为实现方式和代码组织的优秀而降低，但是这能使整体复杂度降低。降低整体复杂度的方法是&lt;strong&gt;用清晰的接口把复杂的软件分解成若干个简单的模块&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;每把剃刀都自有其哲学，更何况是软件开发呢。即使是开发一个小函数，它的输入和输出也是需要讲究的。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26849305/&quot;&gt;&lt;strong&gt;Becomming Steve Jobs&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我没有读《乔布斯传》，而是选了这本《成为乔布斯》，是听说这本传记记录的乔布斯要更真实。事实上通过很多途径都已经宏观上对乔布斯有了很大程度上的了解，所以读传记的时候已经没有对某些事件产生触动。反而触动我的是一些小细节上，比如书中提到乔布斯父亲的话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于一个橱柜来说，别人看不到的底面与表面的抛光一样重要；对于一辆雪佛兰汽车来说，别人看不到的刹车片和汽车的油漆一样重要。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/6558202/&quot;&gt;&lt;strong&gt;容忍与自由&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我求学时期读了很多民国作家的书，唯独胡适先生的书读得不多。今年读了这本文集，意犹未尽，还想读他的《中国的哲学》，但看来要等下一年了。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/26759508/&quot;&gt;&lt;strong&gt;Elon Musk&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;硅谷「钢铁侠」Elon Musk 的传记。十分羡慕财富自由又有想法的人。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://book.douban.com/subject/25985021/&quot;&gt;&lt;strong&gt;A brief history of humankind&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐这本有趣的《人类简史》，看人类是如何从原始人进化过来的。&lt;/p&gt;
&lt;h2 id=&quot;%E6%B8%B8%E6%88%8F%E7%AF%87&quot; tabindex=&quot;-1&quot;&gt;游戏篇&lt;/h2&gt;
&lt;p&gt;今年买了 PS4, 人生第一台游戏机。玩了几款大作，《最后的生还者》、《神秘海域》、《GTA5》、《看门狗》。印象较深的是《最后的生还者》，没有 PS4 的也建议视频通关。&lt;/p&gt;
&lt;p&gt;下半年换了 Macbook Pro 也入了 Steam 的坑，Steam 的游戏和 PS4 比简直就是白菜价。沉迷了一段时间 Don&#39;t Starve. 通关了 Firewatch.&lt;/p&gt;
&lt;h2 id=&quot;%E8%87%AA%E6%88%91%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;自我总结&lt;/h2&gt;
&lt;p&gt;这一年的成长比较横向，不仅仅在技术，还学习了音乐，健身等等。遗憾是改不掉一直以来喜欢「急」的缺点，急于完成事情，不多加考虑。甚至容易使自己在快要完成一件事情的时候，容易由于太急，最后烂尾，比如&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我看牙医的经历</title>
    <link href="https://lutaonan.com/blog/dentist-exp/"/>
    <updated>2016-11-26T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/dentist-exp/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;今年断断续续从 3 月到 11 月我都在牙诊接受牙齿修复，直到今天，修复已经完全做好了。在这个过程中我对牙科有了全新的认识，于是我希望通过分享我这一段经历，让更多人重视牙齿健康。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不想看长文，可以直接跳到本文末尾的 TLDR.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我的牙齿属于牙釉质发育不全，虽然从刚换牙的时候我就发现我的牙和别人不一样，但还是在今年 3 月初才准确知道的。那时我刚好智齿在发炎，去医院打算拔掉，一个医生看了我的牙，说你的牙齿烂得很厉害，釉质基本没了，要做牙冠保护，不然再过几年牙就没了。&lt;/p&gt;
&lt;p&gt;听了以后我心情复杂，我说我还这么年轻啊。医生说，你的牙用 1 年等于正常人用 5 年的啊。&lt;/p&gt;
&lt;p&gt;做牙冠的费用不少，我就回家跟家人说了一下情况，然后又去附近一家牙诊所咨询意见。牙诊所的牙医一看，问我是哪里人，因为他不确定这是釉质发育不全还是氟斑牙，而广东这边的水质一般不会出现氟斑牙的情况。我说我是广东中山的，于是他就基本确定是釉质发育不全了。&lt;/p&gt;
&lt;p&gt;他再仔细看我牙齿的情况，最后说了一句：你还是去省口腔医院吧，你这些牙的磨损程度太高，咬合又低，我们这里的设备没有办法做到很高，你给钱我们也不做。&lt;/p&gt;
&lt;p&gt;我开始感到情况似乎越来越悲观，后来我姐姐给我推荐了广州某口腔诊所的熊医生，于是我到了广州找他。&lt;/p&gt;
&lt;p&gt;熊医生看了我的牙以后，说磨损的确挺严重，但是牙冠还是能做，只不过要做很多颗而已。他和另外几位医生会给我做一个方案。&lt;/p&gt;
&lt;p&gt;到底什么是釉质发育不全，首先要清楚一只牙齿的结构：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/WechatIMG2.jpeg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是我随手画的一张牙齿抽象图。一颗牙的最外层就是所说的釉质(也称「珐琅质」)，而黄色这一层就是牙本质。牙釉质是牙齿最坚硬的部分，也是哺乳动物体内最坚硬的组织，用于咬碎食物，以及保护牙本质。他是不可再生的，所以&lt;strong&gt;蛀掉的牙一定不会自愈&lt;/strong&gt;。牙本质是黄色的，而釉质是白色半透明的，因此&lt;strong&gt;正常人最自然的牙齿是偏黄色的&lt;/strong&gt;。而当釉质被磨损越严重时，牙本质几乎被暴露，才会越来越显非正常的黄。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/tooth-1.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是我在后来修复过程中做的下排牙模，可以明显看出，发育不全的釉质比较脆弱，两边的后牙磨损严重，甚至快要磨到底了。在咬合的时候，基本只能靠磨损出来的几个尖尖的点来咬食物。&lt;/p&gt;
&lt;p&gt;熊医生给我的方案是，8 颗后牙做根管治疗然后做牙冠，顺便在做牙冠的过程中重整咬合。&lt;/p&gt;
&lt;p&gt;为什么需要重整咬合呢？因为我的后牙几乎完全没有咬合。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/IMG_5772.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;这是修复前和修复后的侧面对比，可以看出修复前的后牙基本没咬合。&lt;/p&gt;
&lt;p&gt;于是整个修复流程开始。而根管治疗是整个过程中最漫长和痛苦的步骤。即使在手术过程中会注射麻药，疼痛还是存在。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/Root_Canal_Illustration_Molar.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;上面维基百科上的根管治疗流程图。简单来说，就是从牙齿中间钻开，然后人为把牙神经杀死。牙神经被杀死后，牙齿就不会再有感觉。一般来说，根管治疗都是用于治疗牙髓坏死或牙根感染。而我的情况是做牙冠需要磨一部分牙，如果不把牙神经杀死，磨牙磨到牙本质的疼痛是无法忍受的。&lt;/p&gt;
&lt;p&gt;杀死牙神经后，还需要等待一个星期，然后填充药物，最后再补牙。&lt;/p&gt;
&lt;p&gt;经过几乎两个月的时间，两边的根管治疗完全做好了。由于经济问题，我拖了很长时间才开始做牙冠。&lt;/p&gt;
&lt;p&gt;做牙冠首先要把牙齿磨小一圈，留位置套上新牙冠。磨小以后，咬硅胶、做牙模，然后发给牙冠制造厂家做。这个过程大概需要一周，也就是说，我两边分开做，起码有两周时间需要单边咀嚼。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/IMG_5768.jpg&quot; alt=&quot;分别是修复前、过程中、修复后的状态&quot; /&gt;&lt;/p&gt;
&lt;p&gt;上面分别是修复前、过程中、修复后的状态。&lt;/p&gt;
&lt;p&gt;在修复右边时，有一段小插曲。我的右下智齿阻生并且已经萌出，影响到做牙冠的位置，所以要先把智齿拔掉。拔掉智齿的过程用了两分钟。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/IMG_5539.png&quot; alt=&quot;智齿&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;tldr&quot; tabindex=&quot;-1&quot;&gt;TLDR&lt;/h3&gt;
&lt;p&gt;在做牙齿修复的这段时间，我向牙医学习了很多关于牙齿的常识。虽然我的牙齿问题并非由于后天影响，但偶尔会看见一些人来做牙齿治疗，有很多都是没有太把问题当一回事，到问题严重才会来看牙医。都以为牙疼忍忍就过去了，然而等到再疼下去，等到把牙髓坏死的时候才来找医生，也就只能做根管治疗了。&lt;/p&gt;
&lt;p&gt;也有很多人，蛀了牙也不补，最后疼了，有的人也不管，眼看整个牙都要蛀掉了，来看牙医，也就只能种牙了。&lt;/p&gt;
&lt;p&gt;大多数人都不知道，补牙能够解决问题是有多幸福，然而大多数人都只会拖着。没有人想要花钱买难受，做根管治疗又贵又疼，真是心疼肉也疼。有好几次我在做根管的过程中都要疼得叫出来，但是又有什么办法呢，这是发育不良，没有办法改变。但是在读这篇文章的各位，你们都要比我幸运得多，你们天生就有一排好牙，希望你们不要浪费。在这里我有一些微小的建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你从没有洗过牙，打开团购 app, 找离你最近的牙诊所，预约一个洗牙，不贵，也不疼。然后坚持半年或一年洗一次。&lt;/li&gt;
&lt;li&gt;把手动牙刷换成电动牙刷，有条件的话，帮你的父母也换上。然后上网找刷牙的视频，学会正确的刷牙方法。&lt;/li&gt;
&lt;li&gt;如果你有牙已经蛀了，不要等，立刻去补。&lt;/li&gt;
&lt;li&gt;如果你很穷，又不想遵循以上建议的话。呵呵。&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>你根本用不着退学</title>
    <link href="https://lutaonan.com/blog/you-dont-need-to-drop-out/"/>
    <updated>2016-11-06T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/you-dont-need-to-drop-out/</id>
    <content type="html">&lt;p&gt;近一年来我收到过很多邮件，说看了我的经历和文章，也想退学了。大意都是「看了你的经历，我觉得我和你一样，所以我也想退学了」，要我给他们一些意见。&lt;/p&gt;
&lt;p&gt;我的意见向来是都是劝回学校好好读书，好好拿个学位证，&lt;strong&gt;反对一切没有铺好后路的退学行为&lt;/strong&gt;。直到越来越多这样的人来找我问这样的意见，我意识到我应该认真的写一写我对退学的看法。&lt;/p&gt;
&lt;p&gt;选择退学代表放弃学位（也就是所谓的文凭），这是一个沉重的代价，&lt;strong&gt;因为学历很重要。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;学历像是人的脸。对于样貌，大家都说，「长得好看没有用，内在美最重要」。乍听上去是这么一回事，但是如果长得不好看，茫茫人海里，会有多大的概率有人主动了解你的内在呢。不是说内在没有样貌有用，而是让人愿意了解内在的成本太高了，比有样貌的成本高得多，要付出的努力也要多得多。&lt;/p&gt;
&lt;p&gt;很多人看不起别人整容，然而读书（Schooling）其实就是一种整容。谁都会有这种感觉：这个人读重点大学，实际上也没比我能力高多少，但是他处处受欢迎，拿到的 offer 也多。你觉得这样不公平，其实这公平得很。别人为了这个学历付出了多少的努力（不管这种努力在你眼里看来有没有「意义」），而你又为了做好不拿文凭的准备做过多少努力呢？&lt;/p&gt;
&lt;p&gt;我不知道别的行业对文凭的重视程度，所以我拿我的本行——软件开发来说。如果打算放弃学位而提前从事软件开发行业，请先问自己一个问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;你用什么来让别人相信你会写代码？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;如果你没有学历，你就需要靠经验来证明自己的能力。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;然而大多数来邮件求建议的朋友，大多没有什么经验，却又声称「和你的经历相似」、「和你一样」。其实我们完全不一样，我在退学前就已经写了 7 年代码。&lt;/p&gt;
&lt;p&gt;不是说一定要有这么长时间的经验才能离开学校，而是 &lt;strong&gt;一定要已经拥有解决问题的能力的时候，才有资格考虑退学这件事&lt;/strong&gt;。我常常拿我朋友 &lt;a href=&quot;https://github.com/drakeet&quot;&gt;Drakeet&lt;/a&gt; 给身边的人做例子，他是大二退学的，退学时虽然写代码才两年，但是他当时的能力就已经足以独当一面了。&lt;/p&gt;
&lt;p&gt;曾经有一位朋友的朋友问我关于退学的意见，他说觉得学历不重要。我问他你会做什么，他说「虽然我现在能力很弱，但是我学习能力强，想进一些大公司跟着大牛学习，等技术可以了，就可以弥补学历的缺陷。」到底是哪来的勇气让他认为大公司的大牛会因为「学习能力强」愿意让他跟着学习。&lt;/p&gt;
&lt;p&gt;我不知道为什么那些还没有什么能力的人会认为学校不能教会他们什么，我想大多是人云亦云。他们往往把我退学的原因归咎于「大学教育的落后」（当然这确实是其中一个原因），然后拿我的例子来证明他们的观点，却没有认真思考过我为什么认为（我所在的）大学落后，那是因为学校在教的大多数内容我在好几年前已经滚瓜烂熟了。如果一个人连这些学校在教的基础知识都不会，又何来的底气声称「学校不能教会他们什么」。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当你有信心对老师说「你下来吧，让我来教」的时候，你才需要考虑退学这件事。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大学是一个很好的避风港，能有如此长的一段时间可以没有顾虑地学习自己想学的知识在一生中难能可贵。想研究 V8 内核就去研究，想了解机器学习就找机器学习相关的书慢慢读。&lt;/p&gt;
&lt;p&gt;我知道很多打算退学的人心里都盘算着退学后在家自学一两年，然后出去找工作。我不看好这种规划，因为风险大，并且在家自学不见得比在学校自学好到哪里去。除非在这一两年里能在开源社区带来一些什么，否则到最后不会是你理想中的结果。&lt;/p&gt;
&lt;p&gt;马克吐温说过一句话：&amp;quot;I have never let my schooling interfere with my education.&amp;quot; 在上大学之前，我学习编程的时间很少。每周只能回家一次，用电脑的时间又不多。拿学杂费的找零买些书，上课看，晚修看，把草稿纸当成编辑器，周末回家用电脑实践。我想所有人的大学比那时的我自学条件要好得多，又有什么理由放弃这种条件呢。&lt;/p&gt;
&lt;p&gt;希望所有打算退学的朋友能深思熟虑，退学不是一件好事也不是一件坏事，它只是一种选择，取决于哪种选择更适合自己的处境。&lt;/p&gt;
&lt;p&gt;虽然我从来没有后悔自己做出的选择，但是我总会羡慕那些有机会读好学校、受好教育的朋友。我是个很爱学习的人，我也想在大学学编译原理，线性代数，概率论，但我这个人比较蠢，没有办法同时兼顾我喜欢的和我不喜欢的课程，又疲于应付功课，所以才会选择退出，然后付出比别人更大的努力，跑在别人的前面。&lt;/p&gt;
&lt;p&gt;比我聪明的人很多，而这些人，根本用不着退学。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>静态类型在 JavaScript 中是一种负担吗？</title>
    <link href="https://lutaonan.com/blog/is-static-type-in-javascript-a-burden/"/>
    <updated>2016-09-29T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/is-static-type-in-javascript-a-burden/</id>
    <content type="html">&lt;p&gt;最近我在公司的项目中遇到很多由于类型不匹配所导致的不可预估的问题。比如说，我们的程序产生了一个纯数字的 unique id, 存到数据库中被识别为 &lt;code&gt;number&lt;/code&gt; 类型，但是客户端需要的是字符串，导致一条数据在没有办法在客户端正常显示。&lt;/p&gt;
&lt;p&gt;我&lt;strong&gt;年轻&lt;/strong&gt;的时候曾经是一位动态类型的忠实拥趸，因为动态类型方便、自由。假设在我需要编写一段为我服务的小程序时，如果 runtime 强制需要我去做一些向上向下转型的工作，恐怕我会崩溃。&lt;/p&gt;
&lt;p&gt;但是，在享受自由的同时，我们却很容易写出这样的程序：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// config.js&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; appId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123456&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// utils.js&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; appId &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./config.js&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateSignString&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; appId &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; salt&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是一个用于生成签名字符串的函数，从逻辑上看，这段代码没有问题。但是，当另一个对这个函数内部实现不了解的开发人员使用它时，会返回意想不到的结果：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; generateSignString &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./utils&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; salt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; signStr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateSignString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;salt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用者希望把 &lt;code&gt;timestamp&lt;/code&gt; 用作 &lt;code&gt;salt&lt;/code&gt;，但是 &lt;code&gt;signStr&lt;/code&gt; 并不是意料中的由 timestamp 和 appId 拼接而成的 signString, 而是 &lt;code&gt;appId&lt;/code&gt; 和 &lt;code&gt;timestamp&lt;/code&gt; 相加的运算结果。而这种错误是&lt;strong&gt;在编译时无法感知的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;然而，如果我们用静态类型的 TypeScript 做同样的事情：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;APPID&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;123456&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateSignString&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;&lt;span class=&quot;token literal-property property&quot;&gt;salt&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; string &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;APPID&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; salt&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; salt &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTime&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; signStr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;generateSignString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;salt&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Error: [ts] Argument of type &#39;number&#39; is not assignable to parameter of type &#39;string&#39;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在编译时，就会抛出类型错误的提示，这时就会知道，你的 &lt;code&gt;salt&lt;/code&gt; 应该用一个 &lt;code&gt;toString()&lt;/code&gt; 来转换成字符串。&lt;/p&gt;
&lt;h3 id=&quot;%E7%B1%BB%E5%9E%8B%E6%A3%80%E6%9F%A5%E6%98%AF%E4%B8%80%E7%A7%8D%E8%B4%9F%E6%8B%85%E5%90%97%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;类型检查是一种负担吗？&lt;/h3&gt;
&lt;p&gt;我认为不是。起码在&lt;strong&gt;构建大规模的应用程序&lt;/strong&gt;时，静态类型会帮助你避免大多数的运行时错误。&lt;/p&gt;
&lt;p&gt;而 code base 并不是衡量应用程序规模的唯一指标。只要符合以下某种情况，就认为这个程序是大规模的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;code base 很大&lt;/li&gt;
&lt;li&gt;超过 2 人维护的程序&lt;/li&gt;
&lt;li&gt;被多人依赖的模块&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在以上这些情况下，类型声明变得尤为重要。你可能认为你能记住变量是什么类型，但在程序的世界里生存的不仅仅是字面量。&lt;/p&gt;
&lt;p&gt;在团队共同维护代码的时候，如果没有类型声明，你绝对有可能传入一个非预期的参数。所以，&lt;strong&gt;类型声明是开发者与开发者之间的传达信息的过程&lt;/strong&gt;——我要的是什么类型，你就只能给我什么类型。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类型声明也是开发者给编辑器传达信息的手段&lt;/strong&gt;。只有显示的类型声明，编辑器和 IDE 才能判断函数中的形参应该有怎样的行为，才能给开发者正确的代码提示，才能安全地为你进行 Refact.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/-----2016-09-29---6.21.31.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E9%9D%99%E6%80%81%E7%B1%BB%E5%9E%8B%E7%9A%84-javascript&quot; tabindex=&quot;-1&quot;&gt;静态类型的 JavaScript&lt;/h3&gt;
&lt;p&gt;JavaScript 虽然是一门面向对象的语言，但相对于 C++, Java 这类语言来说，它的抽象能力很弱。在构建大规模的 JavaScript 应用程序时，我常常怀念写 Java (Android) 时可以写 &lt;code&gt;interface&lt;/code&gt;, 可以写 &lt;code&gt;abstract&lt;/code&gt;. 在编写 JavaScript 程序中，很难舒服地运用一些设计模式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We designed TypeScript to meet the needs of the JavaScript programming teams that build and maintain large JavaScript programs.
—— &amp;lt;cite&amp;gt;TypeScript Language Specification&amp;lt;/cite&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;TypeScript 引入了 &lt;code&gt;Interface&lt;/code&gt;, &lt;code&gt;Enum&lt;/code&gt;, &lt;code&gt;Generic&lt;/code&gt;, &lt;code&gt;abstract class&lt;/code&gt; 等等，这些表达能力正是在构建大规模 JavaScript 程序时所缺失的。不是说没有 TypeScript,  ECMAScript 就不能实现这些，而是 TypeScript 在代码层面赋予了这些约定。&lt;/p&gt;
&lt;p&gt;比如，用 TypeScript 实现 Singleton:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/-----2016-09-29---8.34.22.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;理论上，被编译出来的 ECMAScript 代码照样可以顺利地 &lt;code&gt;new Person()&lt;/code&gt;, 但 TypeScript 会在编译时提醒你，这个类不应该被实例化。&lt;/p&gt;
&lt;p&gt;我不打算在本文对 TypeScript 作出详细的指南，我只希望大家可以认识到，&lt;strong&gt;严谨的类型检查和面向对象表达能力对代码的健壮性和可维护性有很大的正面作用&lt;/strong&gt;。ECMAScript 是一门自由灵活的语言，但绝不代表我们就应该为这种灵活承担过高的出错概率。况且，TypeScript 在严格类型检查的同时，又保留了 ECMAScript 的自由性（你甚至可以用 &lt;code&gt;any&lt;/code&gt; 类型来规避类型检查）。&lt;/p&gt;
&lt;p&gt;我永远认为使用没有类型验证的  JavaScript 会让我快乐，无论她有多大的坑。我仍然可以用她愉快地写脚本抢这个抢那个，用她来写各种各样的 bot，无须考虑类型转换。但当我用她来写一些不是为了让我快乐的程序的时候，我希望她在运行时不要跑偏，还希望她长得像真正的 OOP 。&lt;/p&gt;
&lt;p&gt;静态类型的 JavaScript 就像开始做手机后的罗永浩，你能看出他们的妥协，他们本不是这样。但他们是真正要上场合了，才不得不这样，即使他们根本不是你喜欢的样子。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我的利器</title>
    <link href="https://lutaonan.com/blog/my-liqi/"/>
    <updated>2016-09-09T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/my-liqi/</id>
    <content type="html">&lt;h3 id=&quot;%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E4%BD%A0%E8%87%AA%E5%B7%B1%E5%92%8C%E6%89%80%E5%81%9A%E7%9A%84%E5%B7%A5%E4%BD%9C&quot; tabindex=&quot;-1&quot;&gt;介绍一下你自己和所做的工作&lt;/h3&gt;
&lt;p&gt;我是 Randy，一名 95 后程序员，在一家创业公司做前端工程师。热衷于技术和各种科技、数码产品。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BD%A0%E9%83%BD%E5%9C%A8%E4%BD%BF%E7%94%A8%E5%93%AA%E4%BA%9B%E7%A1%AC%E4%BB%B6%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;你都在使用哪些硬件？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.apple.com/cn/macbook-air/&quot;&gt;Macbook Air&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11 寸 Macbook Air ( i5 4GB 128GB ) 是我的主力机，是 2014 Early 的版本。目前来看写 Android 写到项目中期的时候会有明显的卡顿。写前端项目对性能要求没有 Android 高，所以目前还没有必须升级的需求。11 寸的确比较小，但是平时工作都是接显示器的，就不在意了，尤其是当你背着它到处抱的时候，就觉得为了便携性，屏幕小也是值得的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;iPod Touch 4&lt;/p&gt;
&lt;p&gt;这台 iPod Touch 4 主要用来听 Podcast，我最常听的节目是 『内核恐慌』，『IT 公论』&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://item.jd.com/845638.html&quot;&gt;AOC I2269VW 21.5 寸 IPS 显示器&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;性价比较高的显示器，色彩满意，外观时尚，是低价位显示器的好选择。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;IKBC Poker 2&lt;/p&gt;
&lt;p&gt;我用的机械键盘是 Poker 2 红轴。Poker 2 和 Mac 配合使用没有什么问题，只是电脑休眠后要重新插拔。由于是第一个机械键盘，在轴的选择没有经验，选择了相对保守的红轴，使用了半年的感受是，红轴直上直下的感觉并不太适合我个人，我比较喜欢有段落感的轴，所以如果要买新的键盘，我可能就不会选红轴了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一加手机 1&lt;/p&gt;
&lt;p&gt;现在的主力手机从 Nexus 5 换到了一加（Babyskin），唯一不太满意的地方是屏幕太大，单手操作很吃力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://getpebble.com/&quot;&gt;Pebble&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Pebble 是比较小众的智能手表，用的是 E-ink，续航一周，单纯的用来看天气、时间和手机推送，非常棒。不过外观不太符合大众的审美。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E8%BD%AF%E4%BB%B6%E5%91%A2%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;软件呢？&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.sublimetext.com/&quot;&gt;Sublime Text 3&lt;/a&gt; 曾经主力的 Editor，目前换用 Atom&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; 最近主力 Editor&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.iterm2.com/&quot;&gt;iTerm&lt;/a&gt; Mac 上最好用的 Terminal Emulator&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://itunes.apple.com/us/app/sip/id507257563?mt=12&quot;&gt;Sip&lt;/a&gt; 免费好用的取色工具&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://getpocket.com/&quot;&gt;Pocket&lt;/a&gt; 我最喜欢的 Read it later APP&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://maxiang.info/&quot;&gt;马克飞象&lt;/a&gt; Markdown 写作利器&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/my-liqi/music.163.com&quot;&gt;网易云音乐&lt;/a&gt; 听歌的首选，深夜看评论很精彩&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.rescuetime.com/&quot;&gt;RescueTime&lt;/a&gt; 统计你使用各个软件占用的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;%E4%BD%A0%E6%9C%80%E7%90%86%E6%83%B3%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%8E%AF%E5%A2%83%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;你最理想的工作环境是什么？&lt;/h3&gt;
&lt;p&gt;我希望在一个宽阔的空间里工作，加上足够大的桌子和显示器，舒适的人体工程学椅。光线要好，窗外的景色能让人感到活力。&lt;/p&gt;
&lt;h3 id=&quot;%E4%BD%A0%E5%B9%B3%E6%97%B6%E8%8E%B7%E5%BE%97%E5%B7%A5%E4%BD%9C%E7%81%B5%E6%84%9F%E7%9A%84%E6%96%B9%E5%BC%8F%E6%9C%89%E5%93%AA%E4%BA%9B%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;你平时获得工作灵感的方式有哪些？&lt;/h3&gt;
&lt;p&gt;阅读。读资讯，读书等等。平时我经常刷 Github, hackernews, V2EX 这些社区。 V2EX 的创意板块是获取灵感的好地方。&lt;/p&gt;
&lt;h3 id=&quot;%E6%8E%A8%E8%8D%90%E4%B8%80%E4%BB%B6%E7%94%9F%E6%B4%BB%E4%B8%AD%E7%9A%84%E5%88%A9%E5%99%A8%E7%BB%99%E5%A4%A7%E5%AE%B6&quot; tabindex=&quot;-1&quot;&gt;推荐一件生活中的利器给大家&lt;/h3&gt;
&lt;p&gt;我推荐&lt;strong&gt;乌克丽丽&lt;/strong&gt;。因为 ukulele 是一件学习门槛不高的乐器，它的音色很欢快，学习也很容易，学几个和弦指法就能弹唱一首歌。平时累了就弹一首，等待编译的时候也可以舒缓一下工作压力。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文参与了「利器社群计划」，发现更多创造者和他们的工具：&lt;a href=&quot;http://liqi.io/community/&quot;&gt;http://liqi.io/community/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>离开大学这一年</title>
    <link href="https://lutaonan.com/blog/one-year-after-dropping-out-of-school/"/>
    <updated>2016-09-08T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/one-year-after-dropping-out-of-school/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;写这篇文章是想说说退学一年后的一些想法。想看技术总结请移步。如果不想看这么多的文字，可以直接拉到最下面，看&lt;strong&gt;写在最后&lt;/strong&gt;的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一年可以发生很多事。&lt;/p&gt;
&lt;p&gt;回想起来，大一的一整年我旷了很多课，待在宿舍看书和写代码，周末总是往广州市区跑，参加各种各样的社区活动和聚会。学院规定旷课 20 课时以上就要处分，我很不出意外地被处分了。&lt;/p&gt;
&lt;p&gt;签处分的时候，辅导员告诉我，如果这个处分不撤销，是拿不到学位证的。如果想要撤销，要保证在大二整个学年不旷课，也不挂科。我说，那我是完全没戏了。&lt;/p&gt;
&lt;p&gt;辅导员让我好好考虑一下。我表达出了离开学校的意愿，她说好好想想，暑假和家人商量出一个结果，开学再找她。&lt;/p&gt;
&lt;p&gt;其实我已经想了很久。在学校的一年里，我过得极其难受。我必须浪费很多很多的时间，去上一些只是听上去很有意义的课程，和那些在课室里只会玩手机和睡觉的同学处在同一个课室里，连续待一个半小时。 而我最这个人痛恨的事情，就是别人浪费我的时间。&lt;/p&gt;
&lt;p&gt;我父母是很传统和保守的人，我不敢在他们面前提关于离开学校的事情。于是在那个暑假，我度过了人生中最抑郁的两个月。&lt;/p&gt;
&lt;p&gt;大二开学，辅导员知道我并没有和家人商量，就打给了我家人。本以为上了大学，就不会再有「打电话通知家人」的破事。&lt;/p&gt;
&lt;p&gt;家里人和我想象中不一样，他们很冷静。周末回家，我说出了我的意愿，他们表示让我自己做决定。他们说，你是个成年人了，读大学是自己的事情，如果你要读，我们愿意继续花钱供你读，如果不想读，你自己要为一切后果负责。&lt;/p&gt;
&lt;p&gt;于是，在一年前的今天，我回到了学校，找辅导员签下了休学一年的协议。辅导员问我会不会后悔，我说不会。她说那你要加油，希望你能成功。我很开心，因为她是笑着说的。我辅导员笑的时候很漂亮。&lt;/p&gt;
&lt;p&gt;和学校没有任何关系以后，我租了一个算是能住的房子，正式开始了职业生涯。&lt;/p&gt;
&lt;p&gt;我的第一份工作入职的是一家创业公司 (&lt;a href=&quot;http://kiwiinc.net/&quot;&gt;Kiwi Inc.&lt;/a&gt;)，是暑假的时候就已经入职的。暑假前我在某群表示想在广州找一份能在暑期做的工作，&lt;a href=&quot;http://weibo.com/u/1685135222&quot;&gt;李秉骏&lt;/a&gt; 很快就跟我联系。我从学校坐了趟车到他的公司，一番愉快地交流之后，工作就落定了。&lt;/p&gt;
&lt;p&gt;我在 Kiwi Inc. 负责的是前端开发。因为整个开发团队只有我一个前端，而公司主要的产品又有很大的比重在前端，所以进去以后，我过得很充实，因为自己 do the things that matter. 团队因为人不多，大家都很融洽。&lt;/p&gt;
&lt;p&gt;我后来听很多人对应届生的「忠告」，都说千万不要去创业公司，大多数创业公司都是坑人的。有条件的，都争取去去大厂，不要在创业公司浪费时间。&lt;/p&gt;
&lt;p&gt;对此我保持不同的意见。我非常庆幸自己在创业公司待过（当然也是因为我待的公司不坑人）。在创业公司，我们可以自己选择用最好的工具，可以用 Slack, Trello 以及第三方的 PaaS 等等等等。**正因为我们能自由地选择最好的工具，我们可以亲身感受和思考这些产品本身。这些产品优秀的地方会渐渐地成为自己做产品时对产品的品位和追求。**并且在创业公司，我们没有无意义的会议，可以把时间用在干实事本身。关键是，&lt;strong&gt;我们每个人在公司里，都能感受到自己是极其重要的一员。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在 Kiwi Inc. 写前端的过程，是我自己建立前端工程概念的过程。从开发到测试再到部署，从代码规范到构建，都希望把软件工程的思想带到前端中去。虽然现在看来习以为常，但是对于当时只做过自己的 side project 的我来说，这是极大的经验和收获。&lt;/p&gt;
&lt;p&gt;在 Kiwi Inc. 待了半年后，出于对自己更高的要求，我离开了这个靠谱的创业团队。&lt;/p&gt;
&lt;p&gt;崇尚工程师文化的我一直认为自己会和国内的大厂无缘，大厂不会选择我，我也不会选择大厂。然而我却在农历新年后通过了阿里巴巴移动事业群 (也就是 UC) 的面试。在 2016 年的 3 月加入了阿里。&lt;/p&gt;
&lt;p&gt;大公司和创业公司不同，一个简单的问题会牵扯到不同的组，比如一个字段出了问题，要去追踪到底是架构组的问题还是算法组的问题。在大公司，每一个需求要有排期，版本上线要提测，要面对大量用户的反馈。&lt;/p&gt;
&lt;p&gt;其实离开了学校开始工作，自己的时间就很少了。一本不厚的《设计模式》，原本可以花两三天粗略地读完，现在会有不知道什么时候才能读完的感觉。这种情况下，很容易使自己在选择读一本书前出现「读这本书对我的工作有实际帮助吗」这种错误的考量。&lt;/p&gt;
&lt;p&gt;**不够用的时间常常使我处于不安、烦躁和轻度抑郁中，因为我害怕被别人追上。**每个认识我的人无论出于真心还是客套都会说我「年轻有为」，但是没有人知道这是一场看不到终点的长跑，我的特立独行让我必须跑得比别人快得多，才能弥补我们之间的差距（学历、智商等等）。这使我感到害怕，尤其是同龄人渐渐都出来实习工作的时候。但又没有任何办法。&lt;/p&gt;
&lt;p&gt;工作以后有了稳定并且还不算少的收入，我能用来买自己喜欢的数码产品，也花了不少钱在自己的身体上 (比如健身和吃)。&lt;/p&gt;
&lt;p&gt;我不存钱，&lt;strong&gt;我希望在我还年轻的时候，在我不需要供这个供那个的年龄，能没有顾虑地花钱让自己快乐&lt;/strong&gt;。快乐太难又太容易错过了。就像小时候想有一台 Gameboy 但不得愿，现在即使可以没有压力地买下一台 PS4, 也不见得有多快乐。&lt;/p&gt;
&lt;h2 id=&quot;%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E&quot; tabindex=&quot;-1&quot;&gt;写在最后&lt;/h2&gt;
&lt;p&gt;我有很多还在读书的朋友，我们出去聚会聊天的时候，我都会看得出他们的迷茫和无奈。这些迷茫和无奈可能很大程度上来源于教育体制的缺陷，但是，在这个时代，学习早已不仅仅只局限于学校，它在任何一个你可以掌控的角落。它在互联网、在每一本有价值的书籍上。如果学校没有满足你，就去这些地方找。珍惜时间，总有一天会找到它，并能让你过上你希望过上的日子。如果迷茫是出于你的懒惰，就请不要埋怨教育，也不要埋怨任何体制、任何人。&lt;/p&gt;
&lt;p&gt;我还有很多已经在工作的朋友，尤其是和我一样在写着代码的朋友。我没有特别要说的，我想说，嘿，我来了。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我常用的 macOS 应用</title>
    <link href="https://lutaonan.com/blog/tools-of-my-macbook/"/>
    <updated>2016-08-06T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/tools-of-my-macbook/</id>
    <content type="html">&lt;nav class=&quot;table-of-contents&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#google-chrome&quot;&gt;Google Chrome&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#shadowsocksx&quot;&gt;ShadowsocksX&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#moom-(%E4%BB%98%E8%B4%B9)&quot;&gt;Moom (付费)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#iterm&quot;&gt;iTerm&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#visual-studio-code&quot;&gt;Visual Studio Code&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#sublime-text-3&quot;&gt;Sublime Text 3&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#istat-menus-(%E4%BB%98%E8%B4%B9)&quot;&gt;iStat Menus (付费)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#1password-(%E4%BB%98%E8%B4%B9)&quot;&gt;1Password (付费)&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#homebrew&quot;&gt;homebrew&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#proxychains-ng&quot;&gt;proxychains-ng&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/tools-of-my-macbook/#z&quot;&gt;z&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/nav&gt;&lt;p&gt;在使用 11&#39; Macbook Air 整整两年后的今天换上了 13&#39; Macbook Pro. 我从零开始重新搭配了我的开发环境和日常使用频率很高的工具，在这里跟大家分享一下。也借这个机会给刚开始接触 macOS 的朋友一个参考。&lt;/p&gt;
&lt;h3 id=&quot;google-chrome&quot; tabindex=&quot;-1&quot;&gt;Google Chrome&lt;/h3&gt;
&lt;p&gt;主力浏览器&lt;/p&gt;
&lt;h3 id=&quot;shadowsocksx&quot; tabindex=&quot;-1&quot;&gt;ShadowsocksX&lt;/h3&gt;
&lt;p&gt;我在 macOS 上主要的科学上网工具。&lt;/p&gt;
&lt;h3 id=&quot;moom-(%E4%BB%98%E8%B4%B9)&quot; tabindex=&quot;-1&quot;&gt;Moom (付费)&lt;/h3&gt;
&lt;p&gt;窗口管理工具，可以自定义窗口布局，通过快捷键快速定位当前窗口。&lt;/p&gt;
&lt;h3 id=&quot;iterm&quot; tabindex=&quot;-1&quot;&gt;iTerm&lt;/h3&gt;
&lt;p&gt;macOS 上最好用的 Terminal Emulator. 如果说系统自带的 Terminal 是 IE, 那 iTerm 就是 Google Chrome.&lt;/p&gt;
&lt;p&gt;我喜欢把 iTerm 固定在整个屏幕的上半部分，并设置透明度（可通过 &lt;code&gt;command + u&lt;/code&gt; 进行 toggle），通过 &lt;code&gt;command + i&lt;/code&gt; (自定义的 hotkey) 快速显示和隐藏。这样无论我当前正在处理任何事情，我都能快速和终端交流。&lt;/p&gt;
&lt;h3 id=&quot;visual-studio-code&quot; tabindex=&quot;-1&quot;&gt;Visual Studio Code&lt;/h3&gt;
&lt;p&gt;我最喜爱的「代码编辑器」。&lt;/p&gt;
&lt;h3 id=&quot;sublime-text-3&quot; tabindex=&quot;-1&quot;&gt;Sublime Text 3&lt;/h3&gt;
&lt;p&gt;我最喜爱的「代码浏览器」。因为有了 Visual Studio Code, 我用 Sublime 的场景更多是快速浏览个项目的代码。&lt;/p&gt;
&lt;h3 id=&quot;istat-menus-(%E4%BB%98%E8%B4%B9)&quot; tabindex=&quot;-1&quot;&gt;iStat Menus (付费)&lt;/h3&gt;
&lt;p&gt;在 Menubar 中显示更多有用的数据，比如万年历、电池状态、上传下载速度等。&lt;/p&gt;
&lt;h3 id=&quot;1password-(%E4%BB%98%E8%B4%B9)&quot; tabindex=&quot;-1&quot;&gt;1Password (付费)&lt;/h3&gt;
&lt;p&gt;密码管理工具。我的每一个账户密码都由 1Password 随机生成和储存，登录网站时只需要 &lt;code&gt;command + \&lt;/code&gt; 自动填充。既安全又节省时间和记忆负担。&lt;/p&gt;
&lt;h3 id=&quot;oh-my-zsh&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://github.com/robbyrussell/oh-my-zsh&quot;&gt;oh-my-zsh&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;macOS 自带 zsh, 但是 zsh 需要做很多配置才能用得顺手，这时就需要 oh-my-zsh 帮你做好这些。一条命令安装好后，再通过 ~/.zshrc 添加自己的配置。&lt;/p&gt;
&lt;h3 id=&quot;homebrew&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;http://brew.sh/&quot;&gt;homebrew&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;homebrew 是 macOS 上的 apt-get. 安装命令行程序只需要 &lt;code&gt;$ brew install&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;proxychains-ng&quot; tabindex=&quot;-1&quot;&gt;proxychains-ng&lt;/h3&gt;
&lt;p&gt;proxychains 是给命令行使用代理的工具，支持 socks5.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ brew install proxychains-ng&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;z&quot; tabindex=&quot;-1&quot;&gt;z&lt;/h3&gt;
&lt;p&gt;z 是类似 autojump 的目录跳转工具，它会根据你的历史路径，在你只输入目录名的情况下，自动分析你要进入的目录路径。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ brew install z&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;以上这些工具保证了我最基本的生产效率。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>《烂泥》李峻一</title>
    <link href="https://lutaonan.com/blog/lan-ni-li-jun-yi/"/>
    <updated>2016-06-16T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/lan-ni-li-jun-yi/</id>
    <content type="html">&lt;p&gt;你可能未听过李峻一，但你应该听过许志安《烂泥》，郑中基的《无赖》，关心妍的《放生》，陈奕迅的《Lonely Christmas》。这几首音乐都由他作曲填词。&lt;/p&gt;
&lt;p&gt;这位原名李峻、从 1999 年开始做填词学院的作曲及填词人，虽然没有两位『伟文』家喻户晓，但却写过非常多好旋律、好词。当初（2001 年）受陈辉阳赏识的他初来香港，用了半年，包办词曲，凭借一首《烂泥》，直接拿下当年十大劲歌金曲最佳填词，亦间接助许志安拿下最受欢迎男歌星。词里这句：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;别轻视我 纵是这种烂泥 能滋润你 耗尽每分让你艳压一切&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;颇有李清照『落红不是无情物，化作春泥更护花』的意味。只是李峻一把它变得非常『自虐』，但又比不上林夕的『&lt;strong&gt;能得到的安慰是失恋者得救后
很感激忠诚的狗&lt;/strong&gt;』。&lt;/p&gt;
&lt;p&gt;很多人认为《烂泥》是为『苦男人』许志安度身订做的，但是后来李峻一在接受采访时，说写这首歌的时候，并没有想过写给谁唱。而陈辉阳觉得适合许志安，就给许志安唱了。这首歌就这样一炮而红。&lt;/p&gt;
&lt;p&gt;《烂泥》的爆红令李峻一的客户名单多了陈奕迅这个名字。同样是他包办词曲，他们合作出了《Lonely Christmas》。可能对于李峻一来讲，无奈的感觉就是这首词里**『人浪中想真心告白 但你只想听听笑话』**的感觉吧。&lt;/p&gt;
&lt;p&gt;李峻一说自己比较满意的歌是邓丽欣的《电灯胆》，一首描写女生喜欢上有了已有对象的男性朋友，只能在旁做他们的电灯胆，又想他们总有一天分手后会轮到她上位的这种三位一体的唏嘘处境。而我最爱这句**『善良人埋藏着最坏的心眼 妄想一天你们会散』**，算得上整首歌的升华。&lt;/p&gt;
&lt;p&gt;虽然李峻一认为自己在《电灯胆》上把女性的心态情感写得非常到肉。但我却觉得略早于《电灯胆》的关心妍的《放生》才是。也许每一对情侣，都曾经历过由热恋到平淡，再到**『拍拖都变义务』**的阶段，最后女方无奈洒脱地将贪玩爱自由的男方『放生』。毕竟：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;互缠着到老 不死都疲劳 还是跟你痛快结束&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是他又隐秘地在词里抛出了一个问题：&lt;strong&gt;『自由来换失恋那代价，你真的相信值得吗？』&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;李峻一是偏爱填词多于作曲的。但偏有一首歌——《幸运水晶》，我认为作曲比填词要好得多。整首词没有特别这点，但旋律却使最初听这首歌时只有不到 10 岁的我一直记在了心里。&lt;/p&gt;
&lt;p&gt;其实提到李俊一，又不得不提到郑中基的《无赖》了。如果说《烂泥》天生属于苦男人许志安，那《无赖》天生就属于『贱男』郑中基。这首浪子自道的作品，赢得了听众的青睐，在当年赢得了四台冠军歌。&lt;/p&gt;
&lt;p&gt;我相信无论每一个男人如何『无赖』，都总会有一个**『跟你笑着挨』**的女人。&lt;/p&gt;
&lt;p&gt;和郑中基合作还有一首歌叫《美女与野兽》，也是一首忏悔歌。讲这个男人虽然贪新，却忘不了那个真正爱他的女人：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;完场就远走 骗心的野兽&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;为何离别你 比死更是难受&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;当天我背叛你 时刻都会内疚&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;仅有一次真爱 没法保留&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在歌的结尾，只得无奈地说**『喜欢的不配拥有』**。&lt;/p&gt;
&lt;p&gt;随后又与邓丽欣再度合作出《分手的礼貌》，描写分手后不舍又要假装豁达的女人。里面一句**『无法笑着原谅仍能沉默退场，别回望痛哭交低最好印象』&lt;strong&gt;，让我想起叮当唱《我爱她》里面的那句&lt;/strong&gt;『若那一刻重來，我不哭，让他知道我可以很好』**。一段感情里，最后最伤的似乎往往都是女方。&lt;/p&gt;
&lt;p&gt;他还给张智霖写过《你太善良》，终于是一首写悲情男的歌。男方认为女方的对象不是好人，是个感情骗子，而女方却又偏偏不醒。所以歌中最后才会说**『我也想骗你，这句才算真相』**。&lt;/p&gt;
&lt;p&gt;其实我最想推荐的是李峻一和陈辉阳合作的歌，是写给陈冠希的《单恋高校》。这首充满青葱校园气息的歌，非常适合陈冠希。&lt;/p&gt;
&lt;p&gt;李峻一写情爱的歌很出色，但对于非情爱的作品，却稍欠火候。可能这也是他和两位『伟文』最不一样的地方吧。&lt;/p&gt;
&lt;p&gt;文章最后，我想把这个位置留给一位叫陈僖仪的歌手，她非常优秀，却在 2013 年很遗憾地意外身亡。李峻一曾为她写过一首《忘川》，由陈僖仪自己作曲。希望她在另一个地方，可以知道我们从未忘记过她。&lt;/p&gt;
&lt;p&gt;&amp;lt;iframe frameborder=&amp;quot;no&amp;quot; border=&amp;quot;0&amp;quot; marginwidth=&amp;quot;0&amp;quot; marginheight=&amp;quot;0&amp;quot; width=330 height=86 src=&amp;quot;&lt;a href=&quot;http://music.163.com/outchain/player?type=2&amp;amp;id=223297&amp;amp;auto=1&amp;amp;height=66&quot;&gt;http://music.163.com/outchain/player?type=2&amp;amp;id=223297&amp;amp;auto=1&amp;amp;height=66&lt;/a&gt;&amp;quot;&amp;gt;&amp;lt;/iframe&amp;gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>从博客搬迁到创造的乐趣</title>
    <link href="https://lutaonan.com/blog/from-blog-migration-to-fun-of-creation/"/>
    <updated>2016-06-12T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/from-blog-migration-to-fun-of-creation/</id>
    <content type="html">&lt;p&gt;几天前因为一些很蠢的原因，我的域名被微信加入了黑名单，分享我的博客链接到朋友圈只有我自己能看见。还好我在大概两周前开始考虑博客搬迁的事情。我在万网买了 &lt;a href=&quot;http://lutaonan.com/&quot;&gt;lutaonan.com&lt;/a&gt; 的域名，以后只要访问这个域名就能直接访问我的博客，RSS 地址为 &lt;a href=&quot;http://lutaonan.com/rss&quot;&gt;http://lutaonan.com/rss&lt;/a&gt; 。&lt;a href=&quot;http://djyde.github.io/&quot;&gt;http://djyde.github.io&lt;/a&gt; 将不再更新，一个月后会强制定向到 &lt;a href=&quot;http://lutaonan.com/&quot;&gt;lutaonan.com&lt;/a&gt;。 服务器迁移到了阿里云青岛的机房。博客引擎从 Hexo 换成 Ghost. 更换引擎的目的单纯，仅仅是想试试 Ghost 而已，并非觉得哪个比哪个好。&lt;/p&gt;
&lt;p&gt;事实上很早以前我就想搬离 Github Pages, 因为国内访问很慢很不稳定，加上不能上 https, 但是一直考虑到我的博客几乎都是写给程序员的，就无所谓了。&lt;/p&gt;
&lt;p&gt;然而最近有了一些变化，我喜欢写起非技术文章了。技术文章的沉淀周期很长，更新频率都是以『月』作单位的。而我又喜欢写东西，也喜欢分享生活。所以事实上从 2015 年 9 月的 &lt;a href=&quot;http://lutaonan.com/my-liqi/&quot;&gt;《我是 Randy, 这是我的利器》&lt;/a&gt; 开始，我写的文章都是关于生活方式和 &lt;code&gt;LifeHacker&lt;/code&gt; 类的，还有我以前最讨厌写的游记。所以博客的 subtitle 变成了『代码、科技、艺术和生活』，我希望分享这些我所爱的、有价值的东西，这些东西都围绕『创造』。&lt;strong&gt;创造对于我而言是一种与生俱来的生理冲动&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;从我刚开始能勉强读懂语文课文开始，我就有提笔写点东西的冲动。这种冲动很单纯，因为我连要写什么也不知道，只是看到空白的单行本，我就想要在上面写些什么。但是以当时的能力，实在没有东西可写，我就拿书柜的书来抄写段落。这也是我童年时期写完作业后的乐趣之一。&lt;/p&gt;
&lt;p&gt;我初一那段时间沉迷一个叫『易语言』的东西，宣称中文编程，可以很快搭出一个图形界面应用程序（类似 MFC）。我泡了很久的易语言 bbs，加了几个 QQ 群，认识了一帮朋友（这是我最早混的程序员圈子），他们有做外挂，有做杀毒软件的等等。虽然现在看来这个所谓的『语言』只是一个 C++ 的壳，设计上也不尽合理，却让我充分体验到了创造的乐趣。&lt;/p&gt;
&lt;p&gt;比如我用易语言写的第一个成品：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/20090831_101339_392.gif&quot; alt=&quot;系统清理助手截图&quot; /&gt;&lt;/p&gt;
&lt;p&gt;简单来说就是用来清缓存的，改编自曾经很火的『删除系统垃圾的批处理』。至于为什么叫网帝... It&#39;s a long story. 以后有机会可以专门说说这段故事。&lt;/p&gt;
&lt;p&gt;我还用过易语言写杀毒软件：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gbstatic.djyde.com/blog/20100321_192143_686.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;原理是我在各种病毒交流群拿了很多病毒样本，然后写了一个小程序把所有样本的 md5 提取出来做成病毒库，扫描的时候匹配 md5。&lt;/p&gt;
&lt;p&gt;后来我觉得这样做病毒库很蠢，于是想办法做一种根据文件行为判断可疑文件的安全软件。这种系统级监听，易语言很难做到，结果我就入了 C#/.NET 的坑。不过这都是后话了。&lt;/p&gt;
&lt;p&gt;这些很蠢的作品带给我创造的乐趣，它们和写作一样，只不过形式变了。很多人觉得自己不知道自己到底想要做什么，我想大概就是因为没有体验过创造的乐趣。我会因为写出了这些看上去不怎么样的软件而激动得睡不着觉，在那一刻我就知道我喜欢的，我想要做的事情就是编程。&lt;/p&gt;
&lt;p&gt;因此，要找到自己喜欢的事情，只要找到做什么事情能让你体验到创造的乐趣就是。假使没有，那就读读书。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>中山纪念中学游记</title>
    <link href="https://lutaonan.com/blog/533-travel-middle-school/"/>
    <updated>2016-06-09T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/533-travel-middle-school/</id>
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;考虑到移动设备用户，文中图片都经过七牛 50% 质量压缩。非广角照片拍摄设备均为 iPhone SE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;另外，很多图中我都在看手机，是因为运动相机成像要在手机上看。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近入手了小蚁相机（一代），需要找个地方测试一下相机的体验和成像效果，恰逢即将高考，于是决定回高中一趟，找找以前的老师，看看学校的变化。&lt;/p&gt;
&lt;p&gt;我买了从广州南到南朗早上 10 点 38 分的动车票，但是由于时间估计错误，我没有赶上这趟车，只好改签成 12 点多。这很遗憾，因为我原本的计划是拍学生冲饭堂，然后自己去吃粗菜馆的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1371.jpg?imageView2/2/q/50&quot; alt=&quot;改签的地方&quot; /&gt;&lt;/p&gt;
&lt;p&gt;坐上动车以后天色就开始变，我开始感觉这次的行程很亏。在我的想象中，我应该在一个风和日丽的白天架着三脚架拍拍阳光下的凤凰花。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1372.jpg&quot; alt=&quot;刚上车&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1377.jpg?imageView2/2/q/50&quot; alt=&quot;轻轨上的乌云&quot; /&gt;&lt;/p&gt;
&lt;p&gt;到达南朗轻轨站后就开始下雨，本来想刚好试试中山刚开通的 Uber, 奈何附近没有 Uber 车。眼见雨越下越大，只好上了一辆私家黑车，大概是 Uber XL 的级别（这在南朗是司空见惯的）。&lt;/p&gt;
&lt;p&gt;路上开始慢慢从大雨变成了暴雨。我问司机，南朗打 Uber 的人多不多？司机说南朗还没有 Uber，中山暂时只开通了石岐、小榄和古镇。我问那打滴滴的多不多？他说偶尔，但是在这个地方一般都是短途，平台分成又多，做了反而赚得不多，所以也很少做。&lt;/p&gt;
&lt;p&gt;到了校门口依然暴雨，只好躲到『翠影』。『翠影』一家人没有变，老板娘在包云吞。我问她现在还有东西吃吗？她说现在没有啊。我看了看表，下午 1 点多，时间的确是很尴尬。于是我买了一瓶果粒橙，又去了隔壁的『成伯伯拉布粉』。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1411.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;雨小了就进学校，撑着伞把每周一演的舞台拍了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1382.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1383.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;没过多久雨就停了，但天还是灰的。我决定到兰溪湖拍水鸭，但是当我走到亭里的时候，水鸭都逃走了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1443.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://o86cdh9ph.qnssl.com/IMG_1443.jpg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我觉得鸭子这样很不礼貌，所以很快就离开了兰溪湖，走到了纪中里我最喜欢拍照的地方——图书馆最顶楼。&lt;/p&gt;
&lt;p&gt;之所以喜欢这里是因为这里几乎是整个学校的最高处（除了后山），这个角度看兰溪湖和天空非常漂亮。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1425.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://o86cdh9ph.qnssl.com/IMG_1425.jpg&quot;&gt;原图&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我特意在这里用小蚁拍了一段延时摄影：&lt;/p&gt;
&lt;p&gt;&amp;lt;video src=&amp;quot;&lt;a href=&quot;https://o86cdh9ph.qnssl.com/IMG_1434.MP4&quot;&gt;//o86cdh9ph.qnssl.com/IMG_1434.MP4&lt;/a&gt;&amp;quot; controls style=&amp;quot;max-width: 100%;&amp;quot;&amp;gt;&amp;lt;/video&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;&lt;/p&gt;
&lt;p&gt;接下来去教学楼找语文老师。这个时间点刚好是午休完开始上课，不出意料，有很多学生迟到被抓了。抓人的还是我以前的年级主任。她看到我，说，卢涛南，怎么选这么好的日子过来啊。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1558.jpg?imageView2/2/q/50&quot; alt=&quot;高二楼门口&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1442.jpg?imageView2/2/q/50&quot; alt=&quot;黄桂芳抓迟到&quot; /&gt;&lt;/p&gt;
&lt;p&gt;见到语文老师后闲聊了几句，中途又见到了物理老师，但是显然她已经把我忘了（很正常，只教了我们一年）。我说到我没有上大学了，现在在阿里巴巴。物理老师问，是自己开网店吗？&lt;/p&gt;
&lt;p&gt;闲聊了十多分钟，散了以后，逛了高三楼，面基了 Lucy。高三到这个时候，基本就是放羊状态了，很快他们都要『解放』了。&lt;strong&gt;我想，这种所谓的解放，虽然只是假象，但起码能给你一个瞬间的快感。有人告诉你，熬到什么地方，你就可以疯狂了。然而出来工作以后，没有人告诉你，到哪个点，你就解放了，你就自由了。没有，并没有尽头，连转折点都看不到。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1448.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1554.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;傍晚天气很好，还有晚霞：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1454.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1457.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1473.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;南朗的变化很大，我高一那年刚进来的时候，南朗的第一家 KFC 还在装修。现在有 KTV、有正规的电影院、有网咖。&lt;/p&gt;
&lt;p&gt;到轻轨站的时候是日落最后的阶段，这时晚霞更加鲜艳。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1547.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1549.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1467.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;旅行就这样结束。我一个朋友问我，你觉得你有多爱你的高中？&lt;strong&gt;我觉得我并没有『爱』这个高中，我相信任何人留恋一个地方，都是因为在那里发生过的事、遇到过的人而已。而我的这部分记忆又恰好是在中山纪念中学留下的罢了。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://o86cdh9ph.qnssl.com/IMG_1433.jpg?imageView2/2/q/50&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>21 岁我想说的</title>
    <link href="https://lutaonan.com/blog/say-in-21/"/>
    <updated>2016-03-25T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/say-in-21/</id>
    <content type="html">&lt;p&gt;在我很小的时候，在香港电视剧的影响下，我最初的理想是当一名警察。但是很不幸，当我向着全班描述这个理想的时候，班上的同学都哈哈大笑，甚至老师也对我说，你这样的身材，能打得过小偷么。&lt;/p&gt;
&lt;p&gt;于是这个理想再也没有跟任何人提起。但是我很俗套地感谢那位老师，因为从那以后我决定改变我的理想，成为一名科学家。&lt;/p&gt;
&lt;p&gt;之后我读过很多科普书籍，奇怪的是，这种给青少年看的科普书，大部分的内容都是有关化学的。以至于我有很长一段时间都在意淫我成为化学家的情景。&lt;/p&gt;
&lt;p&gt;六年级转学后，我遇到一位朋友，他给我展示了他自己写的一个博客网站。当时我很吃惊，于是和他一起自学编程。我没有零花钱，只能用学杂费的一些找零买了一本 20 块钱的 中专教材《c语言程序设计》。&lt;/p&gt;
&lt;p&gt;和老罗一样，从那时起我就有种被上帝选中的感觉，我觉得我这辈子就是搞这个的。我从意淫自己成为化学家，变成了意淫自己天天写代码。&lt;/p&gt;
&lt;p&gt;在这个过程中，我遭受了很多不被人理解和看好的压力，甚至被嘲笑。念高中的时候，由于在一篇周记里表达了自己的理想主义，晚修就被班主任拖出去批判了一番。&lt;/p&gt;
&lt;p&gt;直到这一年，经历了足足 8 年，我离开了学校，真正成为了一名软件工程师，曾经意淫的场景变成了现实，和『科学家』这个理想也算占了点边。理想主义万岁。&lt;/p&gt;
&lt;p&gt;21 岁，我希望我可以继续写代码，离自己的终极目标更加接近。而那些曾经看不起我和嘲笑过我的人，我只想说，你们这帮孙子，我去你妈的。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我是如何监听 APP 价格变动的</title>
    <link href="https://lutaonan.com/blog/how-do-i-track-app-price/"/>
    <updated>2016-03-16T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/how-do-i-track-app-price/</id>
    <content type="html">&lt;h2 id=&quot;%E5%8A%A8%E6%9C%BA&quot; tabindex=&quot;-1&quot;&gt;动机&lt;/h2&gt;
&lt;p&gt;自从入手了 iPad mini 之后，我剁手入了很多游戏。有些游戏太贵，希望等降价或者限免才入。于是我开始找一些提供降价限免资讯的网站。&lt;/p&gt;
&lt;p&gt;找到比较靠谱的是 &lt;a href=&quot;http://sspai.com/&quot;&gt;少数派&lt;/a&gt; 和 &lt;a href=&quot;http://appshopper.com/&quot;&gt;Appshopper&lt;/a&gt; ，区别是前者是编辑筛选，后者是程序监听价格变动。Appshopper 还能把 APP 加入 wishlist，当价格出现变动的时候会发邮件到你的邮箱。&lt;/p&gt;
&lt;p&gt;Appshopper 在功能上无可挑剔，但是十分蛋疼的是搜索引擎不认中文：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blogscdn.qiniudn.com/2016-02-16.12.01.23.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;于是，我有了自己写一个类似的程序的想法。&lt;/p&gt;
&lt;h2 id=&quot;%E6%80%9D%E8%B7%AF&quot; tabindex=&quot;-1&quot;&gt;思路&lt;/h2&gt;
&lt;p&gt;整个程序的思路是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;把 APP 在 App Store 上的 URL 添加到一个订阅列表里&lt;/li&gt;
&lt;li&gt;程序通过 URL 分析出 APP 的信息保存到数据库&lt;/li&gt;
&lt;li&gt;设定一个定时任务，遍历所有 URL 得到新的 APP 信息然后对比原有价格&lt;/li&gt;
&lt;li&gt;当新价格与旧价格不同时，触发事件&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;catchem&quot; tabindex=&quot;-1&quot;&gt;Catchem&lt;/h2&gt;
&lt;p&gt;我把这个程序起名叫 &lt;strong&gt;Catchem&lt;/strong&gt;, 是 Catch them 的意思。因为目标是 selft-host, 不必太在意数据库的性能，这种情况用 serverless 的 database 是最方便的，serverless 首选 SQLite. 逻辑用 JavaScript 写，Express 暴露一些 API (比如添加应用) 给前端调用。前端选 Vue.js。&lt;/p&gt;
&lt;h3 id=&quot;%E8%8E%B7%E5%8F%96-app-%E4%BF%A1%E6%81%AF&quot; tabindex=&quot;-1&quot;&gt;获取 APP 信息&lt;/h3&gt;
&lt;p&gt;首先我们应该怎么通过 APP 的 URL 获取 APP 的信息，比如 Shadowmatic 的 URL 是 &lt;a href=&quot;https://itunes.apple.com/cn/app/shadowmatic/id775888026?mt=8&quot;&gt;https://itunes.apple.com/cn/app/shadowmatic/id775888026?mt=8&lt;/a&gt; 。在我观察页面 DOM 结构的时候，我发现这种 APP 页面是有 &lt;a href=&quot;https://www.wikiwand.com/en/Schema_matching&quot;&gt;semantic schema&lt;/a&gt; 的。并且提供的内容非常多，包括应用的名字、截屏、评分、价格等等。&lt;/p&gt;
&lt;p&gt;于是二话不说写了个 &lt;a href=&quot;https://github.com/djyde/Catchem/blob/master/utils%2Fappstore.js&quot;&gt;解析 APP 页面信息的方法&lt;/a&gt;，这个方法解析后的整合到的信息是：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://itunes.apple.com/cn/app/shadowmatic/id775888026?mt=8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Shadowmatic&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;TRIADA Studio LLC&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;http://a3.mzstatic.com/us/r30/Purple69/v4/81/bc/33/81bc33fd-5597-8b5e-fed7-bf99927e29f9/screen640x640.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a4.mzstatic.com/us/r30/Purple69/v4/d7/8a/2a/d78a2a8f-7367-e8b5-fb03-22de6523d996/screen640x640.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a3.mzstatic.com/us/r30/Purple49/v4/62/45/0e/62450e8d-193b-6942-7750-a64e86b5c102/screen640x640.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a3.mzstatic.com/us/r30/Purple69/v4/d9/a5/ce/d9a5ce19-e751-083e-d7d5-17fc552b0b10/screen640x640.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a1.mzstatic.com/us/r30/Purple69/v4/89/67/32/896732ba-19d0-d8f1-ed8a-aedd4ca02e61/screen640x640.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a5.mzstatic.com/us/r30/Purple49/v4/e7/3f/25/e73f252d-b0c0-bb00-8dc9-4b67d5b6ff67/screen480x480.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a4.mzstatic.com/us/r30/Purple49/v4/b7/49/97/b74997a5-127b-e1e3-76ab-c8681217f244/screen480x480.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a1.mzstatic.com/us/r30/Purple69/v4/42/6e/e7/426ee72d-7b55-b5ad-cba6-b0b1b79f67f2/screen480x480.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a1.mzstatic.com/us/r30/Purple69/v4/e7/ac/2f/e7ac2f8c-067a-6b28-0cf4-c3621470d6e8/screen480x480.jpeg&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;     &lt;span class=&quot;token string&quot;&gt;&#39;http://a1.mzstatic.com/us/r30/Purple49/v4/6e/e1/9f/6ee19f6d-457a-a0ef-f9f5-e3b465b85877/screen480x480.jpeg&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;textDescription&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;** 2015年Apple Design Award得主 **** App Store. iPhone 年度最佳游戏 2015 **** App Store. iPad 年度创新游戏 2015 **Shadowmatic是一款能够激发想象力的谜题游戏，游戏过程中，你将在聚光灯下旋转抽象物体，在墙上找出可辨认的投影。这款游戏融合了精彩的视觉效果和既轻松又令人爱不释手的游戏玩法。在探索的旅程中，您将惊喜地发现很多超乎想象、变幻无穷的投影。游戏有12个房间，每个房间都有独特的概念设计、环境氛围以及音乐效果。提示。游戏中包含一系列的提示。为能够充分享受游戏的乐趣，我们建议您仅在个别情况下进行求助。音乐。每个房间都有自己独特的音乐编排，形成了独特的氛围和与众不同的感受。佩戴耳机可获得最佳音乐效果，同时，这些音乐还可在iTunes单独购买。-- 12个独特环境中特设的100多个关卡-- 炫酷的画面-- 次级目标-- 非线性关卡进度-- 3D视差效果-- 街机模式** Shadowmatic要求设备为iPhone 3GS及更高版本。-----------------------------------------------------Triada Studio是一个拥有20多年行业经验的计算机图形及动画工作室。Shadowmatic是该公司的首个项目，该项目结合了其丰富的计算机图形经验以及实验性的内部3D引擎。&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;http://a5.mzstatic.com/us/r30/Purple49/v4/63/2f/f1/632ff1ab-4019-48d1-fdbd-b3b9e1e50e43/icon175x175.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;offers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;¥18.00&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;¥18.00&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;applicationCategory&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;游戏&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;datePublished&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2016年02月03日&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;softwareVersion&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1.9&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;TRIADA Studio LLC&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;operatingSystem&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;需要 iOS 6.0 或更高版本。与 iPhone、iPad、iPod touch 兼容。&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;aggregateRating&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;4.88354     395 份评分\n&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;ratingValue&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;4.88354&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;reviewCount&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;395 份评分&#39;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E7%9B%91%E5%90%AC%E4%BB%BB%E5%8A%A1&quot; tabindex=&quot;-1&quot;&gt;监听任务&lt;/h3&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// https://github.com/djyde/Catchem/blob/master/models%2Fapp.js#L141-L147&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cronJob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;check&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Checking finsihed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;cronJob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; job &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; schedule&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;scheduleJob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;0 */2 * * *&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cronJob&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;监听任务本质上就是一个 cron job, 定时执行获取所有 APPS 的最新信息并对照原有价格。&lt;/p&gt;
&lt;h3 id=&quot;integrations&quot; tabindex=&quot;-1&quot;&gt;Integrations&lt;/h3&gt;
&lt;p&gt;对比得出变动后，我希望远不止发送 email。所以我加入了 Integration, 使 Catchem 可以对价格变动作出更灵活的反应。&lt;/p&gt;
&lt;p&gt;目前只有 WebHook 这个 Integration, 当检测出价格变动，Catchem 会自动触发这个 hook， 把相关数据 POST 给所提供的 URL, 这样一来，价格变动后的动作取决于 hook 而不是 Catchem 本身。由此你可以写各种 hook，比如用来发送 Slack 信息的 hook，当你想要的 APP 降价后会给你的 Slack 发送信息。&lt;/p&gt;
&lt;h2 id=&quot;%E8%A1%A8%E7%8E%B0&quot; tabindex=&quot;-1&quot;&gt;表现&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://blogscdn.qiniudn.com/2016-02-16.1.35.03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blogscdn.qiniudn.com/2016-02-16.1.35.11.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;%E5%8F%91%E9%80%81%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E7%9A%84-hook&quot; tabindex=&quot;-1&quot;&gt;发送微信消息的 hook&lt;/h3&gt;
&lt;p&gt;由于我经常用微信，如果 Catchem 可以及时把降价信息推送到我微信的话那是极好的。于是我写了一个给自己发送微信消息的 hook，这个 hook 使用测试订阅号的 token。&lt;/p&gt;
&lt;p&gt;hook 相关的代码段：&lt;a href=&quot;https://github.com/djyde/lean-hook/blob/master/routes%2Fwechat.js#L31-L54&quot;&gt;https://github.com/djyde/lean-hook/blob/master/routes%2Fwechat.js#L31-L54&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;我伪造了一个价格来测试：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;a href=&quot;http://blogscdn.qiniudn.com/WeChat_1455600212.png&quot;&gt;http://blogscdn.qiniudn.com/WeChat_1455600212.png&lt;/a&gt;&amp;quot; width=&amp;quot;320px&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;p&gt;于是乎，现在只要我心仪的 APP 降价或限免，我的微信就能收到降价信息。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BC%80%E6%BA%90&quot; tabindex=&quot;-1&quot;&gt;开源&lt;/h2&gt;
&lt;p&gt;整个项目开源在 &lt;a href=&quot;https://github.com/djyde/Catchem&quot;&gt;https://github.com/djyde/Catchem&lt;/a&gt; ，大家可以拿来自己用，前提是遵循 MIT License。&lt;/p&gt;
&lt;p&gt;会编程非常酷，对吧。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>我学五笔的经历</title>
    <link href="https://lutaonan.com/blog/my-wubi-exp/"/>
    <updated>2016-03-14T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/my-wubi-exp/</id>
    <content type="html">&lt;p&gt;最近总是看到社区有人讨论输入法，有朋友安利双拼，有人想 &lt;a href=&quot;https://v2ex.com/t/256251&quot;&gt;开始学五笔&lt;/a&gt;，看了一些回帖，作为一个打了 6,7 年五笔的年轻人，我很有感触，所以就写写我学五笔的经历，给大家借鉴借鉴。&lt;/p&gt;
&lt;p&gt;我第一次接触五笔是五年级的电脑课，那时鼠标还是有滚球的。当时电脑老师知道我很喜欢电脑，就告诉我学校准备搞一个电脑打字比赛，希望我学五笔去参赛。我那时只会打全拼，压根没有想过学五笔，但是老师告诉我，如果参加，午睡的时间可以到机房练习。听到这个『福利』之后我立马答应参赛。&lt;/p&gt;
&lt;p&gt;之后的一个星期的午睡时间我都去机房练打字，不过我的电脑老师并没有手把手教学，而是帮我装了个叫 &amp;quot;wt&amp;quot; 的软件，是个 DOS 程序，专门用来练五笔的。（我一直没搞懂它为什么叫做 wt，最近又搜了一下，这货中文名叫『明伦五笔』）电脑老师就让我按照这个软件的进度去练。然后又给我一张字根口诀表，什么『王旁青头戈五一』，让我背一下。&lt;/p&gt;
&lt;p&gt;刚开始我练的是很认真的，看着一排字，对照着键码提示敲。老师也没管我，自己在讲台玩电脑。于是几天以后我也就没怎么练五笔了，开始玩金山打字通，玩打字游戏，打英文。&lt;/p&gt;
&lt;p&gt;这就是我第一次接触五笔，没有背字根，只勉强记住了一些一级简码，能打出来的词语只有『中国人』(k l w)。这段时间最大的收获其实是学会了盲打，靠金山打字通掌握了正确的打字指法。&lt;/p&gt;
&lt;p&gt;第二次接触是我姐买了一台步步高电子词典，这部词典相当牛逼，可以用数据线连到电脑，然后安装很多游戏，我经常上厕所的时候拿去玩。后来我姐就生气了，一怒之下把游戏全删了。当时我很失落，但是我还是得上厕所，还是得拿电子词典去玩。我把所有功能都按了一遍，发现没什么好玩的，唯一算得上具有人机交互功能的程序就只有一个练五笔程序。&lt;/p&gt;
&lt;p&gt;我就开始玩这个，但是我几乎什么字都不会，我选了四级全码的练习。四级全码的意思是同一个字母打四次就会出现的字。程序是这样的：右上角出现一个字，我得输入四个字母然后按确认看对不对。我一开始什么都不会，只会一级简码。所以我就开始一直蒙，蒙到最后我就把所有全码几乎都记住了。我现在还记得我记住的第一个全码是『火』，四个 o。&lt;/p&gt;
&lt;p&gt;第三次是六年级毕业后的暑假，那时我的上网时间是被限制的。那段时间几乎每天在我爸上班的地方，有一台没有联网的电脑，除了 Microsoft Office, 就只有金山打字通。那时拼音输入法没有现在智能，会五笔仍然是招聘的一个加分项，所以我爸妈都希望我们学五笔。我姐是打五笔的，打字非常快，虽然和我当时打拼音的『敲打速度』差不多，但是五笔重码率非常低，不需要像拼音那样，打出来，还得看看是哪个选项。加上那时我也闷得慌，就天天用金山打字通练五笔。&lt;/p&gt;
&lt;p&gt;很多人说学五笔得背字根表，记口诀。我从小就讨厌背诵，所以一直没有去背那个鬼东西，导致我一直非常容易忘。后来我『牺牲』了自己一些有限的上网时间，搜了一下字根排布有没有什么规律。&lt;/p&gt;
&lt;p&gt;然后我发现果然是有的，五笔字根在键位上的排布是有规律的。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BA%94%E7%AC%94%E7%9A%84%E8%A7%84%E5%BE%8B&quot; tabindex=&quot;-1&quot;&gt;五笔的规律&lt;/h2&gt;
&lt;p&gt;首先来看一下整个字根的分布图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://blogscdn.qiniudn.com/zigenbiao.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;对于新手来说肯定是非常吓人的，这也是很少人学五笔的原因。但是其实它是有规律的。&lt;/p&gt;
&lt;p&gt;第一是整体上的划分，&lt;strong&gt;整个布局总共只有五个区&lt;/strong&gt;，分别是撇（QWERT）、点（YUIOP）、横（ASDFG）、竖（HJKL）和折勾（XCVBNM）。这也许就五笔叫做五笔的原因。只要记住这五个区的分布就十分容易定位某个字根所在的键位了。比如你忘了『蝗』字的『虫』字旁在哪个键位，但是你知道它肯定是在 HJKL 其中一个键上。&lt;/p&gt;
&lt;p&gt;再来深入地看某一个区中的规律。例如『刘』立刀旁，他是竖的，它肯定在 HJKL 其中一个键位上，那到底是哪一个键呢？如果你仔细看一下，你会发现，H 是一条竖，J 是两条竖，K 是三条竖，L 是四条竖。立刀旁是两竖，那它就是在 J 上了。&lt;/p&gt;
&lt;p&gt;当然，还有很多其它的字根并不遵循这些规律，到底是为什么，我也不知道，你得问王永民先生。打多几次，就能记住。&lt;/p&gt;
&lt;p&gt;记着这两个规律，自己再读一遍字根图，摸索一下，再打个一星期，正常人来说，是肯定能学会的。但是熟练还是得靠多打。&lt;strong&gt;五笔是十分靠肌肉记忆的&lt;/strong&gt;，打到熟练的时候，你已经不会再去这个字应该怎么拆的。比如我就不会去想『应该』这两个字怎么拆，但是我知道它肯定打 &lt;code&gt;YIYY&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;%E4%BA%94%E7%AC%94%E5%BF%AB%E8%BF%98%E6%98%AF%E6%8B%BC%E9%9F%B3%E5%BF%AB%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;五笔快还是拼音快？&lt;/h2&gt;
&lt;p&gt;现在社区上一般讨论的是五笔快还是拼音快。常年打拼音的人肯定会说现在的拼音输入法已经相当智能，不怎么需要去考虑重码。事实确实是这样的，以前智能 ABC 的时代，五笔是完全可以虐拼音的。但现在，起码在这个点上，五笔的优势已经不再明显了。也就是说，五笔最能体现出优势是在脱离词库的场景。这有点像 vim 和 sublime 的比较，离开了 GUI，vim 的优势就迅速体现出来了。&lt;/p&gt;
&lt;p&gt;根据我多年的经验，实际上，拼音不是最快的，五笔也不是，&lt;strong&gt;最快的输入方式是拼音五笔混输&lt;/strong&gt;。说实话，打了这么多年五笔，我仍然不清楚『尴尬』两个字怎么拆，当我打到这两个字的时候，我只要输入&amp;quot;ganga&amp;quot;，就立刻打出来，这是最好的，非常舒服和自然。这一段文字，除了尴尬两个字，其它全是五笔打出来的，难拆的字一点也没影响到我的打字速度。所以，还是那句话，最快的输入方式是拼音和五笔混输。&lt;/p&gt;
&lt;h2 id=&quot;%E9%82%A3%E6%88%91%E7%8E%B0%E5%9C%A8%E5%AD%A6%E4%B8%8D%E5%AD%A6%E4%BA%94%E7%AC%94%E5%A5%BD%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;那我现在学不学五笔好？&lt;/h2&gt;
&lt;p&gt;无论在什么情况，能学习的东西，学了肯定是好的，不管它是不是『有用』的。就像 Steve Jobs 说的，connecting the dot. 有没有必要学，花多少时间去学，那是你自己要考虑的事情，作为旁人，没有办法给意见。只能说的是，&lt;strong&gt;学了以后不会在短时间内给你带来什么，不学你也不会失去什么&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;人越长大，就越少机会做些能让自己感到开心的『无用』的事情了。&lt;/p&gt;
&lt;h2 id=&quot;%E6%9C%80%E5%90%8E%E6%8E%A8%E8%8D%90%E4%B8%AA%E8%BE%93%E5%85%A5%E6%B3%95%EF%BC%9F&quot; tabindex=&quot;-1&quot;&gt;最后推荐个输入法？&lt;/h2&gt;
&lt;p&gt;关于输入法，我在 Mac 上用的是 QQ 五笔，基础词库很足，再加上流行语词库，就十分够用了。打五笔，词库只有嫌多，没有嫌少的。至于手机，我在手机是不打五笔的，因为&lt;strong&gt;没有手感&lt;/strong&gt;。之前已经说了，打五笔到后期基本是靠肌肉记忆的，也就是说，离开了实体键盘，很难有同样流畅的手感。我在手机上比较奇葩，用的是笔划输入，是学我姐的。最近也在玩 Google 的划动输入，所以偶尔也打打拼音。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Vue.js 和 Webpack</title>
    <link href="https://lutaonan.com/blog/vue-and-webpack/"/>
    <updated>2015-08-29T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/vue-and-webpack/</id>
    <content type="html">&lt;nav class=&quot;table-of-contents&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#about-vue.js&quot;&gt;About Vue.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#why-vue.js&quot;&gt;Why Vue.js&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#using-vue.js&quot;&gt;Using Vue.js&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#%E7%BB%84%E4%BB%B6%E5%8C%96&quot;&gt;组件化&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#%E8%B7%AF%E7%94%B1&quot;&gt;路由&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#about-webpack&quot;&gt;About Webpack&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#using-webpack&quot;&gt;Using Webpack&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#%E5%A4%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6&quot;&gt;多入口文件&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#loader&quot;&gt;loader&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#why-vue.js-%2B-webpack&quot;&gt;Why Vue.js + Webpack&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#using-vue.js-%2B-webpack&quot;&gt;Using Vue.js + Webpack&lt;/a&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#css-%E5%88%86%E7%A6%BB&quot;&gt;css 分离&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#%E6%80%BB%E7%BB%93&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://lutaonan.com/blog/vue-and-webpack/#%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB&quot;&gt;延伸阅读&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/nav&gt;&lt;p&gt;&lt;strong&gt;转载前请务必先联系邮箱&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近在把 SISE Game（我们学校的校内游戏直播网站） 从原本的 Ruby on Rails 彻底用 Node.js 重写，  经过一些考虑，决定用 Vue.js 和 Express.js 实现前后端分离的架构，在这几天的重写过程中，积累了对 Webpack 和 Vue.js 的一些新的看法。&lt;/p&gt;
&lt;h2 id=&quot;about-vue.js&quot; tabindex=&quot;-1&quot;&gt;About Vue.js&lt;/h2&gt;
&lt;p&gt;Vue 是个很年轻的 MVVM Library，常常有很多人用 Angular 和 Vue 比较，因为两者都是 MVVM，但实际上，前者是 Framework，而后者是 Library。前者有很陡峭的学习曲线，后者可以很快地掌握运用到项目中去。&lt;/p&gt;
&lt;p&gt;Vue 的官方是用 &lt;strong&gt;a library for building modern web interfaces&lt;/strong&gt; 来描述自己的。Vue 适合和 React 对比，因为在使用 Vue 的 Components System 开发比较大型的 Single Page Application 的时候，我发现它和 React 有一些相似的地方。如果你赞同 React 的思想，但又不想写 JSX，那么，你就可能需要试试 Vue 了。&lt;/p&gt;
&lt;p&gt;一个用 Vue 实现 Data binding 的 Demo：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- index.html --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;#app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-model&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;{{ msg }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;hello Vue.js&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;why-vue.js&quot; tabindex=&quot;-1&quot;&gt;Why Vue.js&lt;/h2&gt;
&lt;p&gt;前端开发发展到现在，我们做过的很多努力，都是在尝试把开发者从繁琐的 DOM  操作和管理 DOM state 中解放出去，我们希望只需要通过描述数据和行为，DOM 自己就可以发生对应的变化，React 在 View 这一层实现了这一目标，而 MVVM 则是通过 ViewModel 的 Data Binding。React 宣称自己是 View，那么在我看来， Vue 则是 View + ViewModel，并且 Vue 更加 lightweight 和 flexible。&lt;/p&gt;
&lt;p&gt;Vue 最让我喜欢的是它的 Components System，利用它可以构建组件化的中大型应用。React 当然也是组件化的，但是 Virtual DOM (JSX) 在一些场景让我很不满意。比如有一次，我用一个使用 React 的项目中，想要在一 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; 里使用 &lt;code&gt;webkit-playsinline&lt;/code&gt; 这个 attribute，但是 React 不支持，渲染的时候直接被 ignored，我必须手动地操作 DOM 给 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; setAttribute。相反，Vue 的 Components System 当中，写的是真正的 DOM，不需要担心不支持不兼容的各种情况。&lt;/p&gt;
&lt;p&gt;容易被用作对比的是 Angular。我第一次听说 Vue 的时候，也是把它当作一个 lightweight 的 Angular alternative. 但是当真正实践使用 Vue 的时候，才发现它和 Angular 有着很大的不同。Angular 是一个 Framework，一旦你使用它，就必须按照它的一套去组织你的项目。以前写 Angular 项目的过程和经历对我个人来说都不太愉快，我更加倾向于 Vue 这种更灵活的方案。&lt;/p&gt;
&lt;p&gt;关于 Vue 和其它库和框架的对比，官方也有作者更详细的 &lt;a href=&quot;http://vuejs.org/guide/faq.html&quot;&gt;解答&lt;/a&gt;（&lt;a href=&quot;http://cn.vuejs.org/guide/faq.html&quot;&gt;中文版本&lt;/a&gt;）&lt;/p&gt;
&lt;h2 id=&quot;using-vue.js&quot; tabindex=&quot;-1&quot;&gt;Using Vue.js&lt;/h2&gt;
&lt;p&gt;SISE Game 并不算一个大型的 Web APP，但也规范地使用组件化的开发，整个项目的结构大致如下：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;├── app&lt;br /&gt;│   ├── app.js #entry&lt;br /&gt;│   ├── app.vue&lt;br /&gt;│   ├── config.js &lt;br /&gt;│   ├── filters # 自定义的一些 filters&lt;br /&gt;│   ├── components #各种组件&lt;br /&gt;│   ├── models&lt;br /&gt;│   ├── utils&lt;br /&gt;│   └── views #各种页面的 views&lt;br /&gt;│       ├── home.vue&lt;br /&gt;│       ├── room.vue&lt;br /&gt;│       ├── signin.vue&lt;br /&gt;│       ├── signup.vue&lt;br /&gt;│       └── user.vue&lt;br /&gt;├── bower.json&lt;br /&gt;├── build&lt;br /&gt;├── gulpfile.js&lt;br /&gt;├── index.html&lt;br /&gt;├── node_modules&lt;br /&gt;├── package.json&lt;br /&gt;├── static #静态文件&lt;br /&gt;│   ├── images&lt;br /&gt;│   ├── styles&lt;br /&gt;│   └── swfs&lt;br /&gt;└── webpack.config.js&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E7%BB%84%E4%BB%B6%E5%8C%96&quot; tabindex=&quot;-1&quot;&gt;组件化&lt;/h3&gt;
&lt;p&gt;Vue 通过自己的 &lt;code&gt;.vue&lt;/code&gt; 文件来定义 components，&lt;code&gt;.vue&lt;/code&gt; 文件里包含组件的模板、逻辑和样式，从而实现组件和组件之间的&lt;strong&gt;分治&lt;/strong&gt;，非常易于维护。&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- components/user.vue --&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Hello {{ name }}&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;v-on&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;click: alertName()&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;alert!&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;  module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function-variable function&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Randy&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function-variable function&quot;&gt;alertName&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #69C&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上就是一个简单的 component 实现，借助 webpack，甚至可以直接在 component 里写 es6、scss 和 jade。&lt;/p&gt;
&lt;h3 id=&quot;%E8%B7%AF%E7%94%B1&quot; tabindex=&quot;-1&quot;&gt;路由&lt;/h3&gt;
&lt;p&gt;路由对于 Single Page Application 来说应该算是不可少的东西，Vue 作为一个 Library，它本身并不提供这些组件。目前官方的 vue-router 仍处于 technical preview 的状态，官方也建议可以使用 component 和 Director.js 实现路由，比如：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;app&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;component&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;{{ currentView }}&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;home&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;Vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;page1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;currentView&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;home&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Switching pages in your route handler:&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;currentView &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;page1&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样你只需要操作 &lt;code&gt;app.currentView&lt;/code&gt; 的值就可以实现视图的切换，这一步通常会配合 Director.js 这类的 hash router.&lt;/p&gt;
&lt;h2 id=&quot;about-webpack&quot; tabindex=&quot;-1&quot;&gt;About Webpack&lt;/h2&gt;
&lt;p&gt;与其费周章说明 Webpack 是什么东西，倒不如先说说不用 Webpack 以前的一些现实。&lt;/p&gt;
&lt;p&gt;我们在写前端 JavaScript 的时候，通常是写在多个 &lt;code&gt;.js&lt;/code&gt; 文件里，通过闭包避免全局变量污染，然后一股脑地用 &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 引入。&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  ...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;a.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;b.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;c.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;出于性能上的追求，我们会应该把 &lt;code&gt;a.js&lt;/code&gt; &lt;code&gt;b.js&lt;/code&gt; &lt;code&gt;c.js&lt;/code&gt; 合并为同一个文件 &lt;code&gt;bundle.js&lt;/code&gt; 来减少请求数量，变成：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  ...&lt;br /&gt;  &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;bundle.js&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 Gulp/Grunt 等自动化构建工具很容易可以实现这样的 concat，但是很快我们就会发现，单纯的 concat 并不是一个好的方案，因为代码文件之间的依赖关系不明确，这样一来，有时不得不花一些时间去组织 concat 的顺序。我们很希望像写 Node 一样模块化地去写前端 JavaScript。&lt;/p&gt;
&lt;p&gt;又有些时候，在两个不同的页面当中我们常常会共用一些代码，单纯的 concat 会增加很多不必要的体积。&lt;/p&gt;
&lt;p&gt;所以  ，我们理想的情况是，可以在前端优雅地写符合模块规范（AMD, UMD, CommonJS）的代码并且自动打包，最好还能自动把重用的文件分离出来。&lt;/p&gt;
&lt;p&gt;嘿，Webpack 就很擅长做这种事。&lt;/p&gt;
&lt;h2 id=&quot;using-webpack&quot; tabindex=&quot;-1&quot;&gt;Using Webpack&lt;/h2&gt;
&lt;p&gt;Webpack 兼容所有模块规范（如果你不知道到底用哪一种，就用 CommonJS）。&lt;/p&gt;
&lt;p&gt;配置 webpack 比较简单，你需要定义入口文件和 bundle 输出的目录：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./build&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，你就能在前端这样去写 JavaScript：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// /app.js&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; Vue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Vue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/*...*/&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是 CommonJS 的写法，如果你写过 Node.js，应该对这种写法相当熟悉。这时运行 &lt;code&gt;$ webpack&lt;/code&gt; ，webpack 会自动根据入口文件 &lt;code&gt;app.js&lt;/code&gt; 中的依赖关系来打包成单个 js 文件，输出到配置文件中指定的 output path 中。&lt;/p&gt;
&lt;p&gt;webpack 也可以通过 plugin 自动分析重用的模块并且打包成单独的文件：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; webpack &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;webpack&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  CommonsChunkPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; webpack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;optimize&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;CommonsChunkPlugin&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./build&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CommonsChunkPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vendor.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;%E5%A4%9A%E5%85%A5%E5%8F%A3%E6%96%87%E4%BB%B6&quot; tabindex=&quot;-1&quot;&gt;多入口文件&lt;/h3&gt;
&lt;p&gt;webpack 的一个特色是可以指定多个入口文件，最后打包成多个 bundle。比如说 Timeline page 和 Profile page 是不同的页面，我们不希望两个页面的 js 被打包在一起，这时我们就可以为 timeline 和 profile 两个页面定义不同的入口：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;timeline&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./timeline.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;profile&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./profile.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./build&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;[name].bundle.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;CommonsChunkPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vendor.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最后会被分别打包成 &lt;code&gt;timeline.bundle.js&lt;/code&gt; 和 &lt;code&gt;profile.bundle.js&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;loader&quot; tabindex=&quot;-1&quot;&gt;loader&lt;/h3&gt;
&lt;p&gt;webpack 神奇的地方在于，任何的文件都能被 &lt;code&gt;require()&lt;/code&gt;。依靠各种 loader，使你可以直接 &lt;code&gt;require()&lt;/code&gt; 样式、图片等静态文件。这些静态文件最后都会被处理（比如 scss pre-process 和图片的压缩）和打包在配置好的 output path 中。&lt;/p&gt;
&lt;pre class=&quot;language-scss&quot;&gt;&lt;code class=&quot;language-scss&quot;&gt;&lt;span class=&quot;token selector&quot;&gt;#container&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;background-image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token url&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;.https://gbstatic.djyde.com/blog/background.png&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; #69C&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// app.js&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./styles/app.scss&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// blablabla....&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;你可以像上面这样在 JavaScript 中引入 scss （和在样式中引入图片），只要你配置好处理 scss 的 loader：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./build&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;bundle.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.(css|scss)$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ExtractTextPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;style&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;css!sass&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.(png|jpg)$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;url?limit=8192&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 图片低于 8MB 时转换成 inline base64，非常神奇！&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;css 默认被编译到 JavaScript 中成为字符串后再被插入到 &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 中，我个人建议使用 &lt;code&gt;ExtractTextPlugin&lt;/code&gt; 这个插件把 css 分离出去。&lt;/p&gt;
&lt;h2 id=&quot;why-vue.js-%2B-webpack&quot; tabindex=&quot;-1&quot;&gt;Why Vue.js + Webpack&lt;/h2&gt;
&lt;p&gt;在以往的一些小型的前端项目中，我习惯把逻辑（&lt;code&gt;scripts&lt;/code&gt;）、视图（&lt;code&gt;views&lt;/code&gt;）和样式（&lt;code&gt;styles&lt;/code&gt;）分开在独立的目录当中，保证三者不耦合在一起。但是随着项目越来越大，这样的结构会让开发越来越痛苦，比如要增加或修改某个 &lt;code&gt;view&lt;/code&gt; 的时候，就要在 &lt;code&gt;scripts&lt;/code&gt; 和 &lt;code&gt;sytles&lt;/code&gt; 里找到对应这个 &lt;code&gt;view&lt;/code&gt; 的逻辑和样式进行修改。&lt;/p&gt;
&lt;p&gt;为了避免这样随着项目增大带来的难于维护，我开始尝试&lt;strong&gt;前端组件化&lt;/strong&gt;，把 &lt;code&gt;views&lt;/code&gt; 拆分成不同的组件（component），为单个组件编写对应的逻辑和样式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;app/components
├── Chat
│   ├── Chat.jade
│   ├── Chat.js
│   └── Chat.scss
└── Video
    ├── Video.jade
    ├── Video.js
    └── Video.scss
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样的开发模式，不仅提高代码的可维护性和可重用性，还有利于团队之间的协作，一个组件由一个人去维护，更好地实现&lt;strong&gt;分治&lt;/strong&gt;。幸运的是，随着 React 越来越火，组件化的开发模式也就越来越被接受。&lt;/p&gt;
&lt;h2 id=&quot;using-vue.js-%2B-webpack&quot; tabindex=&quot;-1&quot;&gt;Using Vue.js + Webpack&lt;/h2&gt;
&lt;p&gt;在 Vue 中，可以利用一个 &lt;code&gt;.vue&lt;/code&gt; 文件实现组件化，而不需要对每个组件分别建立 style, scripts 和 view。这样做的好处是使组件能更加直观，而坏处是目前有些 editor 对 &lt;code&gt;.vue&lt;/code&gt; 的语法支持还是不太好。我用 Atom 写 &lt;code&gt;.vue&lt;/code&gt; 的时候，&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; 的那一块并不能自动补全。不过我个人不依赖 css 的补全，所以没有太大的影响。如果你比较依赖这个，建议你还是把这些代码分离出来。&lt;/p&gt;
&lt;p&gt;一个简单的 Vue Component：&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;&amp;lt;!-- components/sample.vue --&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;template&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;jade&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;  .test&lt;br /&gt;    h1 hello {{msg}}&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;world&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;sass&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token style&quot;&gt;&lt;span class=&quot;token language-css&quot;&gt;&lt;br /&gt;  &lt;span class=&quot;token selector&quot;&gt;.test&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token selector&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token property&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; center&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们使用 Webpack 就可以自动将 &lt;code&gt;.vue&lt;/code&gt; 文件编译成正常的 JavaScript 代码，只需要在 Webpack 中配置好 &lt;code&gt;vue-loader&lt;/code&gt; 即可：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./build&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.vue$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;vue-loader&#39;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样，就可以正常地在文件中 &lt;code&gt;require()&lt;/code&gt; 所有 &lt;code&gt;.vue&lt;/code&gt; 文件：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;#app&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;/* ... */&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token string-property property&quot;&gt;&#39;sample&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./components/sample.vue&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;css-%E5%88%86%E7%A6%BB&quot; tabindex=&quot;-1&quot;&gt;css 分离&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;vue-loader&lt;/code&gt; 使用 &lt;code&gt;style-loader&lt;/code&gt; 把 component 当中的样式编译成字符串后插入到 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; 中去。但我们希望把 css 文件独立出去，那么可以使用上一篇文章提到的 &lt;code&gt;ExtractTextPlugin&lt;/code&gt; 插件，配合 &lt;code&gt;vue-loader&lt;/code&gt; 的 &lt;code&gt;withLoaders()&lt;/code&gt; 方法实现生成独立样式文件：&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// webpack.config.js&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; vue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vue-loader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ExtractTextPlugin &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;extract-text-webpack-plugin&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;entry&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./app.js&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;./build&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;app.js&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;loaders&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token literal-property property&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\.vue$&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; vue&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;withLoaders&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; ExtractTextPlugin&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;css!sass&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 编译 Sass&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ExtractTextPlugin&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;app.css&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 输出到 output path 下的 app.css 文件&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;%E6%80%BB%E7%BB%93&quot; tabindex=&quot;-1&quot;&gt;总结&lt;/h2&gt;
&lt;p&gt;webpack 是一个十分好用的模块打包工具，使用它更加利于实现前端开发工程化。&lt;/p&gt;
&lt;p&gt;很多人认为 webpack 可以取代 Gulp/Grunt 等构建工具，其实不然。Webpack 仅仅是&lt;strong&gt;顺便&lt;/strong&gt;替构建工具分担了一些预编译预处理的工作，而构建工作不仅仅只有预编译啊。&lt;/p&gt;
&lt;p&gt;Vue.js 和 Webpack 的结合使用方法写到这里就已经算是写完了，当然，还有很多其它的实践方法，都要靠读者自己去摸索了，这个系列仅仅是想给没有使用过 Vue.js 或者 Webpack 的读者一个大概的认识。&lt;/p&gt;
&lt;p&gt;最后趁这个机会感慨一下，前端开发是让人感到兴奋的，我以前也写很多有关前端的东西，但从来不愿意称自己为『前端开发者』，是由于自己对前端开发的各种浅见，认为前端开发低端、repetitive、不能成大事。但是经过更加深入的实践，才慢慢发现前端也是工程化的、有学问的、有活力的。我很高兴可以作为一名『前端开发者』，在这里感受日新月异的氛围的技术浪潮。&lt;/p&gt;
&lt;h2 id=&quot;%E5%BB%B6%E4%BC%B8%E9%98%85%E8%AF%BB&quot; tabindex=&quot;-1&quot;&gt;延伸阅读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/fouber/blog/issues/10&quot;&gt;前端工程——基础篇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webpack.github.io/docs/tutorials/getting-started/&quot;&gt;Webpack Getting Started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000002551952&quot;&gt;Webpack 入门指迷&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VkTCL6Nqm6Y&quot;&gt;How Instagram.com Works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vuejs.org/guide/components.html&quot;&gt;Vue.js - Component System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://vuejs.org/guide/application.html&quot;&gt;Vue.js - Building Larger Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vuejs/vue-router&quot;&gt;vue-router&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://teahour.fm/2015/08/16/vuejs-creator-evan-you.html&quot;&gt;和 Vue.js 框架的作者聊聊前端框架开发背后的故事&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  
  <entry>
    <title>写给即将学习编程的大学新生</title>
    <link href="https://lutaonan.com/blog/note-to-new-programming-students/"/>
    <updated>2015-07-01T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/note-to-new-programming-students/</id>
    <content type="html">&lt;p&gt;写下这篇文章，是由于我想和即将进入大学有意学习编程的同学谈谈关于编程的事，因为你可能需要一些建议，来步入这个新的阶段。&lt;/p&gt;
&lt;p&gt;编程是非常有趣的一件事情，学会编程就像成为魔术师，你可以创造任何你想创造的东西。在我出生到现在的这 20 年里，除了文学，没有比编程更吸引我的活动。就像 Zed Shaw 所说的，『编程作为一项智力活动，是唯一一种能让你创建交互式艺术的艺术形式。你可以创建项目让别人使用，而且你可以间接地和使用者沟通。没有其他的艺术形式能做到如此程度的交互性。电影领着观众走向一个方向，绘画是不会动的。而代码却是双向互动的。』&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%80%E4%BA%9B%E5%9B%B0%E6%83%91&quot; tabindex=&quot;-1&quot;&gt;一些困惑&lt;/h3&gt;
&lt;p&gt;但是当你开始接触（我所在的）大学的计算机相关课程，你会发现，所谓的编程学习，无非是老师教一章内容，要求你用学到的语法去解一些数学题。于是很多人选择放弃，认为编程乏味无趣，用很长的课时学习，却只能写出简单的四则运算，或者解数学题。&lt;/p&gt;
&lt;p&gt;然而这并非编程的全部，因为这恰恰能生动地表明编程语言只不过是一种工具，你可以用它来解数学题，也能做其它更有趣、更实用的程序。&lt;/p&gt;
&lt;p&gt;在（我所在的）大学，计算机相关课程教 C/C++。有一次，一位大三的朋友问我说，『我学 C 学了一段时间，为什么我还是感觉很没用？』我是这样回答他的：&lt;/p&gt;
&lt;p&gt;你学 C 学了一段时间感觉没有用处并非你个人的问题，我无法跟你解释为什么，不过我可以告诉你的是，Linus Torvalds 用 C 写了 Linux 和 Git; Antirez 用 C 写了数据库 Redis. 你可能连 Git 是什么都不知道，如何用 C 写出这种水平的程序呢？&lt;/p&gt;
&lt;p&gt;所以，当你学习 C/C++ 基础后进入困惑期时，不要因为用它写不出实用的程序而止步不前，而应该开始接触其它的编程语言。当你所学和所做的东西越来越多的时候，你慢慢就会发现，编程语言只不过是一种工具，重要的在于你想做什么，用什么语言合适去做（华软的校内游戏直播网站 SISE Game 就是例子，网站的后端用 Ruby on Rails 写，但实时聊天是用 Node.js (JavaScript) ，因为相对于 Ruby, Node.js 更加适合处理 WebSocket）。 &lt;strong&gt;你之所以感觉 C/C++ 没用，是因为你暂时还没有足够的眼界和能力去使用他去进行创造&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;应该去学什么？我的建议是一门严谨的强类型语言（如 Java）和一门愉快的脚本语言（如 JavaScript, Ruby, Python）。当然了，如果你想学一些能立竿见影的技能，你也可以写写前端（HTML, CSS）。&lt;/p&gt;
&lt;h3 id=&quot;so%2C-how%3F&quot; tabindex=&quot;-1&quot;&gt;So, How?&lt;/h3&gt;
&lt;p&gt;对于应该如何去学习，我不打算在这里论述，我只想列出一些有用的建议：&lt;/p&gt;
&lt;ol start=&quot;0&quot;&gt;
&lt;li&gt;
&lt;p&gt;无论你要学什么，你读的第一篇文章应该是《提问的智慧》&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用 Google 搜索技术相关的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;购买付费可靠的科学上网服务，不要吝啬一顿饭的钱。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要害怕英文，英文非常重要。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;几乎所有最新的技术在刚出来的时候只有英文文档，优质的 Tutorial 大多数也是英文的。&lt;/p&gt;
&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;参与一些质量高的社区，关注一些值得关注的人。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这一点很重要。学校所教的内容是陈旧、过时的（虽然这也许不是学校的错），你必须和社区保持同步，不断接触和学习新的技术。AngularJS 发布至今都有 6 年了，但在我们学校仍然在教 ExtJS，很多学生甚至毕业出来找工作的时候，连 AngularJS 都没听说过。&lt;/p&gt;
&lt;p&gt;国内的 &lt;a href=&quot;http://v2ex.com/&quot;&gt;V2EX&lt;/a&gt; 和国外的 &lt;a href=&quot;https://news.ycombinator.com/&quot;&gt;Hackernews&lt;/a&gt; 都是不错的社区。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%80%E4%BA%9B%E7%8E%B0%E7%8A%B6&quot; tabindex=&quot;-1&quot;&gt;一些现状&lt;/h3&gt;
&lt;p&gt;你并不能指望大学的课程或者大学老师能给你带来什么，一切都应该靠你自己。无论在多优秀或者多差劲的学校，学校本身能影响你的是辅助性的，而不是决定性的。在我的学校，几乎都在打游戏和应付考试，据我所知，即使是重点大学，这样的学生也大有人在，我渐渐明白，『你今后人生的艰难，恰恰不是因为你没能考上一个满意的学校，而是在这所学校里，在一个能让自己自由充分成长的黄金四年里，把自己给荒废了』（采铜的回答）。&lt;/p&gt;
&lt;h3 id=&quot;%E4%B8%BA%E6%9C%AA%E6%9D%A5%E9%93%BA%E8%B7%AF&quot; tabindex=&quot;-1&quot;&gt;为未来铺路&lt;/h3&gt;
&lt;p&gt;如果你以后有意从事编程的相关工作，你应该要知道，在找工作时和其它竞争者拉开差距的，并非你从哪里毕业，在学校当什么干部，而是你有足够的能力，并且能清楚地让别人看到你的能力。&lt;/p&gt;
&lt;p&gt;让别人看到你能力的方法是开源社区和博客，所以我建议你在学习的过程中，多为开源做贡献，甚至可以维护一个自己的开源项目。另外还可以把自己的所学记录和总结到独立博客中。一个好的 Github Account 和好的独立博客是一份最好的简历。也许你也只有在大学这自由的四年才能有时间做这两件事情。&lt;/p&gt;
&lt;h3 id=&quot;%E6%9C%80%E5%90%8E&quot; tabindex=&quot;-1&quot;&gt;最后&lt;/h3&gt;
&lt;p&gt;我在广州大学华软软件学院读书已经有一年了，这一年里我遇到过许多对现在对未来感到迷茫的朋友，他们对教育抱有希望，对知识怀有渴望。我曾经试图做一些事情去改变现状，但是效果都不大，该混日子的还是继续混日子，到毕业后才开始抱怨就业难。我呸，互联网行业都缺人缺到什么地步了你跟我说就业难？&lt;/p&gt;
&lt;p&gt;不过，只要我还没被学校开除，我还是会尽我所能地为迷茫的朋友做一些事情。至于做些什么，我还没想好，我不知道应该怎么做，如果你有好的建议，欢迎联系我。&lt;/p&gt;
&lt;p&gt;如果你看完这篇文章，还有问题可以联系我的 Email: &lt;a href=&quot;mailto:randypriv@gmail.com&quot;&gt;randypriv@gmail.com&lt;/a&gt;，只要你读过《提问的智慧》，问的问题经过自己思考，我都会尽快地详细地回复。&lt;/p&gt;
&lt;p&gt;『你会编程。他们不会。这真他妈的酷。』&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>2014 年终总结</title>
    <link href="https://lutaonan.com/blog/2014-summary/"/>
    <updated>2014-12-31T00:00:00Z</updated>
    <id>https://lutaonan.com/blog/2014-summary/</id>
    <content type="html">&lt;p&gt;2014 年因为有高考所以比往年过得快了些，大学的一个学期转眼也过了。有时候甚至缓不过神来，甚至让我常常有种错觉，2014 它早就过了，但 2015 它迟迟未来。&lt;/p&gt;
&lt;p&gt;今年的 1 月我还在为化学烦恼，今年的 12 月现在的我已经过上了那时梦寐以求的自由的生活。但是生活哪有什么所谓的自由，高考只不过给我开了一个闸，从一个小笼子，滚进了一个更大的笼子而已。而这个更大的笼子比以前按部就班的生活更让我感到害怕，就像《海上钢琴师》里 1900 放弃离开轮船后 对 Max 说的一样，让我害怕的不是我看到的东西，而是我所无法看到的东西，这里什么都有，可是唯独没有尽头。&lt;/p&gt;
&lt;p&gt;还好上了大学以后，能遇到几个让我又有了寄托的朋友，我和他们一起做事，非常地快乐。&lt;/p&gt;
&lt;p&gt;技术方面，哈哈，就不说了，我仍然迫切的希望能用技术给这个社会带来一点好的改变。&lt;/p&gt;
&lt;p&gt;遗憾的事是好像很难再找到能聊聊天的朋友，而且好像变得不太爱说话了，所以有时候我还是挺怀念高一时候的我。最遗憾的事是 Google 还没有解封，当我以为『她』正在慢慢变好的时候，却再一次让我失望了。&lt;/p&gt;
&lt;p&gt;新年愿望是，1，所有人都好 2，能继续写代码 3，生活的这片土地能再进步一些，我知道这的确需要一个过程，但我想自己，和我身边的人，还有未来的儿子和女儿，都能在这里活得快乐些。&lt;/p&gt;
&lt;p&gt;最后附上 1900 对 Max 说的那段话，说的真好：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All that city. You just couldn&#39;t see the end to it. The end? Please? You please just show me where it ends? It was all very fine on that gangway. And I was grand too, in my overcoat. I cut quite a figure. And I was getting off. Guaranteed. There was no problem. It wasn&#39;t what I saw that stopped me, Max. It was what I didn&#39;t see. You understand that? What I didn&#39;t see. In all that sprawling city there was everything except an end. There was no end. What I did not see was where the whole thing came to an end. The end of the world...&lt;/p&gt;
&lt;/blockquote&gt;
</content>
  </entry>
</feed>